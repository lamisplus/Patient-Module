[{"C:\\Users\\USER\\Data.fi\\patient-module\\src\\index.js":"1","C:\\Users\\USER\\Data.fi\\patient-module\\src\\App.js":"2","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\PatientDashboard.js":"3","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\RegisterPatient.js":"4","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\ViewPatient.js":"5","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\biometrics\\index.js":"6","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\index.js":"7","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\ClientDashboard\\index.js":"8","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\PatientCard.js":"9","C:\\Users\\USER\\Data.fi\\patient-module\\src\\api.js":"10","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\Biometrics.js":"11","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\PreviousRecapture.js":"12","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\SplitActionButton.js":"13","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\PatientRecapture.js":"14","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\MigrationDQA\\index.js":"15","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\ClientDashboard\\CheckIn\\index.js":"16","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\MigrationDQA\\DuplicateHospitalNumbers.js":"17","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\Home\\PatientList.js":"18","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\CaptureBiometric.js":"19","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\Home\\BiometricsList.js":"20","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\Home\\CheckedInPatients.js":"21","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\Home\\Biometrics.js":"22","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\ReCaptureBiometric.js":"23","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\PatientsCard.js":"24","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\PersonDemographics\\index.js":"25","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\Home\\NotCaptured.js":"26","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\Recapture.js":"27","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\PatientBiometrics.js":"28"},{"size":495,"mtime":1687122308840,"results":"29","hashOfConfig":"30"},{"size":2344,"mtime":1687123869514,"results":"31","hashOfConfig":"30"},{"size":33296,"mtime":1687122308970,"results":"32","hashOfConfig":"30"},{"size":78502,"mtime":1687123869526,"results":"33","hashOfConfig":"30"},{"size":80831,"mtime":1687123869527,"results":"34","hashOfConfig":"30"},{"size":7623,"mtime":1687123869528,"results":"35","hashOfConfig":"30"},{"size":5146,"mtime":1687705321603,"results":"36","hashOfConfig":"30"},{"size":9349,"mtime":1687122308966,"results":"37","hashOfConfig":"30"},{"size":10870,"mtime":1687123869522,"results":"38","hashOfConfig":"30"},{"size":426,"mtime":1687885519894,"results":"39","hashOfConfig":"30"},{"size":53121,"mtime":1687884436314,"results":"40","hashOfConfig":"30"},{"size":9099,"mtime":1687885478574,"results":"41","hashOfConfig":"30"},{"size":4863,"mtime":1687122308973,"results":"42","hashOfConfig":"30"},{"size":9858,"mtime":1687123869522,"results":"43","hashOfConfig":"30"},{"size":2560,"mtime":1687122308969,"results":"44","hashOfConfig":"30"},{"size":24055,"mtime":1687122308966,"results":"45","hashOfConfig":"30"},{"size":14558,"mtime":1687122308969,"results":"46","hashOfConfig":"30"},{"size":14362,"mtime":1687123869521,"results":"47","hashOfConfig":"30"},{"size":17854,"mtime":1687123869520,"results":"48","hashOfConfig":"30"},{"size":10149,"mtime":1687122308967,"results":"49","hashOfConfig":"30"},{"size":14105,"mtime":1687122308968,"results":"50","hashOfConfig":"30"},{"size":15055,"mtime":1687123869521,"results":"51","hashOfConfig":"30"},{"size":34249,"mtime":1687123869525,"results":"52","hashOfConfig":"30"},{"size":8755,"mtime":1687125671899,"results":"53","hashOfConfig":"30"},{"size":8752,"mtime":1687123869523,"results":"54","hashOfConfig":"30"},{"size":10246,"mtime":1687122308968,"results":"55","hashOfConfig":"30"},{"size":25767,"mtime":1687884395818,"results":"56","hashOfConfig":"30"},{"size":16804,"mtime":1687705197882,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"1fpw81n",{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"60"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":45,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"60"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"60"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":49,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"60"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"60"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"60"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"60"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"60"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"60"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"60"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"60"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"60"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"60"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"60"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"60"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"60"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"60"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"60"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":39,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"60"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"60"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"60"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"60"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"60"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"60"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"60"},"C:\\Users\\USER\\Data.fi\\patient-module\\src\\index.js",[],["140","141"],"C:\\Users\\USER\\Data.fi\\patient-module\\src\\App.js",["142","143","144","145","146"],"import React, { useCallback, useEffect, useState } from \"react\";\r\nimport { MemoryRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport RegisterPatient from \"./main/webapp/components/RegisterPatient\";\r\nimport ViewPatient from \"./main/webapp/components/ViewPatient\";\r\nimport PatientDashboard from \"./main/webapp/components/PatientDashboard\";\r\nimport Dashboard from \"./main/webapp/components/ClientDashboard\";\r\nimport ClientDashboard from \"./main/webapp/components/ClientDashboard\";\r\nimport BiometricsDashboard from \"./main/webapp/components/biometrics/\";\r\n/*import PatientVitals from './main/webapp/components/PatientVitals';\r\nimport AddPatientVitals from './main/webapp/components/Add-Patient-Vitals';*/\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./main/webapp/css/style.css\";\r\nimport DualListBox from \"react-dual-listbox\";\r\nimport \"react-dual-listbox/lib/react-dual-listbox.css\";\r\nimport Components from \"./main/webapp/components\";\r\nexport default function App() {\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <ToastContainer />\r\n        {/*          <Switch> looks through its children <Route>s and\r\n            renders the first one that matches the current URL.*/}\r\n        <Switch>\r\n          <Route path=\"/patient-biometrics\">\r\n            <BiometricsDashboard />\r\n          </Route>\r\n          <Route path=\"/register-patient\">\r\n            <RegisterPatientPage />\r\n          </Route>\r\n          <Route path=\"/view-patient\">\r\n            <ViewPatient />\r\n          </Route>\r\n          <Route path=\"/patient-dashboard\">\r\n            <PatientDashboardPage />\r\n          </Route>\r\n          <Route path=\"/patient-vitals\">\r\n            <Dashboard />\r\n            {/*<PatientVitalsPage />*/}\r\n          </Route>\r\n          <Route path=\"/add-patient-vital\">\r\n            <Dashboard />\r\n            {/*<AddPatientVitalsPage />*/}\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Components />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nfunction PatientDashboardPage() {\r\n  return <ClientDashboard />;\r\n}\r\nfunction RegisterPatientPage() {\r\n  return <RegisterPatient />;\r\n}\r\n\r\n/*\r\nfunction PatientVitalsPage() {\r\n  return <PatientVitals />\r\n}\r\nfunction AddPatientVitalsPage() {\r\n  return <AddPatientVitals />\r\n}\r\n*/\r\n","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\PatientDashboard.js",["147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191"],"import React, {useCallback, useEffect, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {makeStyles, withStyles} from '@material-ui/core/styles';\r\nimport { Link } from 'react-router-dom';\r\nimport ButtonMui from \"@material-ui/core/Button\";\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { Col} from \"reactstrap\";\r\nimport { Step, Label, Segment, Icon } from \"semantic-ui-react\";\r\nimport PatientCard from './PatientCard'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Tab } from 'semantic-ui-react';\r\nimport { DataGrid } from '@mui/x-data-grid';\r\nimport Box from '@mui/material/Box';\r\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport axios from \"axios\";\r\nimport {token, url as baseUrl} from \"../../../api\";\r\nimport Swal from \"sweetalert2\";\r\nimport {Controller, useForm} from \"react-hook-form\";\r\nimport {Button, Card, CardContent, FormControl, Grid, MenuItem, Paper, TextField, Typography} from \"@mui/material\";\r\nimport {format} from 'date-fns';\r\nimport { toast} from \"react-toastify\";\r\nimport MaterialTable from 'material-table';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport CheckBoxOutlineBlankIcon from '@mui/icons-material/CheckBoxOutlineBlank';\r\nimport CheckBoxIcon from '@mui/icons-material/CheckBox';\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport {TiArrowBack} from \"react-icons/ti\";\r\nimport Biometrics from \"./Biometrics\";\r\nimport moment from \"moment\";\r\nimport DualListBox from \"react-dual-listbox\";\r\nimport 'react-dual-listbox/lib/react-dual-listbox.css';\r\nimport _ from 'lodash';\r\n\r\nimport { DesktopDateTimePicker } from '@mui/x-date-pickers/DesktopDateTimePicker';\r\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\r\nimport Stack from '@mui/material/Stack';\r\n\r\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        marginBottom: 20,\r\n        flexGrow: 1,\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n    },\r\n    secondaryHeading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    icon: {\r\n        verticalAlign: 'bottom',\r\n        height: 20,\r\n        width: 20,\r\n    },\r\n    details: {\r\n        alignItems: 'center',\r\n    },\r\n    column: {\r\n        flexBasis: '20.33%',\r\n    },\r\n    helper: {\r\n        borderLeft: `2px solid ${theme.palette.divider}`,\r\n        padding: `${theme.spacing(1)}px ${theme.spacing(1) * 2}px`,\r\n    },\r\n    link: {\r\n        color: theme.palette.primary.main,\r\n        textDecoration: 'none',\r\n        '&:hover': {\r\n            textDecoration: 'underline',\r\n        },\r\n    },\r\n    checkinModal:{\r\n        \"& .modal-dialog\":{\r\n            maxWidth:\"1000px\"\r\n        },\r\n        \"& .ui.label\":{\r\n            backgroundColor:\"#fff\",\r\n            fontSize:'16px',\r\n            color:'#014d88',\r\n            fontWeight:'bold',\r\n            textAlign:'left'\r\n        },\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n    },\r\n    checkInDatePicker:{\r\n        '& .MuiFormControl-root.MuiTextField-root':{\r\n            border:'1px solid #eee'\r\n        }\r\n    }\r\n}));\r\nconst appointmentColumns = [\r\n    { field: 'id', headerName: 'ID', width: 90 },\r\n    {\r\n        field: 'firstName',\r\n        headerName: 'First name',\r\n        width: 150,\r\n        editable: true,\r\n    },\r\n    {\r\n        field: 'lastName',\r\n        headerName: 'Last name',\r\n        width: 150,\r\n        editable: true,\r\n    },\r\n    {\r\n        field: 'age',\r\n        headerName: 'Age',\r\n        type: 'number',\r\n        width: 110,\r\n        editable: true,\r\n    },\r\n\r\n];\r\n\r\nconst appointments = [\r\n    // { id: 1, lastName: 'Snow', firstName: 'Jon', age: 35 },\r\n\r\n];\r\n\r\n\r\nlet newDate = new Date()\r\nfunction PatientDashboard(props) {\r\n    const userDetail = props.location && props.location.state ? props.location.state.user : null;\r\n    const [loading, setLoading] = useState('');\r\n    let history = useHistory();\r\n    const classes = useStyles();\r\n    const [checkInDate,setCheckInDate]=useState(new Date());\r\n    const [checkOutDate,setCheckOutDate]=useState(new Date());\r\n    const [today, setToday] = useState(new Date().toISOString().substr(0, 10).replace('T', ' '));\r\n    const patientObj = history.location && history.location.state ? history.location.state.patientObj : {};\r\n    const permissions = history.location && history.location.state ? history.location.state.permissions : [];\r\n    const { handleSubmit, control } = useForm();\r\n    const [modal, setModal] = useState(false);\r\n    const [allServices, setAllServices] = useState(null);\r\n    const [checkinStatus, setCheckinStatus]= useState(false)\r\n    const [modalCheckOut, setModalCheckOut] = useState(false);\r\n    const [services, setServices]= useState([]);\r\n    const [selectedServices, setSelectedServices]= useState({\"selected\":[]});\r\n    const [patientVisits, setPatientVisits]= useState([]);\r\n    const [patientBiometricStatus, setPatientBiometricStatus]= useState(patientObj.biometricStatus);\r\n    const [biometricsModuleInstalled,setBiometricsModuleInstalled]=useState(false);\r\n\r\n    const [checkOutObj, setCheckOutObj] = useState({\r\n        personId: \"\",\r\n        visitStartDate:format(new Date(newDate), 'yyyy-MM-dd hh:mm')\r\n    })\r\n    const [checkInObj, setCheckInObj] = useState({\r\n        serviceIds:\"\",\r\n        visitDto: {\r\n            personId: patientObj.id,\r\n            checkInDate: format(new Date(newDate), 'yyyy-MM-dd hh:mm')\r\n        }\r\n    })\r\n\r\n    const updatePatientBiometricStatus = (bioStatus) =>{\r\n        setPatientBiometricStatus(bioStatus);\r\n    }\r\n    const loadServices = useCallback(async () => {\r\n        try {\r\n            const response = await axios.get(`${baseUrl}patient/post-service`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            //setServices(response.data);\r\n            setAllServices(response.data);\r\n            setServices(\r\n                Object.entries(response.data).map(([key, value]) => ({\r\n                    label: value.moduleServiceName,\r\n                    value: value.moduleServiceCode,\r\n                }))\r\n            );\r\n/*            setSelectedServices(\r\n                _.uniq(_.map(userDetail.applicationUserOrganisationUnits, 'organisationUnitName'))\r\n            )*/\r\n        } catch (e) {\r\n            await Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: 'An error occurred fetching services!',\r\n            });\r\n        }\r\n    }, []);\r\n    const loadPatientVisits = useCallback(async () => {\r\n        try {\r\n            const response = await axios.get(`${baseUrl}patient/visit/visit-by-patient/${patientObj.id}`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            setPatientVisits(response.data);\r\n            response.data.map((visits)=> {\r\n                if(visits.checkOutDate===null){\r\n                    setCheckinStatus(true)\r\n                }\r\n            })\r\n\r\n\r\n        } catch (e) {\r\n            await Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: 'An error occurred fetching services!',\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    const checkForBiometricsModule =()=>{\r\n        axios\r\n            .get(`${baseUrl}modules/check?moduleName=biometric`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                if(response.data===true){\r\n                    setBiometricsModuleInstalled(true);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                //console.log(error);\r\n            });\r\n\r\n    }\r\n    const loadUserDetails = () =>{\r\n        axios.get(`${baseUrl}account`).then((response)=>{\r\n\r\n        }).catch((error)=>{\r\n\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadUserDetails();\r\n        loadServices();\r\n        loadPatientVisits();\r\n        checkForBiometricsModule();\r\n    }, [loadServices, loadPatientVisits]);\r\n\r\n    let visitTypesRows = null;\r\n    if (services && services.length > 0) {\r\n        visitTypesRows = services.map((service, index) => (\r\n            <MenuItem key={service.moduleServiceCode} value={service.moduleServiceCode}>{service.moduleServiceName}</MenuItem>\r\n        ));\r\n    }\r\n\r\n    const onChangeDate = (date) => {\r\n        console.log(date.target.value)\r\n        const newDate = moment(new Date(date.target.value)).format(\"yyyy-MM-dd hh:mm\");\r\n        setCheckInDate(newDate);\r\n        console.log(newDate);\r\n    };\r\n\r\n\r\n    const columns = [\r\n        {\r\n            field: 'checkInDate',\r\n            headerName: 'Checked In Date',\r\n            width: 200,\r\n            editable: false,\r\n        },\r\n        {\r\n            field: 'checkOutDate',\r\n            headerName: 'Check Out Date',\r\n            width: 200,\r\n            editable: false,\r\n        },\r\n        {\r\n            field: 'service',\r\n            headerName: 'Service',\r\n            width: 200,\r\n            editable: false,\r\n        },\r\n        {\r\n            field: 'status',\r\n            headerName: 'Status',\r\n            width: 200,\r\n            editable: false,\r\n        }\r\n    ];\r\n\r\n    const panes = [\r\n        { menuItem: 'Visits', render: () =>\r\n                <Tab.Pane>\r\n\r\n                    <MaterialTable\r\n                        title=\"\"\r\n                        columns={[\r\n                            {\r\n                                title: \"Check-In Date\",\r\n                                field: \"checkInDate\", filtering: false,\r\n                                headerStyle: {\r\n                                    backgroundColor: \"#039be5\",\r\n                                    border:'2px solid #fff',\r\n                                    paddingRight:'30px'\r\n                                }\r\n                            },\r\n                            { title: \"Check-Out Date\", field: \"checkOutDate\", filtering: false  },\r\n                            { title: \"Service\", field: \"service\", filtering: false  },\r\n                            { title: \"Status\", field: \"status\", filtering: false },\r\n                        ]}\r\n                        isLoading={loading}\r\n                        data={patientVisits.map((row) => ({\r\n                            checkInDate: moment(row.checkInDate).format(\"YYYY-MM-DD h:mm a\"),\r\n                            checkOutDate: row.checkOutDate?moment(row.checkOutDate).format(\"YYYY-MM-DD h:mm a\"):\"Visit Ongoing\",\r\n                            service:row.service,\r\n                            status:(<h6 style={{color:row.status ==='COMPLETED' ? 'green' : 'red'}}>{row.status}</h6>),\r\n\r\n                        }))}\r\n\r\n                        options={{\r\n                            headerStyle: {\r\n                                backgroundColor: \"#014d88\",\r\n                                color: \"#fff\",\r\n                                fontSize:'16px',\r\n                                padding:'10px',\r\n                                fontWeight:'bold'\r\n                            },\r\n                            rowStyle: {\r\n                                color: 'rgba(0,0,0,.87)',\r\n                                fontFamily:`'poppins', sans-serif`\r\n                            },\r\n                            searchFieldStyle: {\r\n                                width : '200%',\r\n                                margingLeft: '250px',\r\n                            },\r\n                            filtering: false,\r\n                            exportButton: false,\r\n                            searchFieldAlignment: 'left',\r\n                            pageSizeOptions:[10,20,100],\r\n                            pageSize:10,\r\n                            debounceInterval: 400\r\n                        }}\r\n                    />\r\n                </Tab.Pane>\r\n        },\r\n\r\n/*        { menuItem: permissions.includes('view_patient_appointment') || permissions.includes(\"all_permission\") ? 'Appointments' : \"\", render: () =>\r\n                permissions.includes('view_patient_appointment') || permissions.includes(\"all_permission\") ?\r\n                    <Tab.Pane>\r\n                        <div style={{ height: 400, width: '100%' }}>\r\n                            <DataGrid\r\n                                rows={appointments}\r\n                                columns={appointmentColumns}\r\n                                pageSize={5}\r\n                                rowsPerPageOptions={[5]}\r\n                                checkboxSelection\r\n                                disableSelectionOnClick\r\n                            />\r\n                        </div>\r\n                    </Tab.Pane>\r\n                    :\"\"\r\n        },*/\r\n\r\n                { menuItem: permissions.includes('view_patient_appointment') && biometricsModuleInstalled || permissions.includes(\"all_permission\")  && biometricsModuleInstalled? 'Biometrics' : \"\", render: () =>\r\n                        permissions.includes('view_patient_appointment') || permissions.includes(\"all_permission\") ?\r\n                            <Tab.Pane>\r\n                                <div style={{ minHeight: 400, width: '100%' }}>\r\n                                    <Biometrics patientId={patientObj.id} updatePatientBiometricStatus={updatePatientBiometricStatus}/>\r\n                                </div>\r\n                            </Tab.Pane>\r\n                            :\"\"\r\n                }\r\n\r\n\r\n\r\n    ];\r\n\r\n    const handleCheckIn = () => {\r\n        setModal(true);\r\n    };\r\n    const handleCheckOut = () => {\r\n        setModalCheckOut(true);\r\n    };\r\n\r\n    const onCancelCheckIn = () => {\r\n        setModal(false);\r\n    };\r\n    const onCancelCheckOut = () => {\r\n        setModalCheckOut(false);\r\n    };\r\n    const onDelete = () => {\r\n\r\n    };\r\n/*    const handleInputChangeService = (e) => {\r\n        setSelectedServices({ ...selectedServices, [e.target.name]: e.target.value });\r\n    };*/\r\n    //console.lo(selectedServices)\r\n\r\n    const onSubmit = async (data) => {\r\n        try {\r\n            const today = new Date();\r\n            const visitDetails = await axios.get(`${baseUrl}patient/visit/visit-detail/${patientObj.id}`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            const visitDetail = visitDetails.data;\r\n            const pendingVisit = visitDetail.find(obj => obj.status == \"PENDING\");\r\n            let visit = null;\r\n            if (!pendingVisit) {\r\n                const visitResponse = await axios.post(`${baseUrl}patient/visit`, {\r\n                    \"personId\": patientObj.id,\r\n                    \"visitStartDate\": today\r\n                }, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n                visit = visitResponse.data;\r\n            } else {\r\n                visit = pendingVisit;\r\n            }\r\n            await axios.post(`${baseUrl}patient/encounter`, {\r\n                \"encounterDate\": today,\r\n                \"personId\": patientObj.id,\r\n                \"serviceCode\": data.VisitType,\r\n                \"status\": \"PENDING\",\r\n                \"visitId\": visit.id\r\n            }, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            setModal(false);\r\n            await Swal.fire({\r\n                icon: 'success',\r\n                text: 'CheckedIn successfully',\r\n                timer: 1500\r\n            });\r\n        } catch (e) {\r\n            await Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: 'An error occurred while checking in Patient!',\r\n            });\r\n        }\r\n    };\r\n    const onError = async () => {\r\n        await Swal.fire({\r\n            icon: 'error',\r\n            title: 'Oops...',\r\n            text: 'An error occurred while checking in Patient!',\r\n        });\r\n    };\r\n\r\n    let checkInServicesID = [];\r\n    /**** Submit Button For CheckIN  */\r\n    const handleSubmitCheckIn = (e) => {\r\n        e.preventDefault();\r\n        //Check if selected service object is empty before creating visit and posting.\r\n        let m = moment(checkInDate, \"yyyy-MM-DD hh:mm\").format('yyyy-MM-DD H:mm');\r\n        if(selectedServices.selected.length > 0 && moment(m).isValid()){\r\n            selectedServices.selected.length > 0 && selectedServices.selected.map((service)=> {\r\n                checkInServicesID.push(_.find(allServices,{moduleServiceCode:service}).id)\r\n            });\r\n\r\n            checkInObj.serviceIds= checkInServicesID\r\n            //Ensure date time is in 24hr format\r\n            checkInObj.visitDto.checkInDate = moment(checkInDate, \"yyyy-MM-DD hh:mm\").format('yyyy-MM-DD HH:mm');\r\n            axios.post(`${baseUrl}patient/visit/checkin`, checkInObj,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n\r\n            )\r\n                .then(response => {\r\n                    toast.success(\"Patient Check-In successful\");\r\n                    setCheckinStatus(true)\r\n                    onCancelCheckIn()\r\n                    loadPatientVisits()\r\n                })\r\n                .catch(error => {\r\n                    console.log(error)\r\n                    toast.error(\"Something went wrong\");\r\n                    onCancelCheckIn()\r\n                });\r\n        }else{\r\n            toast.error(\"Kindly check the form for a valid date and selected services\");\r\n        }\r\n\r\n    }\r\n\r\n    /**** Submit Button Processing  */\r\n    const handleSubmitCheckOut = (e) => {\r\n        e.preventDefault();\r\n        const getVisitID= patientVisits.find((visits)=> visits.status==='PENDING')\r\n\r\n        axios.put(`${baseUrl}patient/visit/checkout/${getVisitID.id}`,getVisitID.id,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n\r\n        )\r\n            .then(response => {\r\n                toast.success(\"Record save successful\");\r\n                setCheckinStatus(false)\r\n                onCancelCheckOut()\r\n                loadPatientVisits()\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n                toast.error(\"Something went wrong\");\r\n                onCancelCheckOut()\r\n            });\r\n    }\r\n    const onServiceSelect = (selectedValues) => {\r\n        setSelectedServices({\"selected\":selectedValues});\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Card>\r\n                <CardContent>\r\n\r\n                    <PatientCard patientObj={patientObj} permissions={permissions} patientBiometricStatus={patientBiometricStatus}/>\r\n                    <Card style={{marginTop:'10px',boxShadow: 'rgba(99, 99, 99, 0.2) 0px 2px 8px 0px'}}>\r\n                        <CardContent>\r\n                            <div className=\"row\">\r\n                                <div className=\"mb-3 col-md-3\">\r\n                                    &nbsp;\r\n                                </div>\r\n                                <div className=\"mb-3 col-md-3\">\r\n                                    &nbsp;\r\n                                </div>\r\n                                <div className=\"mb-3 col-md-3\">\r\n                                    &nbsp;\r\n                                </div>\r\n                                <div className=\"mb-3 col-md-3\">\r\n                                    <Link to={\"/\"} >\r\n                                        <MatButton\r\n                                            className=\" float-right mr-1\"\r\n                                            variant=\"contained\"\r\n                                            floated=\"left\"\r\n                                            startIcon={<TiArrowBack  />}\r\n                                            style={{backgroundColor:\"rgb(153, 46, 98)\", color:'#fff', height:'35px'}}\r\n                                        >\r\n                                            <span style={{ textTransform: \"capitalize\" }}>Back</span>\r\n                                        </MatButton>\r\n                                    </Link>\r\n\r\n                                    {permissions.includes('patient_check_in') || permissions.includes(\"all_permission\") ? (\r\n                                            <>\r\n                                                {checkinStatus===false ? (\r\n                                                        <Button\r\n                                                            variant=\"contained\"\r\n                                                            style={{ backgroundColor: \"rgb(4, 196, 217)\", fontSize:'14PX', fontWeight:'bold', height:'35px' }}\r\n                                                            onClick={handleCheckIn}\r\n                                                            className=\" float-right mr-1\"\r\n                                                        >\r\n                                                            <span style={{ textTransform: \"capitalize\" }}>CheckIn</span>\r\n                                                        </Button>\r\n                                                    )\r\n                                                    :\r\n                                                    \"\"\r\n                                                }\r\n                                            </>\r\n                                        )\r\n                                        :\"\"\r\n                                    }\r\n                                    {checkinStatus===true ? (\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                style={{ backgroundColor: \"green\", fontSize:'14PX', fontWeight:'bold', height:'35px' }}\r\n                                                onClick={handleCheckOut}\r\n                                                className=\" float-right mr-1\"\r\n                                            >\r\n                                                <span style={{ textTransform: \"capitalize\" }}>Check Out</span>\r\n                                            </Button>\r\n                                        )\r\n                                        :\r\n                                        \"\"\r\n                                    }\r\n\r\n                                </div>\r\n                            </div>\r\n                            <Tab panes={panes} />\r\n                        </CardContent>\r\n                    </Card>\r\n\r\n\r\n                </CardContent>\r\n            </Card>\r\n            <Modal  size=\"lg\" style={{maxWidth: '900px'}} isOpen={modal} toggle={onCancelCheckIn}  className={classes.checkinModal}>\r\n                    <ModalHeader toggle={onCancelCheckIn}><h5 style={{fontWeight:\"bold\",fontSize:'30px',color:'#992E62'}}>Select Check-In Service</h5></ModalHeader>\r\n                    <ModalBody>\r\n                        <form onSubmit={handleSubmitCheckIn}>\r\n                            <Paper\r\n                                style={{\r\n                                    display: \"grid\",\r\n                                    gridRowGap: \"20px\",\r\n                                    padding: \"20px\",\r\n                                    margin: \"10px 10px\",\r\n                                }}>\r\n                                <Grid container spacing={2}>\r\n                                    <Grid item xs={12}>\r\n                                        <FormGroup style={{width:'100%'}} className={classes.checkInDatePicker}>\r\n                                            <LocalizationProvider dateAdapter={AdapterDateFns} >\r\n                                                <Label for=\"post-services\" style={{color:'#014d88',fontWeight:'bolder',fontSize:'18px'}}>Check-In Date *</Label>\r\n                                                <DesktopDateTimePicker\r\n                                                    renderInput={(params) =>\r\n                                                        <TextField\r\n                                                            {...params}\r\n\r\n                                                            sx={{\r\n                                                                /*label:{ color:'#014d88',fontWeight:'bolder',fontSize:'18px' }*/\r\n                                                                input:{fontSize:'14px'},\r\n                                                            }}\r\n                                                            fullWidth\r\n                                                        />\r\n                                                    }\r\n                                                    value={checkInDate}\r\n                                                    onChange={(newValue) => {\r\n                                                        setCheckInDate(newValue);\r\n                                                    }}\r\n                                                    maxDate={new Date()}\r\n                                                    maxTime={new Date()}\r\n                                                    style={{width:'100%'}}\r\n                                                />\r\n                                            </LocalizationProvider>\r\n                                        </FormGroup>\r\n                                    </Grid>\r\n                                    {/*                                <Grid item xs={8}>\r\n\r\n                                    <FormControl >\r\n                                        <Label for=\"dateOfRegistration\">Select service </Label>\r\n                                        <Autocomplete\r\n                                            multiple\r\n                                            id=\"checkboxes-tags-demo\"\r\n                                            options={services}\r\n                                            //disableCloseOnSelect\r\n                                            getOptionLabel={(option) => option.moduleServiceName}\r\n                                            onChange={(e, i) => {\r\n                                                console.log(i)\r\n                                                setSelectedServices({ ...selectedServices, checkInServices: i });\r\n                                            }}\r\n                                            renderOption={(props, option, { selected }) => (\r\n                                                <li {...props}>\r\n                                                    <Checkbox\r\n                                                        icon={icon}\r\n                                                        checkedIcon={checkedIcon}\r\n                                                        style={{ marginRight: 8 }}\r\n                                                        checked={selected}\r\n                                                    />\r\n                                                    {option.moduleServiceName}\r\n                                                </li>\r\n                                            )}\r\n                                            style={{ width: 400 }}\r\n                                            renderInput={(params) => (\r\n                                                <TextField {...params} label=\"Services\" />\r\n                                            )}\r\n                                        />\r\n\r\n                                    </FormControl>\r\n                                </Grid>*/}\r\n                                    <Grid item xs={12}>\r\n                                        <FormGroup>\r\n                                            <Label for=\"post-services\" style={{color:'#014d88',fontWeight:'bolder',fontSize:'18px'}}><h5 style={{fontWeight:\"bold\",fontSize:'30px',color:'#992E62'}}>Check-In Service *</h5></Label>\r\n                                            <DualListBox\r\n                                                options={services}\r\n                                                onChange={onServiceSelect}\r\n                                                selected={selectedServices.selected}\r\n                                            />\r\n                                        </FormGroup>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid container spacing={2}>\r\n                                    <Grid item xs={12}>\r\n                                        <Button type={\"submit\"} variant=\"contained\" color={\"primary\"}>Submit</Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Paper>\r\n                        </form>\r\n                    </ModalBody>\r\n            </Modal>\r\n            {/* Modal for CheckOut Patient */}\r\n            <Modal isOpen={modalCheckOut} toggle={onCancelCheckOut} className={classes.checkinModal} style={{maxWidth: '900px',height:\"800px\"}}>\r\n                <ModalHeader toggle={onCancelCheckOut}><h5 style={{fontWeight:\"bold\",fontSize:'30px',color:'#014d88'}}>Check Out </h5></ModalHeader>\r\n                <ModalBody>\r\n                    <form >\r\n                        <Paper\r\n                            style={{\r\n                                display: \"grid\",\r\n                                gridRowGap: \"20px\",\r\n                                padding: \"20px\",\r\n                                margin: \"10px 10px\",\r\n                            }}>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item xs={12}>\r\n                                    <h5 style={{color:'#992E62',fontSize:\"20px\", fontWeight:'bold'}}>Are you sure you want to check-out patient?</h5>\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <FormGroup style={{width:'100%'}} className={classes.checkInDatePicker}>\r\n                                        <LocalizationProvider dateAdapter={AdapterDateFns} >\r\n                                            <Label for=\"post-services\" style={{color:'#014d88',fontWeight:'bolder',fontSize:'16px'}}>Check-Out Date *</Label>\r\n                                            <DesktopDateTimePicker\r\n                                                renderInput={(params) =>\r\n                                                    <TextField\r\n                                                        {...params}\r\n\r\n                                                        sx={{\r\n                                                            /*label:{ color:'#014d88',fontWeight:'bolder',fontSize:'18px' }*/\r\n                                                            input:{fontSize:'14px'},\r\n                                                        }}\r\n                                                        fullWidth\r\n                                                    />\r\n                                                }\r\n                                                value={checkOutDate}\r\n                                                onChange={(newValue) => {\r\n                                                    setCheckOutDate(newValue);\r\n                                                }}\r\n                                                maxDate={new Date()}\r\n                                                maxTime={new Date()}\r\n                                                style={{width:'100%'}}\r\n                                            />\r\n                                        </LocalizationProvider>\r\n                                    </FormGroup>\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item xs={12}>\r\n                                    <Button type={\"submit\"} onClick={handleSubmitCheckOut} variant=\"contained\" color={\"primary\"}>Yes</Button>\r\n                                    <Button  onClick={onCancelCheckOut} variant=\"contained\" style={{backgroundColor:'#992E62',color:\"#fff\",marginLeft:\"10px\"}}>Cancel</Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Paper>\r\n                    </form>\r\n                </ModalBody>\r\n            </Modal>\r\n            {/* End of Checkout Modal */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PatientDashboard;\r\n","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\RegisterPatient.js",["192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222"],"import React, { useCallback, useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { format } from \"date-fns\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { Form, FormGroup, Label, Spinner } from \"reactstrap\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport {\r\n  faCheckSquare,\r\n  faCoffee,\r\n  faEdit,\r\n  faTrash,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\nimport * as moment from \"moment\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Card, CardContent } from \"@material-ui/core\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\r\nimport { TiArrowBack } from \"react-icons/ti\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { token, url as baseUrl } from \"../../../api\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport _ from \"lodash\";\r\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { FaUserPlus } from \"react-icons/fa\";\r\n\r\nlibrary.add(faCheckSquare, faCoffee, faEdit, faTrash);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {},\r\n  Select: {\r\n    height: 45,\r\n    width: 300,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  root: {\r\n    marginBottom: 20,\r\n    flexGrow: 1,\r\n    \"& .card-title\": {\r\n      color: \"#fff\",\r\n      fontWeight: \"bold\",\r\n    },\r\n    \"& .form-control\": {\r\n      borderRadius: \"0.25rem\",\r\n      height: \"41px\",\r\n    },\r\n    \"& .card-header:first-child\": {\r\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\r\n    },\r\n    \"& .dropdown-toggle::after\": {\r\n      display: \" block !important\",\r\n    },\r\n    \"& select\": {\r\n      \"-webkit-appearance\": \"listbox !important\",\r\n    },\r\n    \"& p\": {\r\n      color: \"red\",\r\n    },\r\n    \"& label\": {\r\n      fontSize: \"14px\",\r\n      color: \"#014d88\",\r\n      fontWeight: \"bold\",\r\n    },\r\n  },\r\n  demo: {\r\n    backgroundColor: theme.palette.background.default,\r\n  },\r\n  inline: {\r\n    display: \"inline\",\r\n  },\r\n}));\r\n\r\nconst schema = yup.object().shape({\r\n  dateOfRegistration: yup.date().required(),\r\n  hospitalNumber: yup.string().required(),\r\n  firstName: yup.string().required(),\r\n  middleName: yup.string().nullable(),\r\n  lastName: yup.string().required(),\r\n  sex: yup.number().required(),\r\n  employmentStatus: yup.number().required(),\r\n  //highestQualification: yup.number().nullable(),\r\n  maritalStatus: yup.number().required(),\r\n  dob: yup.date().required(),\r\n  dateOfBirth: yup.string().required(),\r\n  age: yup.number(),\r\n  ninNumber: yup.string().nullable(),\r\n  pnumber: yup.string().nullable(),\r\n  altPhonenumber: yup.string().nullable(),\r\n  email: yup.string().nullable(),\r\n  address: yup.string().nullable(),\r\n  landmark: yup.string().nullable(),\r\n  countryId: yup.number().required(),\r\n  stateId: yup.number().required(),\r\n  district: yup.number().nullable(),\r\n});\r\n\r\nconst isValidEmail = (email) =>\r\n  // eslint-disable-next-line no-useless-escape\r\n  /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(\r\n    email\r\n  );\r\n\r\nconst RegisterPatient = (props) => {\r\n  const {\r\n    register,\r\n    watch,\r\n    setValue,\r\n    getValues,\r\n    clearErrors,\r\n    setError,\r\n    handleSubmit,\r\n    formState,\r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n  });\r\n  const { errors, isSubmitting } = formState;\r\n  const watchPnumber = watch(\"pnumber\", false);\r\n  const watchAltPhonenumber = watch(\"altPhonenumber\", false);\r\n  const watchContactPhoneNumber = watch(\"contactPhoneNumber\", false);\r\n  const watchShowAge = watch(\"age\", false);\r\n  const [today, setToday] = useState(\r\n    new Date().toISOString().substr(0, 10).replace(\"T\", \" \")\r\n  );\r\n  const [minDOB, setMinDOB] = useState(\r\n    new Date(\"1/1/1930\").toISOString().substr(0, 10).replace(\"T\", \" \")\r\n  );\r\n  const [maxDOB, setMaxDOB] = useState(\r\n    new Date().toISOString().substr(0, 10).replace(\"T\", \" \")\r\n  );\r\n  const [contacts, setContacts] = useState([]);\r\n  const [saving, setSaving] = useState(false);\r\n  const [ageDisabled, setAgeDisabled] = useState(true);\r\n  const [showRelative, setShowRelative] = useState(false);\r\n  const [editRelative, setEditRelative] = useState(null);\r\n  const [genders, setGenders] = useState([]);\r\n  const [sexOptions, setSexOptions] = useState([]);\r\n  const [maritalStatusOptions, setMaritalStatusOptions] = useState([]);\r\n  const [educationOptions, setEducationOptions] = useState([]);\r\n  const [occupationOptions, setOccupationOptions] = useState([]);\r\n  const [relationshipOptions, setRelationshipOptions] = useState([]);\r\n  const [topLevelUnitCountryOptions, settopLevelUnitCountryOptions] = useState(\r\n    []\r\n  );\r\n  const [stateUnitOptions, setStateUnitOptions] = useState([]);\r\n  const [districtUnitOptions, setDistrictUnitOptions] = useState([]);\r\n  const [checkHospitalNumberError, setCheckHospitalNumberError] =\r\n    useState(false);\r\n  const [checkNINError, setCheckNINError] = useState(false);\r\n  const userDetail =\r\n    props.location && props.location.state ? props.location.state.user : null;\r\n  const [patientFacilityId, setPatientFacilityId] = useState(null);\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [open, setOpen] = React.useState(false);\r\n  const toggle = () => setOpen(!open);\r\n  const location = useLocation();\r\n  const locationState = location.state;\r\n  let patientId = null;\r\n  patientId = locationState ? locationState.patientId : null;\r\n\r\n  const getNames = (relationship) => {\r\n    const surname = relationship.surname;\r\n    const firstName = relationship.firstName;\r\n    const otherName = relationship.otherName ? relationship.otherName : \"\";\r\n    return surname + \", \" + firstName + \" \" + otherName;\r\n  };\r\n  const getRelationship = (relationshipId) => {\r\n    const relationship = relationshipOptions.find(\r\n      (obj) => obj.id == relationshipId\r\n    );\r\n    return relationship ? relationship.display : \"\";\r\n  };\r\n  const getPhoneContactPoint = (contactPoint) => {\r\n    if (contactPoint.value === null) {\r\n    } else {\r\n      return contactPoint ? phoneNumberFormatCheck(contactPoint).value : \"\";\r\n    }\r\n  };\r\n  const getAddress = (address) => {\r\n    return address && address.line && address.line.length > 0\r\n      ? address.line[0]\r\n      : \"\";\r\n  };\r\n  const phoneNumberFormatCheck = (phone) => {\r\n    //console.log(\"err\", phone);\r\n    if (\r\n      phone != undefined &&\r\n      typeof phone?.value !== null &&\r\n      typeof phone?.value !== \"undefined\" &&\r\n      phone?.value?.charAt(0) === \"0\"\r\n    ) {\r\n      phone.value = phone.value.replace(\"0\", \"234\");\r\n    }\r\n    return phone;\r\n  };\r\n  const calculate_age = (dob) => {\r\n    const today = new Date();\r\n    const dateParts = dob.split(\"-\");\r\n    const birthDate = new Date(dob); // create a date object directlyfrom`dob1`argument\r\n    let age_now = today.getFullYear() - birthDate.getFullYear();\r\n    //const m = today.getMonth() - birthDate.getMonth();\r\n    // if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n    //   age_now--;\r\n    // }\r\n    // if (age_now === 0) {\r\n    //   return m;\r\n    // }\r\n    return age_now;\r\n  };\r\n  const getPatient = useCallback(async () => {\r\n    if (patientId) {\r\n      const response = await axios.get(`${baseUrl}patient/${patientId}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      const sexCodeset = await axios.get(\r\n        `${baseUrl}application-codesets/v2/SEX`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      const patient = response.data;\r\n      console.log(patient);\r\n      const contacts = patient.contact ? patient.contact : [];\r\n      setContacts(contacts.contact);\r\n      const identifiers = patient.identifier;\r\n      const address = patient.address;\r\n      const contactPoint = patient.contactPoint;\r\n      const hospitalNumber = identifiers.identifier.find(\r\n        (obj) => obj.type == \"HospitalNumber\"\r\n      );\r\n      const phone = phoneNumberFormatCheck(\r\n        contactPoint?.contactPoint?.find((obj) => obj.type == \"phone\")\r\n      );\r\n      const email = contactPoint?.contactPoint?.find(\r\n        (obj) => obj.type == \"email\"\r\n      );\r\n      const altphone = phoneNumberFormatCheck(\r\n        contactPoint?.contactPoint?.find((obj) => obj.type == \"altphone\")\r\n      );\r\n      const country =\r\n        address && address.address && address.address.length > 0\r\n          ? address.address[0]\r\n          : null;\r\n      const gender = patient.gender;\r\n      //console.log(sexCodeset.data);\r\n      //console.log(_.upperFirst(_.lowerCase(patient.sex)));\r\n      const sex = _.find(sexCodeset.data, {\r\n        display: _.upperFirst(_.lowerCase(patient.sex)),\r\n      }).id;\r\n      const employmentStatus = patient.employmentStatus;\r\n      const education = patient.education;\r\n      const maritalStatus = patient.maritalStatus;\r\n      setPatientFacilityId(patient.facilityId);\r\n      setValue(\"dateOfRegistration\", patient.dateOfRegistration);\r\n      setValue(\"facilityId\", patient.facilityId);\r\n      setValue(\"ninNumber\", patient.ninNumber);\r\n      setValue(\"firstName\", patient.firstName);\r\n      setValue(\"middleName\", patient.otherName);\r\n      setValue(\"lastName\", patient.surname);\r\n      setValue(\"hospitalNumber\", hospitalNumber ? hospitalNumber.value : \"\");\r\n      setValue(\"maritalStatus\", maritalStatus ? maritalStatus.id : \"\");\r\n      setValue(\"employmentStatus\", employmentStatus ? employmentStatus.id : \"\");\r\n\r\n      //setValue('gender', gender.id);\r\n      setValue(\"sex\", sex);\r\n      setValue(\"highestQualification\", education ? education.id : \"\");\r\n      setValue(\"dob\", format(new Date(patient.dateOfBirth), \"yyyy-MM-dd\"));\r\n      setValue(\"age\", calculate_age(patient.dateOfBirth));\r\n      if (country) {\r\n        setValue(\"countryId\", country.countryId);\r\n        const stateOptions = country.countryId\r\n          ? await loadOrganisationUnitsByParentId(country.countryId)\r\n          : \"\";\r\n        setStateUnitOptions(stateOptions);\r\n        setValue(\"stateId\", country.stateId);\r\n        const districtOptions = country.stateId\r\n          ? await loadOrganisationUnitsByParentId(country.stateId)\r\n          : \"\";\r\n        setDistrictUnitOptions(districtOptions);\r\n        setValue(\"district\", country.district);\r\n        setValue(\"address\", country.city);\r\n        setValue(\"landmark\", country.line[0]);\r\n      }\r\n      setValue(\"pnumber\", phone ? phone.value : \"+234\");\r\n      setValue(\"email\", email ? email.value : null);\r\n      setValue(\"altPhonenumber\", altphone ? altphone.value : \"+234\");\r\n    }\r\n  }, []);\r\n  const handleAddRelative = () => {\r\n    setShowRelative(true);\r\n  };\r\n  const checkHospitalNumber = async (e) => {\r\n    setCheckHospitalNumberError(false);\r\n    await axios\r\n      .post(`${baseUrl}patient/exist/hospital-number`, e, {\r\n        responseType: \"text\",\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          \"Content-Type\": \"text/plain\",\r\n        },\r\n      })\r\n      .then((response) => {\r\n        if (response.data) {\r\n          setCheckHospitalNumberError(true);\r\n        } else {\r\n          setCheckHospitalNumberError(false);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n  const checkNIN = async (e) => {\r\n    setCheckNINError(false);\r\n    if (e.target.value.length > 0) {\r\n      await axios\r\n        .post(\r\n          `${baseUrl}patient/exist/nin-number/${e.target.value}`,\r\n          e.target.value,\r\n          {\r\n            responseType: \"text\",\r\n            headers: {\r\n              Authorization: `Bearer ${token}`,\r\n              \"Content-Type\": \"text/plain\",\r\n            },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          if (response.data) {\r\n            setCheckNINError(true);\r\n          } else {\r\n            setCheckNINError(false);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  };\r\n  const handleSaveRelationship = (e) => {\r\n    const relationshipType = getValues(\"relationshipType\");\r\n    const cfirstName = getValues(\"cfirstName\");\r\n    const cmiddleName = getValues(\"cmiddleName\");\r\n    const clastName = getValues(\"clastName\");\r\n    const contactPhoneNumber = getValues(\"contactPhoneNumber\");\r\n    const contactEmail = getValues(\"contactEmail\");\r\n    const contactAddress = getValues(\"contactAddress\");\r\n    if (!relationshipType) {\r\n      setError(\r\n        \"relationshipType\",\r\n        { type: \"custom\", message: \"Relationship is required\" },\r\n        { shouldFocus: true }\r\n      );\r\n      return;\r\n    }\r\n    if (!cfirstName) {\r\n      setError(\r\n        \"cfirstName\",\r\n        { type: \"custom\", message: \"FirstName is required\" },\r\n        { shouldFocus: true }\r\n      );\r\n      return;\r\n    }\r\n    //        if (!clastName) {\r\n    //            setError(\"clastName\", {  type: 'custom', message: 'LastName is required' }, { shouldFocus: true });\r\n    //            return;\r\n    //        }\r\n\r\n    if (!contactAddress) {\r\n      setError(\r\n        \"contactAddress\",\r\n        { type: \"custom\", message: \"Address is required\" },\r\n        { shouldFocus: true }\r\n      );\r\n      return;\r\n    }\r\n\r\n    const contact = {\r\n      address: {\r\n        line: [contactAddress],\r\n      },\r\n      contactPoint: {\r\n        type: \"phone\",\r\n        value: contactPhoneNumber,\r\n      },\r\n      firstName: cfirstName,\r\n      fullName: cfirstName + \" \" + cmiddleName + \" \" + clastName,\r\n      relationshipId: relationshipType,\r\n      surname: clastName,\r\n      otherName: cmiddleName,\r\n    };\r\n\r\n    if (editRelative != null) {\r\n      contacts.splice(editRelative, 1);\r\n      setContacts(contacts.concat(contact));\r\n    } else {\r\n      if (contacts === undefined) {\r\n        setContacts([].concat(contact));\r\n      } else {\r\n        setContacts(contacts.concat(contact));\r\n      }\r\n    }\r\n    setShowRelative(false);\r\n  };\r\n  const handleCancelSaveRelationship = () => {\r\n    setShowRelative(false);\r\n  };\r\n  const handleEmailValidation = (email) => {\r\n    console.log(\"ValidateEmail was called with\", email);\r\n\r\n    const isValid = isValidEmail(email);\r\n    if (!isValid) {\r\n      errors.email.message = \"Please enter a valid email\";\r\n    }\r\n    const validityChanged =\r\n      (errors.email && isValid) || (!errors.email && !isValid);\r\n    if (validityChanged) {\r\n      console.log(\"Fire tracker with\", isValid ? \"Valid\" : \"Invalid\");\r\n    }\r\n\r\n    return isValid;\r\n  };\r\n  const onSubmit = async (data) => {\r\n    //console.log(new Date(data.dob));\r\n\r\n    if (\r\n      _.find(errors, function (error) {\r\n        return console.log(\"err\", error);\r\n      })\r\n    ) {\r\n      toast.error(\"Failed to save form kindly check the form for errors\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n    } else {\r\n      try {\r\n        const patientForm = {\r\n          active: true,\r\n          address: [\r\n            {\r\n              city: data.address,\r\n              countryId: data.countryId,\r\n              district: data.district,\r\n              line: [data.landmark],\r\n              organisationUnitId: 0,\r\n              postalCode: \"\",\r\n              stateId: data.stateId,\r\n            },\r\n          ],\r\n          contact: contacts,\r\n          contactPoint: [],\r\n          dateOfBirth: new Date(data.dob),\r\n          deceased: false,\r\n          deceasedDateTime: null,\r\n          firstName: data.firstName,\r\n          sexId: data.sex,\r\n          /*genderId:data.sex,*/\r\n          identifier: [\r\n            {\r\n              assignerId: 1,\r\n              type: \"HospitalNumber\",\r\n              value: data.hospitalNumber,\r\n            },\r\n          ],\r\n          ninNumber: data.ninNumber,\r\n          otherName: data.middleName,\r\n          maritalStatusId: data.maritalStatus,\r\n          surname: data.lastName,\r\n          educationId: data.highestQualification,\r\n          employmentStatusId:\r\n            data.employmentStatus != null ? data.employmentStatus : null,\r\n          dateOfRegistration: data.dateOfRegistration,\r\n          isDateOfBirthEstimated: data.dateOfBirth == \"Actual\" ? false : true,\r\n        };\r\n        //console.log(data.pnumber);\r\n\r\n        if (data.pnumber) {\r\n          const phone = {\r\n            type: \"phone\",\r\n            value: data.pnumber,\r\n          };\r\n          patientForm.contactPoint.push(phone);\r\n        }\r\n\r\n        if (data.email) {\r\n          const email = {\r\n            type: \"email\",\r\n            value: data.email,\r\n          };\r\n          patientForm.contactPoint.push(email);\r\n        }\r\n        if (data.altPhonenumber) {\r\n          const altPhonenumber = {\r\n            type: \"altphone\",\r\n            value: data.altPhonenumber,\r\n          };\r\n          patientForm.contactPoint.push(altPhonenumber);\r\n        }\r\n\r\n        if (patientId) {\r\n          patientForm.id = null;\r\n          patientForm.facilityId = patientFacilityId;\r\n          const response = await axios.put(\r\n            `${baseUrl}patient/${patientId}`,\r\n            patientForm,\r\n            { headers: { Authorization: `Bearer ${token}` } }\r\n          );\r\n        } else {\r\n          const response = await axios.post(`${baseUrl}patient`, patientForm, {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n          });\r\n        }\r\n        toast.success(\"Patient Register successful\");\r\n        history.push(\"/\");\r\n      } catch (e) {\r\n        console.log(e);\r\n        toast.error(\"An error occured while registering a patient !\", {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n        });\r\n      }\r\n    }\r\n  };\r\n  const onError = (errors) => {\r\n    console.error(errors);\r\n  };\r\n  const handleEditRelative = (relative, index) => {\r\n    setValue(\"relationshipType\", relative.relationshipId);\r\n    setValue(\"cfirstName\", relative.firstName);\r\n    setValue(\"cmiddleName\", relative.otherName);\r\n    setValue(\"clastName\", relative.surname);\r\n    setValue(\r\n      \"contactPhoneNumber\",\r\n      relative.contactPoint\r\n        ? phoneNumberFormatCheck(relative.contactPoint).value\r\n        : \"\"\r\n    );\r\n    setValue(\r\n      \"contactAddress\",\r\n      relative.address &&\r\n        relative.address.line &&\r\n        relative.address.line.length > 0\r\n        ? relative.address.line[0]\r\n        : \"\"\r\n    );\r\n    setShowRelative(true);\r\n    setEditRelative(index);\r\n  };\r\n  const handleDeleteRelative = (index) => {\r\n    setTimeout(() => {\r\n      contacts.splice(index, 1);\r\n      setContacts(contacts);\r\n      setShowRelative(true);\r\n      setShowRelative(false);\r\n    }, 500);\r\n  };\r\n\r\n  const loadSexes = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${baseUrl}application-codesets/v2/SEX`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      await setSexOptions(response.data);\r\n    } catch (e) {\r\n      toast.error(\"An error occured while fetching sex codesets !\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n    }\r\n  }, []);\r\n  const loadMaritalStatus = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${baseUrl}application-codesets/v2/MARITAL_STATUS`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      setMaritalStatusOptions(response.data);\r\n    } catch (e) {\r\n      toast.error(\"An error occured while fetching marital codesets !\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n    }\r\n  }, []);\r\n  const loadEducation = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${baseUrl}application-codesets/v2/EDUCATION`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      setEducationOptions(response.data);\r\n    } catch (e) {\r\n      toast.error(\"An error occured while fetching education codesets !\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n    }\r\n  }, []);\r\n  const loadOccupation = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${baseUrl}application-codesets/v2/OCCUPATION`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      setOccupationOptions(response.data);\r\n    } catch (e) {\r\n      toast.error(\"An error occured while fetching occupation codesets !\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n    }\r\n  }, []);\r\n  const loadRelationships = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${baseUrl}application-codesets/v2/RELATIONSHIP`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      setRelationshipOptions(response.data);\r\n    } catch (e) {\r\n      toast.error(\"An error occured while fetching relationship codesets !\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n    }\r\n  }, []);\r\n  const loadTopLevelCountry = useCallback(async () => {\r\n    const response = await axios.get(\r\n      `${baseUrl}organisation-units/parent-organisation-units/0`,\r\n      { headers: { Authorization: `Bearer ${token}` } }\r\n    );\r\n    settopLevelUnitCountryOptions(response.data);\r\n  }, []);\r\n  const loadOrganisationUnitsByParentId = async (parentId) => {\r\n    const response = await axios.get(\r\n      `${baseUrl}organisation-units/parent-organisation-units/${parentId}`,\r\n      { headers: { Authorization: `Bearer ${token}` } }\r\n    );\r\n    return response.data;\r\n  };\r\n  const onCountryChange = async (e) => {\r\n    if (e.target.value) {\r\n      const stateOptions = await loadOrganisationUnitsByParentId(1);\r\n      setStateUnitOptions(stateOptions);\r\n    } else {\r\n      setStateUnitOptions([]);\r\n    }\r\n  };\r\n  const statesList = async () => {\r\n    const stateOptions = await loadOrganisationUnitsByParentId(1);\r\n    setStateUnitOptions(stateOptions);\r\n  };\r\n  const onStateChange = async (e) => {\r\n    if (e.target.value) {\r\n      const districtOptions = await loadOrganisationUnitsByParentId(\r\n        e.target.value\r\n      );\r\n      setDistrictUnitOptions(districtOptions);\r\n    } else {\r\n      setDistrictUnitOptions([]);\r\n    }\r\n  };\r\n\r\n  const handleDobChange = (e) => {\r\n    if (e.target.value) {\r\n      const today = new Date();\r\n      const birthDate = new Date(e.target.value);\r\n      let age_now = today.getFullYear() - birthDate.getFullYear();\r\n      // const m = today.getMonth() - birthDate.getMonth();\r\n      // if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n      //   age_now--;\r\n      // }\r\n      setValue(\"age\", age_now);\r\n    } else {\r\n      setValue(\"age\", null);\r\n    }\r\n  };\r\n\r\n  const handleDateOfBirthChange = (e) => {\r\n    if (e.target.value == \"Actual\") {\r\n      setAgeDisabled(true);\r\n    } else if (e.target.value == \"Estimated\") {\r\n      setAgeDisabled(false);\r\n    }\r\n  };\r\n\r\n  const handleAgeChange = (e) => {\r\n    console.log(e.target.value);\r\n    if (!ageDisabled && e.target.value) {\r\n      setValue(\"age\", e.target.value);\r\n      const currentDate = new Date();\r\n      currentDate.setDate(15);\r\n      currentDate.setMonth(5);\r\n      const estDob = moment(currentDate.toISOString());\r\n      const dob = estDob.add(e.target.value * -1, \"years\");\r\n      setValue(\"dob\", format(new Date(dob.toDate()), \"yyyy-MM-dd\"));\r\n      if (calculate_age(format(new Date(dob.toDate()), \"yyyy-MM-dd\")) >= 60) {\r\n        toggle();\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    statesList();\r\n    loadSexes();\r\n    loadMaritalStatus();\r\n    loadEducation();\r\n    loadOccupation();\r\n    loadRelationships();\r\n    loadTopLevelCountry();\r\n    getPatient();\r\n  }, [\r\n    loadSexes,\r\n    loadMaritalStatus,\r\n    loadEducation,\r\n    loadOccupation,\r\n    loadRelationships,\r\n    loadTopLevelCountry,\r\n    getPatient,\r\n  ]);\r\n\r\n  let genderRows = null;\r\n  let sexRows = null;\r\n  let maritalStatusRows = null;\r\n  let educationRows = null;\r\n  let occupationRows = null;\r\n  let relationshipRows = null;\r\n  let topLevelUnitCountryRows = null;\r\n  let stateRows = null;\r\n  let districtRows = null;\r\n  if (sexOptions && sexOptions.length > 0) {\r\n    sexRows = sexOptions.map((sex, index) => (\r\n      <option key={sex.id} value={sex.id}>\r\n        {sex.display}\r\n      </option>\r\n    ));\r\n  }\r\n  if (maritalStatusOptions && maritalStatusOptions.length > 0) {\r\n    maritalStatusRows = maritalStatusOptions.map(\r\n      (maritalStatusOption, index) => (\r\n        <option key={maritalStatusOption.id} value={maritalStatusOption.id}>\r\n          {maritalStatusOption.display}\r\n        </option>\r\n      )\r\n    );\r\n  }\r\n  if (educationOptions && educationOptions.length > 0) {\r\n    educationRows = educationOptions.map((educationOption, index) => (\r\n      <option key={educationOption.id} value={educationOption.id}>\r\n        {educationOption.display}\r\n      </option>\r\n    ));\r\n  }\r\n  if (occupationOptions && occupationOptions.length > 0) {\r\n    occupationRows = occupationOptions.map((occupationOption, index) => (\r\n      <option key={occupationOption.id} value={occupationOption.id}>\r\n        {occupationOption.display}\r\n      </option>\r\n    ));\r\n  }\r\n  if (relationshipOptions && relationshipOptions.length > 0) {\r\n    relationshipRows = relationshipOptions.map((relationshipOption, index) => (\r\n      <option key={relationshipOption.id} value={relationshipOption.id}>\r\n        {relationshipOption.display}\r\n      </option>\r\n    ));\r\n  }\r\n  if (topLevelUnitCountryOptions && topLevelUnitCountryOptions.length > 0) {\r\n    topLevelUnitCountryRows = topLevelUnitCountryOptions.map(\r\n      (topLevelUnitCountryOption, index) => (\r\n        <option\r\n          key={topLevelUnitCountryOption.id}\r\n          value={topLevelUnitCountryOption.id}\r\n        >\r\n          {topLevelUnitCountryOption.name}\r\n        </option>\r\n      )\r\n    );\r\n  }\r\n  if (stateUnitOptions && stateUnitOptions.length > 0) {\r\n    stateRows = stateUnitOptions.map((stateUnitOption, index) => (\r\n      <option key={stateUnitOption.id} value={stateUnitOption.id}>\r\n        {stateUnitOption.name}\r\n      </option>\r\n    ));\r\n  }\r\n  if (districtUnitOptions && districtUnitOptions.length > 0) {\r\n    districtRows = districtUnitOptions.map((districtUnitOption, index) => (\r\n      <option key={districtUnitOption.id} value={districtUnitOption.id}>\r\n        {districtUnitOption.name}\r\n      </option>\r\n    ));\r\n  }\r\n\r\n  const handleCancel = () => {\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const checkPhoneNumber = (e, inputName) => {\r\n    setValue(inputName, e);\r\n  };\r\n\r\n  const alphabetOnly = (e, inputName) => {\r\n    const result = e.target.value.replace(/[^a-z]/gi, \"\");\r\n    setValue(inputName, result);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ToastContainer autoClose={3000} hideProgressBar />\r\n      <Card className={classes.root}>\r\n        <CardContent>\r\n          <div className=\"row mb-12 col-md-12\" style={{ paddingBottom: \"5px\" }}>\r\n            <div className=\"mb-6 col-md-6\">\r\n              <Breadcrumbs aria-label=\"breadcrumb\">\r\n                <Typography style={{ color: \"#992E62\" }}>Patient</Typography>\r\n                <Typography style={{ color: \"#014d88\" }}>\r\n                  Registration\r\n                </Typography>\r\n              </Breadcrumbs>\r\n            </div>\r\n            <div className=\"mb-6 col-md-6\">\r\n              <Link\r\n                to={{\r\n                  pathname: \"/\",\r\n                  state: \"users\",\r\n                }}\r\n              >\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className=\" float-right ms-1\"\r\n                  style={{ backgroundColor: \"#014d88\", fontWeight: \"bolder\" }}\r\n                  startIcon={<TiArrowBack />}\r\n                >\r\n                  <span style={{ textTransform: \"capitalize\" }}>Back </span>\r\n                </Button>\r\n              </Link>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-xl-12 col-lg-12\">\r\n            <Form onSubmit={handleSubmit(onSubmit, onError)}>\r\n              <div className=\"card\">\r\n                <div\r\n                  className=\"card-header\"\r\n                  style={{\r\n                    backgroundColor: \"#014d88\",\r\n                    color: \"#fff\",\r\n                    fontWeight: \"bolder\",\r\n                  }}\r\n                >\r\n                  <h5\r\n                    className=\"card-title\"\r\n                    style={{ color: \"#fff\", fontWeight: \"bolder\" }}\r\n                  >\r\n                    {userDetail === null\r\n                      ? \"Basic Information\"\r\n                      : \"Edit User Information\"}\r\n                  </h5>\r\n                </div>\r\n\r\n                <div className=\"card-body\">\r\n                  <div className=\"basic-form\">\r\n                    <div className=\"row\">\r\n                      <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                          <Label for=\"dateOfRegistration\">\r\n                            Date of Registration\r\n                            <span style={{ color: \"red\" }}> *</span>\r\n                          </Label>\r\n                          <input\r\n                            className=\"form-control\"\r\n                            type=\"date\"\r\n                            name=\"dateOfRegistration\"\r\n                            id=\"dateOfRegistration\"\r\n                            max={today}\r\n                            {...register(\"dateOfRegistration\")}\r\n                            onChange={(e) => {\r\n                              if (\r\n                                new Date(e.target.value) instanceof Date &&\r\n                                e.target.value != \"\"\r\n                              ) {\r\n                                setMaxDOB(\r\n                                  new Date(e.target.value)\r\n                                    .toISOString()\r\n                                    .substr(0, 10)\r\n                                    .replace(\"T\", \" \")\r\n                                );\r\n                              } else {\r\n                                setMaxDOB(\r\n                                  new Date()\r\n                                    .toISOString()\r\n                                    .substr(0, 10)\r\n                                    .replace(\"T\", \" \")\r\n                                );\r\n                              }\r\n                            }}\r\n                            style={{ border: \"1px solid #014d88\" }}\r\n                          />\r\n                          {errors.dateOfRegistration && (\r\n                            <p>Enter the registration date</p>\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n\r\n                      <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                          <Label for=\"patientId\">\r\n                            Hospital Number\r\n                            <span style={{ color: \"red\" }}> *</span>\r\n                          </Label>\r\n                          <input\r\n                            className=\"form-control\"\r\n                            type=\"text\"\r\n                            name=\"hospitalNumber\"\r\n                            id=\"hospitalNumber\"\r\n                            autoComplete=\"off\"\r\n                            onInput={(e) => {\r\n                              e.target.value = e.target.value.replace(\r\n                                /\\s/g,\r\n                                \"\"\r\n                              );\r\n                              console.log(e.target.value);\r\n                              checkHospitalNumber(e.target.value);\r\n                            }}\r\n                            onChange={checkHospitalNumber}\r\n                            {...register(\"hospitalNumber\", {\r\n                              onChange: (e) => {\r\n                                checkHospitalNumber(\r\n                                  e.target.value.replace(/\\s/g, \"\")\r\n                                );\r\n                              },\r\n                            })}\r\n                            style={{ border: \"1px solid #014d88\" }}\r\n                          />\r\n                          {checkHospitalNumberError && (\r\n                            <p>Hospital number has been registered before</p>\r\n                          )}\r\n                          {!checkHospitalNumberError &&\r\n                            errors.hospitalNumber && (\r\n                              <p>Enter the hospital number</p>\r\n                            )}\r\n                        </FormGroup>\r\n                      </div>\r\n                      <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                          <Label for=\"ninNumber\">\r\n                            National Identification Number (NIN)\r\n                          </Label>\r\n                          <input\r\n                            className=\"form-control\"\r\n                            name=\"ninNumber\"\r\n                            type=\"number\"\r\n                            {...register(\"ninNumber\")}\r\n                            id=\"ninNumber\"\r\n                            autoComplete=\"off\"\r\n                            onChange={(e) => {\r\n                              console.log(\"here\");\r\n                              clearErrors(\"ninNumber\");\r\n                              e.target.value = e.target.value.replace(\r\n                                /\\D/g,\r\n                                \"\"\r\n                              );\r\n                              checkNIN(e);\r\n                              if (e.target.value.length > e.target.maxLength) {\r\n                                e.target.value = e.target.value.slice(\r\n                                  0,\r\n                                  e.target.maxLength\r\n                                );\r\n                                clearErrors(\"ninNumber\");\r\n                              } else if (\r\n                                e.target.value.length > 0 &&\r\n                                e.target.value.length < e.target.maxLength\r\n                              ) {\r\n                                setError(\"ninNumber\");\r\n                              } else if (\r\n                                e.target.value.length <= 0 ||\r\n                                e.target.value.length == e.target.maxLength\r\n                              ) {\r\n                                clearErrors(\"ninNumber\");\r\n                              }\r\n                            }}\r\n                            minLength={11}\r\n                            maxLength={11}\r\n                            style={{ border: \"1px solid #014d88\" }}\r\n                          />\r\n                          {checkNINError && (\r\n                            <p>NIN has been registered before</p>\r\n                          )}\r\n                          {!checkNINError && errors.ninNumber && (\r\n                            <p>Enter a valid NIN Number</p>\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n                      {/*                                            <div className=\"form-group mb-3 col-md-3\">\r\n                                                <FormGroup>\r\n                                                    <Label for=\"emrId\">EMR ID *</Label>\r\n                                                    <input\r\n                                                        className=\"form-control\"\r\n                                                        disabled={true}\r\n                                                        type=\"text\"\r\n                                                        name=\"emrId\"\r\n                                                        id=\"emrId\"\r\n                                                        style={{border: \"1px solid #014d88\"}}\r\n                                                    />\r\n                                                </FormGroup>\r\n                                            </div>*/}\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                      <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                          <Label for=\"firstName\">\r\n                            First Names <span style={{ color: \"red\" }}> *</span>\r\n                          </Label>\r\n                          <input\r\n                            className=\"form-control\"\r\n                            type=\"text\"\r\n                            name=\"firstName\"\r\n                            id=\"firstName\"\r\n                            {...register(\"firstName\", {\r\n                              onChange: (e) => {\r\n                                alphabetOnly(e, \"firstName\");\r\n                              },\r\n                            })}\r\n                            style={{ border: \"1px solid #014d88\" }}\r\n                          />\r\n                          {errors.firstName && <p>First Name is required</p>}\r\n                        </FormGroup>\r\n                      </div>\r\n\r\n                      <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                          <Label>Middle Name</Label>\r\n                          <input\r\n                            className=\"form-control\"\r\n                            type=\"text\"\r\n                            name=\"middleName\"\r\n                            id=\"middleName\"\r\n                            {...register(\"middleName\", {\r\n                              onChange: (e) => {\r\n                                alphabetOnly(e, \"middleName\");\r\n                              },\r\n                            })}\r\n                            style={{ border: \"1px solid #014d88\" }}\r\n                          />\r\n                          {errors.middleName && (\r\n                            <p>{errors.middleName.message}</p>\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n\r\n                      <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                          <Label>\r\n                            Last Name <span style={{ color: \"red\" }}> *</span>\r\n                          </Label>\r\n                          <input\r\n                            className=\"form-control\"\r\n                            type=\"text\"\r\n                            name=\"lastName\"\r\n                            id=\"lastName\"\r\n                            {...register(\"lastName\", {\r\n                              onChange: (e) => {\r\n                                alphabetOnly(e, \"lastName\");\r\n                              },\r\n                            })}\r\n                            style={{ border: \"1px solid #014d88\" }}\r\n                          />\r\n                          {errors.lastName && <p>Last Name is required</p>}\r\n                        </FormGroup>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                      <div className=\"form-group  col-md-4\">\r\n                        <FormGroup>\r\n                          <Label>\r\n                            Sex <span style={{ color: \"red\" }}> *</span>\r\n                          </Label>\r\n                          <select\r\n                            className=\"form-control\"\r\n                            name=\"sex\"\r\n                            id=\"sex\"\r\n                            {...register(\"sex\")}\r\n                            style={{ border: \"1px solid #014d88\" }}\r\n                          >\r\n                            <option value={\"\"}>Select Sex</option>\r\n                            {sexRows}\r\n                          </select>\r\n                          {errors.sex && <p>Select Sex</p>}\r\n                        </FormGroup>\r\n                      </div>\r\n                      <div className=\"form-group mb-3 col-md-2\">\r\n                        <FormGroup>\r\n                          <Label>Date Of Birth</Label>\r\n                          <div className=\"radio\">\r\n                            <label>\r\n                              <input\r\n                                type=\"radio\"\r\n                                value=\"Actual\"\r\n                                name=\"dateOfBirth\"\r\n                                defaultChecked\r\n                                {...register(\"dateOfBirth\")}\r\n                                onChange={(e) => handleDateOfBirthChange(e)}\r\n                                style={{ border: \"1px solid #014d88\" }}\r\n                              />{\" \"}\r\n                              Actual\r\n                            </label>\r\n                          </div>\r\n                          <div className=\"radio\">\r\n                            <label>\r\n                              <input\r\n                                type=\"radio\"\r\n                                value=\"Estimated\"\r\n                                name=\"dateOfBirth\"\r\n                                {...register(\"dateOfBirth\")}\r\n                                onChange={(e) => handleDateOfBirthChange(e)}\r\n                                style={{ border: \"1px solid #014d88\" }}\r\n                              />{\" \"}\r\n                              Estimated\r\n                            </label>\r\n                          </div>\r\n                        </FormGroup>\r\n                      </div>\r\n\r\n                      <div className=\"form-group mb-3 col-md-2\">\r\n                        <FormGroup>\r\n                          <Label>Date</Label>\r\n                          <input\r\n                            className=\"form-control\"\r\n                            type=\"date\"\r\n                            name=\"dob\"\r\n                            id=\"dob\"\r\n                            min={minDOB}\r\n                            max={maxDOB}\r\n                            {...register(\"dob\")}\r\n                            onChange={(e) => {\r\n                              clearErrors(\"dob\");\r\n                              if (new Date(e.target.value) instanceof Date) {\r\n                                console.log(\"date\");\r\n                                handleDobChange(e);\r\n                                clearErrors(\"dob\");\r\n                              } else {\r\n                                setError(\"dob\");\r\n                              }\r\n                            }}\r\n                            style={{ border: \"1px solid #014d88\" }}\r\n                          />\r\n                          {errors.dob && (\r\n                            <p>Enter a valid date of birth (dd/mm/yyyy)</p>\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n\r\n                      <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                          <Label>Age</Label>\r\n                          <input\r\n                            className=\"form-control\"\r\n                            type=\"number\"\r\n                            name=\"age\"\r\n                            id=\"age\"\r\n                            {...register(\"age\")}\r\n                            disabled={ageDisabled}\r\n                            onChange={(e) => handleAgeChange(e)}\r\n                            style={{ border: \"1px solid #014d88\" }}\r\n                          />\r\n                        </FormGroup>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className={\"row\"}>\r\n                      {/*                                            {watchShowAge >=0 &&\r\n                                            <>*/}\r\n                      <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                          <Label>\r\n                            Marital Status{\" \"}\r\n                            <span style={{ color: \"red\" }}> *</span>\r\n                          </Label>\r\n                          <select\r\n                            className=\"form-control\"\r\n                            name=\"maritalStatus\"\r\n                            id=\"maritalStatus\"\r\n                            {...register(\"maritalStatus\")}\r\n                            style={{ border: \"1px solid #014d88\" }}\r\n                          >\r\n                            <option value={\"\"}>Select Marital Status</option>\r\n                            {maritalStatusRows}\r\n                          </select>\r\n                          {errors.maritalStatus && <p>Select Marital Status</p>}\r\n                        </FormGroup>\r\n                      </div>\r\n\r\n                      <div className=\"form-group  col-md-4\">\r\n                        <FormGroup>\r\n                          <Label>\r\n                            Employment Status{\" \"}\r\n                            <span style={{ color: \"red\" }}> *</span>\r\n                          </Label>\r\n                          <select\r\n                            className=\"form-control\"\r\n                            name=\"employmentStatus\"\r\n                            id=\"employmentStatus\"\r\n                            {...register(\"employmentStatus\")}\r\n                            style={{ border: \"1px solid #014d88\" }}\r\n                          >\r\n                            <option value={\"\"}>Select Employment Status</option>\r\n                            {occupationRows}\r\n                          </select>\r\n                          {errors.employmentStatus && (\r\n                            <p>Select Employment Status</p>\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n                      {/*\r\n                                            </>\r\n                                            }\r\n*/}\r\n\r\n                      <div className=\"form-group  col-md-4\">\r\n                        <FormGroup>\r\n                          <Label>Education Level</Label>\r\n                          <select\r\n                            className=\"form-control\"\r\n                            name=\"highestQualification\"\r\n                            id=\"highestQualification\"\r\n                            {...register(\"highestQualification\")}\r\n                            style={{ border: \"1px solid #014d88\" }}\r\n                          >\r\n                            <option value={\"\"}>\r\n                              Select the Education Level\r\n                            </option>\r\n                            {educationRows}\r\n                          </select>\r\n                          {errors.highestQualification && (\r\n                            <p>Select the Education Level</p>\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"card\">\r\n                <div\r\n                  className=\"card-header\"\r\n                  style={{\r\n                    backgroundColor: \"#014d88\",\r\n                    color: \"#fff\",\r\n                    fontWeight: \"bolder\",\r\n                  }}\r\n                >\r\n                  <h5 className=\"card-title\">Contact Details</h5>\r\n                </div>\r\n\r\n                <div className=\"card-body\">\r\n                  <div className={\"row\"}>\r\n                    <div className=\"form-group  col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>Phone Number</Label>\r\n                        {/*<input\r\n                                                        className=\"form-control\"\r\n                                                        type=\"text\"\r\n                                                        name=\"pnumber\"\r\n                                                        id=\"pnumber\"\r\n                                                        {...register(\"pnumber\")}\r\n                                                        onChange={(e)=>{checkPhoneNumber(e,'pnumber')}}\r\n                                                        style={{border: \"1px solid #014d88\"}}\r\n                                                    />*/}\r\n                        <PhoneInput\r\n                          containerStyle={{\r\n                            width: \"100%\",\r\n                            border: \"1px solid #014d88\",\r\n                          }}\r\n                          inputStyle={{ width: \"100%\", borderRadius: \"0px\" }}\r\n                          country={\"ng\"}\r\n                          masks={{ ng: \"...-...-....\", at: \"(....) ...-....\" }}\r\n                          placeholder=\"(234)7099999999\"\r\n                          value={getValues(\"pnumber\")}\r\n                          onChange={(e) => {\r\n                            checkPhoneNumber(e, \"pnumber\");\r\n                          }}\r\n                          isValid={(value, country) => {\r\n                            if (value === country.countryCode) {\r\n                              return true;\r\n                            } else {\r\n                              if (value.length < 13) {\r\n                                errors.pnumber = true;\r\n                                return false;\r\n                              } else {\r\n                                errors.pnumber = false;\r\n                                return true;\r\n                              }\r\n                            }\r\n                          }}\r\n                        />\r\n\r\n                        {/*                                                <input\r\n                                                    className=\"form-control\"\r\n                                                    type=\"tel\"\r\n                                                    name=\"pnumber\"\r\n                                                    id=\"pnumber\"\r\n                                                    {...register(\"pnumber\",{\r\n                                                        onChange:(e)=>{checkPhoneNumber(e,'pnumber')}\r\n                                                    })}\r\n                                                    placeholder=\"(234)7099999999\"\r\n                                                    style={{border: \"1px solid #014d88\"}}\r\n                                                />*/}\r\n                        {/* {errors.pnumber && <p>Phone number is required</p>} */}\r\n                      </FormGroup>\r\n                    </div>\r\n\r\n                    <div className=\"form-group col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>Alt. Phone Number</Label>\r\n                        {/* <input\r\n                                                        className=\"form-control\"\r\n                                                        type=\"text\"\r\n                                                        name=\"altPhonenumber\"\r\n                                                        id=\"altPhonenumber\"\r\n                                                        {...register(\"altPhonenumber\")}\r\n                                                        onChange={(e)=>{checkPhoneNumber(e,'altPhonenumber')}}\r\n                                                        style={{border: \"1px solid #014d88\"}}\r\n                                                    />*/}\r\n                        <PhoneInput\r\n                          containerStyle={{\r\n                            width: \"100%\",\r\n                            border: \"1px solid #014d88\",\r\n                          }}\r\n                          inputStyle={{ width: \"100%\", borderRadius: \"0px\" }}\r\n                          country={\"ng\"}\r\n                          masks={{ ng: \"...-...-....\", at: \"(....) ...-....\" }}\r\n                          placeholder=\"(234)7099999999\"\r\n                          value={getValues(\"altPhonenumber\")}\r\n                          onChange={(e) => {\r\n                            checkPhoneNumber(e, \"altPhonenumber\");\r\n                          }}\r\n                          isValid={(value, country) => {\r\n                            if (value === country.countryCode) {\r\n                              return true;\r\n                            } else {\r\n                              if (value.length < 13) {\r\n                                errors.altPhonenumber = true;\r\n                                return \"Enter a valid phone number\";\r\n                              } else {\r\n                                errors.altPhonenumber = false;\r\n                                return true;\r\n                              }\r\n                            }\r\n                          }}\r\n                        />\r\n                        {/*                                                <input\r\n                                                    className=\"form-control\"\r\n                                                    type=\"tel\"\r\n                                                    name=\"altPhoneNumber\"\r\n                                                    id=\"altPhoneNumber\"\r\n                                                    {...register(\"altPhonenumber\",{\r\n                                                        onChange:(e)=>{checkPhoneNumber(e,'altPhonenumber')}\r\n                                                    })}\r\n                                                    placeholder=\"(234)7099999999\"\r\n                                                    style={{border: \"1px solid #014d88\"}}\r\n                                                />*/}\r\n                        {errors.altPhonenumber && (\r\n                          <p>{errors.altPhonenumber.message}</p>\r\n                        )}\r\n                      </FormGroup>\r\n                    </div>\r\n\r\n                    <div className=\"form-group col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>Email</Label>\r\n                        <input\r\n                          className=\"form-control\"\r\n                          type=\"email\"\r\n                          name=\"email\"\r\n                          id=\"email\"\r\n                          {...register(\"email\", {\r\n                            required: true,\r\n                            validate: handleEmailValidation,\r\n                          })}\r\n                          style={{ border: \"1px solid #014d88\" }}\r\n                          /*ref={register()}*/\r\n                        />\r\n                        {errors.email && <p>{errors.email.message}</p>}\r\n                      </FormGroup>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"row\">\r\n                    <div className=\"form-group  col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>\r\n                          Country <span style={{ color: \"red\" }}> *</span>\r\n                        </Label>\r\n                        <select\r\n                          className=\"form-control\"\r\n                          type=\"text\"\r\n                          name=\"country\"\r\n                          id=\"country\"\r\n                          style={{ border: \"1px solid #014d88\" }}\r\n                          {...register(\"countryId\")}\r\n                          onChange={(e) => onCountryChange(e)}\r\n                        >\r\n                          {/*<option value={\"\"}>Select Country</option>*/}\r\n                          {topLevelUnitCountryRows}\r\n                        </select>\r\n                        {/*errors.countryId && <p>Select Country</p>*/}\r\n                      </FormGroup>\r\n                    </div>\r\n\r\n                    <div className=\"form-group  col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>\r\n                          State <span style={{ color: \"red\" }}> *</span>\r\n                        </Label>\r\n                        <select\r\n                          className=\"form-control\"\r\n                          type=\"text\"\r\n                          name=\"stateId\"\r\n                          id=\"stateId\"\r\n                          style={{ border: \"1px solid #014d88\" }}\r\n                          {...register(\"stateId\")}\r\n                          onChange={(e) => onStateChange(e)}\r\n                        >\r\n                          <option value={\"\"}>Select State</option>\r\n                          {stateRows}\r\n                        </select>\r\n                        {errors.stateId && <p>Select State</p>}\r\n                      </FormGroup>\r\n                    </div>\r\n\r\n                    <div className=\"form-group  col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>\r\n                          Province/District/LGA{\" \"}\r\n                          <span style={{ color: \"red\" }}> *</span>\r\n                        </Label>\r\n                        <select\r\n                          className=\"form-control\"\r\n                          type=\"text\"\r\n                          name=\"district\"\r\n                          id=\"district\"\r\n                          style={{ border: \"1px solid #014d88\" }}\r\n                          {...register(\"district\")}\r\n                        >\r\n                          <option value={\"\"}>\r\n                            Select Province/District/LGA\r\n                          </option>\r\n                          {districtRows}\r\n                        </select>\r\n                        {errors.district && <p>Select Province/District/LGA</p>}\r\n                      </FormGroup>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className={\"row\"}>\r\n                    <div className=\"form-group  col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>Street Address</Label>\r\n                        <input\r\n                          className=\"form-control\"\r\n                          type=\"text\"\r\n                          name=\"address\"\r\n                          id=\"address\"\r\n                          style={{ border: \"1px solid #014d88\" }}\r\n                          {...register(\"address\")}\r\n                        />\r\n                        {errors.address && <p>{errors.address.message}</p>}\r\n                      </FormGroup>\r\n                    </div>\r\n\r\n                    <div className=\"form-group  col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>Landmark</Label>\r\n                        <input\r\n                          className=\"form-control\"\r\n                          type=\"text\"\r\n                          name=\"landmark\"\r\n                          id=\"landmark\"\r\n                          style={{ border: \"1px solid #014d88\" }}\r\n                          {...register(\"landmark\")}\r\n                        />\r\n                        {errors.landmark && <p>{errors.landmark.message}</p>}\r\n                      </FormGroup>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"card\">\r\n                <div\r\n                  className=\"card-header\"\r\n                  style={{\r\n                    backgroundColor: \"#014d88\",\r\n                    color: \"#fff\",\r\n                    fontWeight: \"bolder\",\r\n                  }}\r\n                >\r\n                  <h5 className=\"card-title\">Relationship / Next Of Kin</h5>\r\n                </div>\r\n                <div className=\"card-body\">\r\n                  <div className=\"row\">\r\n                    {contacts && contacts.length > 0 && (\r\n                      <div className=\"col-xl-12 col-lg-12\">\r\n                        <table style={{ width: \"100%\" }}>\r\n                          <thead>\r\n                            <tr>\r\n                              <th>Relationship Type</th>\r\n                              <th>Name</th>\r\n                              <th>Phone</th>\r\n                              <th>Address</th>\r\n                              <th>Actions</th>\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody>\r\n                            {contacts.map((item, index) => {\r\n                              return (\r\n                                <tr key={item.index}>\r\n                                  <td>\r\n                                    {getRelationship(item.relationshipId)}\r\n                                  </td>\r\n                                  <td>{getNames(item)}</td>\r\n                                  <td>\r\n                                    {getPhoneContactPoint(item.contactPoint)}\r\n                                  </td>\r\n                                  <td>{getAddress(item.address)}</td>\r\n                                  <td>\r\n                                    <button\r\n                                      type=\"button\"\r\n                                      className=\"btn btn-default btn-light btn-sm editRow\"\r\n                                      onClick={(e) =>\r\n                                        handleEditRelative(item, index)\r\n                                      }\r\n                                    >\r\n                                      <FontAwesomeIcon icon=\"edit\" />\r\n                                    </button>\r\n                                    &nbsp;&nbsp;\r\n                                    <button\r\n                                      type=\"button\"\r\n                                      className=\"btn btn-danger btn-sm removeRow\"\r\n                                      onClick={(e) =>\r\n                                        handleDeleteRelative(index)\r\n                                      }\r\n                                    >\r\n                                      <FontAwesomeIcon icon=\"trash\" />\r\n                                    </button>\r\n                                  </td>\r\n                                </tr>\r\n                              );\r\n                            })}\r\n                          </tbody>\r\n                        </table>\r\n                      </div>\r\n                    )}\r\n                    <div className=\"col-xl-12 col-lg-12\">\r\n                      {showRelative && (\r\n                        <div className=\"card\">\r\n                          <div className=\"card-body\">\r\n                            <div className=\"row\">\r\n                              <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                  <Label for=\"relationshipType\">\r\n                                    Relationship Type{\" \"}\r\n                                    <span style={{ color: \"red\" }}> *</span>\r\n                                  </Label>\r\n                                  <select\r\n                                    className=\"form-control\"\r\n                                    name=\"relationshipType\"\r\n                                    id=\"relationshipType\"\r\n                                    style={{ border: \"1px solid #014d88\" }}\r\n                                    {...register(\"relationshipType\")}\r\n                                  >\r\n                                    <option value={\"\"}></option>\r\n                                    {relationshipRows}\r\n                                  </select>\r\n                                  {errors.relationshipType && (\r\n                                    <p>{errors.relationshipType.message}</p>\r\n                                  )}\r\n                                </FormGroup>\r\n                              </div>\r\n\r\n                              <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                  <Label for=\"cfirstName\">\r\n                                    First Name{\" \"}\r\n                                    <span style={{ color: \"red\" }}> *</span>\r\n                                  </Label>\r\n                                  <input\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    name=\"cfirstName\"\r\n                                    id=\"cfirstName\"\r\n                                    style={{ border: \"1px solid #014d88\" }}\r\n                                    {...register(\"cfirstName\", {\r\n                                      onChange: (e) => {\r\n                                        alphabetOnly(e, \"cfirstName\");\r\n                                      },\r\n                                    })}\r\n                                  />\r\n                                  {errors.cfirstName && (\r\n                                    <p>{errors.cfirstName.message}</p>\r\n                                  )}\r\n                                </FormGroup>\r\n                              </div>\r\n\r\n                              <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                  <Label>Middle Name</Label>\r\n                                  <input\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    name=\"cmiddleName\"\r\n                                    id=\"cmiddleName\"\r\n                                    style={{ border: \"1px solid #014d88\" }}\r\n                                    {...register(\"cmiddleName\", {\r\n                                      onChange: (e) => {\r\n                                        alphabetOnly(e, \"cmiddleName\");\r\n                                      },\r\n                                    })}\r\n                                  />\r\n                                  {errors.cmiddleName && (\r\n                                    <p>{errors.cmiddleName.message}</p>\r\n                                  )}\r\n                                </FormGroup>\r\n                              </div>\r\n\r\n                              <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                  <Label>Last Name </Label>\r\n                                  <input\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    name=\"clastName\"\r\n                                    id=\"clastName\"\r\n                                    style={{ border: \"1px solid #014d88\" }}\r\n                                    {...register(\"clastName\", {\r\n                                      onChange: (e) => {\r\n                                        alphabetOnly(e, \"clastName\");\r\n                                      },\r\n                                    })}\r\n                                  />\r\n                                  {/*errors.clastName && <p>{errors.clastName.message}</p>*/}\r\n                                </FormGroup>\r\n                              </div>\r\n                            </div>\r\n\r\n                            <div className=\"row\">\r\n                              <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                  <Label for=\"contactPhoneNumber\">\r\n                                    Phone Number\r\n                                  </Label>\r\n                                  <PhoneInput\r\n                                    containerStyle={{\r\n                                      width: \"100%\",\r\n                                      border: \"1px solid #014d88\",\r\n                                    }}\r\n                                    inputStyle={{\r\n                                      width: \"100%\",\r\n                                      borderRadius: \"0px\",\r\n                                    }}\r\n                                    country={\"ng\"}\r\n                                    onlyCountries={[\"ng\"]}\r\n                                    masks={{\r\n                                      ng: \"...-...-....\",\r\n                                      at: \"(....) ...-....\",\r\n                                    }}\r\n                                    placeholder=\"(234)7099999999\"\r\n                                    value={getValues(\"contactPhoneNumber\")}\r\n                                    onChange={(e) => {\r\n                                      checkPhoneNumber(e, \"contactPhoneNumber\");\r\n                                    }}\r\n                                    isValid={(value, country) => {\r\n                                      if (value === country.countryCode) {\r\n                                        return true;\r\n                                      } else {\r\n                                        if (value.length < 13) {\r\n                                          errors.contactPhoneNumber = true;\r\n                                          return \"Enter a valid phone number\";\r\n                                        } else {\r\n                                          errors.contactPhoneNumber = false;\r\n                                          return true;\r\n                                        }\r\n                                      }\r\n                                    }}\r\n                                  />\r\n                                  {/*                                                                        <input\r\n                                                                            className=\"form-control\"\r\n                                                                            type=\"text\"\r\n                                                                            name=\"contactPhoneNumber\"\r\n                                                                            id=\"contactPhoneNumber\"\r\n                                                                            style={{border: \"1px solid #014d88\"}}\r\n                                                                            {...register(\"contactPhoneNumber\",{\r\n                                                                                onChange:(e)=>{checkPhoneNumber(e,'contactPhoneNumber')}\r\n                                                                            })}\r\n                                                                        />*/}\r\n                                  {errors.contactPhoneNumber && (\r\n                                    <p>{errors.contactPhoneNumber.message}</p>\r\n                                  )}\r\n                                </FormGroup>\r\n                              </div>\r\n\r\n                              <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                  <Label for=\"contactEmail\">Email</Label>\r\n                                  <input\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    name=\"contactEmail\"\r\n                                    id=\"contactEmail\"\r\n                                    style={{ border: \"1px solid #014d88\" }}\r\n                                    {...register(\"contactEmail\", {\r\n                                      onChange: (e) => {\r\n                                        checkPhoneNumber(e, \"contactEmail\");\r\n                                      },\r\n                                    })}\r\n                                  />\r\n                                  {errors.contactEmail && (\r\n                                    <p>{errors.contactEmail.message}</p>\r\n                                  )}\r\n                                </FormGroup>\r\n                              </div>\r\n\r\n                              <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                  <Label for=\"contactAddress\">\r\n                                    Address{\" \"}\r\n                                    <span style={{ color: \"red\" }}> *</span>\r\n                                  </Label>\r\n                                  <input\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    name=\"contactAddress\"\r\n                                    id=\"contactAddress\"\r\n                                    style={{ border: \"1px solid #014d88\" }}\r\n                                    {...register(\"contactAddress\")}\r\n                                  />\r\n                                  {errors.contactAddress && (\r\n                                    <p>{errors.contactAddress.message}</p>\r\n                                  )}\r\n                                </FormGroup>\r\n                              </div>\r\n                            </div>\r\n\r\n                            <div className=\"row\">\r\n                              <div className=\"\">\r\n                                <MatButton\r\n                                  type=\"button\"\r\n                                  variant=\"contained\"\r\n                                  color=\"primary\"\r\n                                  className={classes.button}\r\n                                  onClick={handleSaveRelationship}\r\n                                  style={{\r\n                                    backgroundColor: \"#014d88\",\r\n                                    color: \"#fff\",\r\n                                  }}\r\n                                >\r\n                                  Add\r\n                                </MatButton>\r\n                                <MatButton\r\n                                  type=\"button\"\r\n                                  variant=\"contained\"\r\n                                  color=\"secondary\"\r\n                                  className={classes.button}\r\n                                  onClick={handleCancelSaveRelationship}\r\n                                  style={{\r\n                                    backgroundColor: \"#992E62\",\r\n                                    color: \"#fff\",\r\n                                  }}\r\n                                >\r\n                                  Cancel\r\n                                </MatButton>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"row\">\r\n                    <MatButton\r\n                      type=\"button\"\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      className={classes.button}\r\n                      startIcon={<AddIcon />}\r\n                      onClick={handleAddRelative}\r\n                      style={{\r\n                        backgroundColor: \"#014d88\",\r\n                        fontWeight: \"bolder\",\r\n                      }}\r\n                    >\r\n                      Add a Relative/Next Of Kin\r\n                    </MatButton>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              {saving ? <Spinner /> : \"\"}\r\n\r\n              <br />\r\n              {!checkHospitalNumberError && (\r\n                <>\r\n                  {userDetail === null ? (\r\n                    <MatButton\r\n                      type=\"submit\"\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      className={classes.button}\r\n                      startIcon={<SaveIcon />}\r\n                      style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n                    >\r\n                      {!saving ? (\r\n                        <span style={{ textTransform: \"capitalize\" }}>\r\n                          Save\r\n                        </span>\r\n                      ) : (\r\n                        <span style={{ textTransform: \"capitalize\" }}>\r\n                          Saving...\r\n                        </span>\r\n                      )}\r\n                    </MatButton>\r\n                  ) : (\r\n                    <MatButton\r\n                      type=\"submit\"\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      className={classes.button}\r\n                      startIcon={<SaveIcon />}\r\n                      style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n                    >\r\n                      {!saving ? (\r\n                        <span style={{ textTransform: \"capitalize\" }}>\r\n                          Save\r\n                        </span>\r\n                      ) : (\r\n                        <span style={{ textTransform: \"capitalize\" }}>\r\n                          Saving...\r\n                        </span>\r\n                      )}\r\n                    </MatButton>\r\n                  )}\r\n                </>\r\n              )}\r\n\r\n              <MatButton\r\n                variant=\"contained\"\r\n                className={classes.button}\r\n                startIcon={<CancelIcon />}\r\n                onClick={handleCancel}\r\n                style={{ backgroundColor: \"#992E62\", color: \"#fff\" }}\r\n              >\r\n                <span style={{ textTransform: \"capitalize\" }}>Cancel</span>\r\n              </MatButton>\r\n            </Form>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n      <Modal\r\n        show={open}\r\n        toggle={toggle}\r\n        className=\"fade\"\r\n        size=\"sm\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        backdrop=\"static\"\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Notification!\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <h4>Are you Sure of the Age entered?</h4>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            onClick={toggle}\r\n            style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n          >\r\n            Yes\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RegisterPatient;\r\n","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\ViewPatient.js",["223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271"],"import React, { useCallback, useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { format } from \"date-fns\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { Form, FormGroup, Label, Spinner } from \"reactstrap\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport {\r\n  faCheckSquare,\r\n  faCoffee,\r\n  faEdit,\r\n  faTrash,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\nimport * as moment from \"moment\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Card, CardContent } from \"@material-ui/core\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\r\nimport { TiArrowBack } from \"react-icons/ti\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { token, url as baseUrl } from \"../../../api\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport _ from \"lodash\";\r\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { FaUserPlus } from \"react-icons/fa\";\r\n\r\nlibrary.add(faCheckSquare, faCoffee, faEdit, faTrash);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {},\r\n  Select: {\r\n    height: 45,\r\n    width: 300,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  root: {\r\n    marginBottom: 20,\r\n    flexGrow: 1,\r\n    \"& .card-title\": {\r\n      color: \"#fff\",\r\n      fontWeight: \"bold\",\r\n    },\r\n    \"& .form-control\": {\r\n      borderRadius: \"0.25rem\",\r\n      height: \"41px\",\r\n    },\r\n    \"& .card-header:first-child\": {\r\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\r\n    },\r\n    \"& .dropdown-toggle::after\": {\r\n      display: \" block !important\",\r\n    },\r\n    \"& select\": {\r\n      \"-webkit-appearance\": \"listbox !important\",\r\n    },\r\n    \"& p\": {\r\n      color: \"red\",\r\n    },\r\n    \"& label\": {\r\n      fontSize: \"14px\",\r\n      color: \"#014d88\",\r\n      fontWeight: \"bold\",\r\n    },\r\n  },\r\n  demo: {\r\n    backgroundColor: theme.palette.background.default,\r\n  },\r\n  inline: {\r\n    display: \"inline\",\r\n  },\r\n}));\r\n\r\nconst schema = yup.object().shape({\r\n  dateOfRegistration: yup.date().required(),\r\n  hospitalNumber: yup.string().required(),\r\n  firstName: yup.string().required(),\r\n  middleName: yup.string().nullable(),\r\n  lastName: yup.string().required(),\r\n  sex: yup.number().required(),\r\n  employmentStatus: yup.number().required(),\r\n  //highestQualification: yup.number().nullable(),\r\n  maritalStatus: yup.number().required(),\r\n  dob: yup.date().required(),\r\n  dateOfBirth: yup.string().required(),\r\n  age: yup.number(),\r\n  ninNumber: yup.string().nullable(),\r\n  pnumber: yup.string().required(),\r\n  altPhonenumber: yup.string().nullable(),\r\n  email: yup.string().nullable(),\r\n  address: yup.string().nullable(),\r\n  landmark: yup.string().nullable(),\r\n  countryId: yup.number().required(),\r\n  stateId: yup.number().required(),\r\n  district: yup.number().nullable(),\r\n});\r\n\r\nconst isValidEmail = (email) =>\r\n  // eslint-disable-next-line no-useless-escape\r\n  /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(\r\n    email\r\n  );\r\n\r\nconst ViewPatient = (props) => {\r\n  const {\r\n    register,\r\n    watch,\r\n    setValue,\r\n    getValues,\r\n    clearErrors,\r\n    setError,\r\n    handleSubmit,\r\n    formState,\r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n  });\r\n  const [disValue, setDisValue] = useState(\"\");\r\n  const { errors, isSubmitting } = formState;\r\n  const watchPnumber = watch(\"pnumber\", false);\r\n  const watchAltPhonenumber = watch(\"altPhonenumber\", false);\r\n  const watchContactPhoneNumber = watch(\"contactPhoneNumber\", false);\r\n  const watchShowAge = watch(\"age\", false);\r\n  const [today, setToday] = useState(\r\n    new Date().toISOString().substr(0, 10).replace(\"T\", \" \")\r\n  );\r\n  const [minDOB, setMinDOB] = useState(\r\n    new Date(\"1/1/1930\").toISOString().substr(0, 10).replace(\"T\", \" \")\r\n  );\r\n  const [maxDOB, setMaxDOB] = useState(\r\n    new Date().toISOString().substr(0, 10).replace(\"T\", \" \")\r\n  );\r\n  const [contacts, setContacts] = useState([]);\r\n  const [saving, setSaving] = useState(false);\r\n  const [ageDisabled, setAgeDisabled] = useState(true);\r\n  const [showRelative, setShowRelative] = useState(false);\r\n  const [editRelative, setEditRelative] = useState(null);\r\n  const [genders, setGenders] = useState([]);\r\n  const [sexOptions, setSexOptions] = useState([]);\r\n  const [maritalStatusOptions, setMaritalStatusOptions] = useState([]);\r\n  const [educationOptions, setEducationOptions] = useState([]);\r\n  const [occupationOptions, setOccupationOptions] = useState([]);\r\n  const [relationshipOptions, setRelationshipOptions] = useState([]);\r\n  const [topLevelUnitCountryOptions, settopLevelUnitCountryOptions] = useState(\r\n    []\r\n  );\r\n  const [stateUnitOptions, setStateUnitOptions] = useState([]);\r\n  const [districtUnitOptions, setDistrictUnitOptions] = useState([]);\r\n  const [checkHospitalNumberError, setCheckHospitalNumberError] =\r\n    useState(false);\r\n  const [checkNINError, setCheckNINError] = useState(false);\r\n  const userDetail =\r\n    props.location && props.location.state ? props.location.state.user : null;\r\n  const [patientFacilityId, setPatientFacilityId] = useState(null);\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [open, setOpen] = React.useState(false);\r\n  const toggle = () => setOpen(!open);\r\n  const location = useLocation();\r\n  const locationState = location.state;\r\n  let patientId = null;\r\n  patientId = locationState ? locationState.patientId : null;\r\n  const [patientData, setPatientData] = useState({});\r\n\r\n  const getNames = (relationship) => {\r\n    const surname = relationship.surname;\r\n    const firstName = relationship.firstName;\r\n    const otherName = relationship.otherName ? relationship.otherName : \"\";\r\n    return surname + \", \" + firstName + \" \" + otherName;\r\n  };\r\n  const getRelationship = (relationshipId) => {\r\n    const relationship = relationshipOptions.find(\r\n      (obj) => obj.id == relationshipId\r\n    );\r\n    return relationship ? relationship.display : \"\";\r\n  };\r\n  const getPhoneContactPoint = (contactPoint) => {\r\n    if (contactPoint.value === null) {\r\n    } else {\r\n      return contactPoint ? phoneNumberFormatCheck(contactPoint).value : \"\";\r\n    }\r\n  };\r\n  const getAddress = (address) => {\r\n    return address && address.line && address.line.length > 0\r\n      ? address.line[0]\r\n      : \"\";\r\n  };\r\n  const phoneNumberFormatCheck = (phone) => {\r\n    //console.log(phone);\r\n    if (\r\n      phone != undefined &&\r\n      typeof phone?.value !== null &&\r\n      typeof phone?.value !== \"undefined\" &&\r\n      phone?.value?.charAt(0) === \"0\"\r\n    ) {\r\n      phone.value = phone.value.replace(\"0\", \"234\");\r\n    }\r\n    return phone;\r\n  };\r\n  const calculate_age = (dob) => {\r\n    const today = new Date();\r\n    const dateParts = dob.split(\"-\");\r\n    const birthDate = new Date(dob); // create a date object directlyfrom`dob1`argument\r\n    let age_now = today.getFullYear() - birthDate.getFullYear();\r\n    const m = today.getMonth() - birthDate.getMonth();\r\n    if (age_now <= 0 && m < 0 && today.getDate() < birthDate.getDate()) {\r\n      age_now--;\r\n    }\r\n    // if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n    //     age_now--;\r\n    // }\r\n    if (age_now === 0) {\r\n      return m;\r\n    }\r\n    return age_now;\r\n  };\r\n  const getPatient = useCallback(async () => {\r\n    if (patientId) {\r\n      const response = await axios.get(`${baseUrl}patient/${patientId}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      const sexCodeset = await axios.get(\r\n        `${baseUrl}application-codesets/v2/SEX`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      const patient = response.data;\r\n      //console.log(patient);\r\n      setPatientData(patient);\r\n      const contacts = patient.contact ? patient.contact : [];\r\n      setContacts(contacts.contact);\r\n      const identifiers = patient.identifier;\r\n      const address = patient.address;\r\n      const contactPoint = patient.contactPoint;\r\n      const hospitalNumber = identifiers.identifier.find(\r\n        (obj) => obj.type == \"HospitalNumber\"\r\n      );\r\n      const phone = phoneNumberFormatCheck(\r\n        contactPoint?.contactPoint?.find((obj) => obj.type == \"phone\")\r\n      );\r\n      const email = contactPoint?.contactPoint?.find(\r\n        (obj) => obj.type == \"email\"\r\n      );\r\n      const altphone = phoneNumberFormatCheck(\r\n        contactPoint?.contactPoint?.find((obj) => obj.type == \"altphone\")\r\n      );\r\n      const country =\r\n        address && address.address && address.address.length > 0\r\n          ? address.address[0]\r\n          : null;\r\n      const gender = patient.gender;\r\n\r\n      //console.log(_.upperFirst(_.lowerCase(patient.sex)))\r\n      const sex = _.find(sexCodeset.data, {\r\n        display: _.upperFirst(_.lowerCase(patient.sex)),\r\n      }).id;\r\n      const employmentStatus = patient.employmentStatus;\r\n      const education = patient.education;\r\n      const maritalStatus = patient.maritalStatus;\r\n      setPatientFacilityId(patient.facilityId);\r\n      setValue(\"dateOfRegistration\", patient.dateOfRegistration);\r\n      setValue(\"facilityId\", patient.facilityId);\r\n      setValue(\"ninNumber\", patient.ninNumber);\r\n      setValue(\"firstName\", patient.firstName);\r\n      setValue(\"middleName\", patient.otherName);\r\n      setValue(\"lastName\", patient.surname);\r\n      setValue(\"hospitalNumber\", hospitalNumber ? hospitalNumber.value : \"\");\r\n      setValue(\"maritalStatus\", maritalStatus ? maritalStatus.id : \"\");\r\n      setValue(\"employmentStatus\", employmentStatus ? employmentStatus.id : \"\");\r\n\r\n      //setValue('gender', gender.id);\r\n      setValue(\"sex\", sex);\r\n      setValue(\"highestQualification\", education ? education.id : \"\");\r\n      setValue(\"dob\", format(new Date(patient.dateOfBirth), \"yyyy-MM-dd\"));\r\n      setValue(\"age\", calculate_age(patient.dateOfBirth));\r\n      if (country) {\r\n        setValue(\"countryId\", country.countryId);\r\n        const stateOptions = country.countryId\r\n          ? await loadOrganisationUnitsByParentId(country.countryId)\r\n          : \"\";\r\n        setStateUnitOptions(stateOptions);\r\n        setValue(\"stateId\", country.stateId);\r\n        const districtOptions = country.stateId\r\n          ? await loadOrganisationUnitsByParentId(country.stateId)\r\n          : \"\";\r\n        setDistrictUnitOptions(districtOptions);\r\n        setValue(\"district\", country.district);\r\n        setValue(\"address\", country.city);\r\n        setValue(\"landmark\", country.line[0]);\r\n      }\r\n      setValue(\"pnumber\", phone ? phone.value : \"+234\");\r\n      setValue(\"email\", email ? email.value : null);\r\n      setValue(\"altPhonenumber\", altphone ? altphone.value : \"+234\");\r\n    }\r\n  }, []);\r\n  const handleAddRelative = () => {\r\n    setShowRelative(true);\r\n  };\r\n  const checkHospitalNumber = async (e) => {\r\n    setCheckHospitalNumberError(false);\r\n    await axios\r\n      .post(`${baseUrl}patient/exist/hospital-number`, e, {\r\n        responseType: \"text\",\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          \"Content-Type\": \"text/plain\",\r\n        },\r\n      })\r\n      .then((response) => {\r\n        if (response.data) {\r\n          setCheckHospitalNumberError(true);\r\n        } else {\r\n          setCheckHospitalNumberError(false);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n  const checkNIN = async (e) => {\r\n    setCheckNINError(false);\r\n    if (e.target.value.length > 0) {\r\n      await axios\r\n        .post(\r\n          `${baseUrl}patient/exist/nin-number/${e.target.value}`,\r\n          e.target.value,\r\n          {\r\n            responseType: \"text\",\r\n            headers: {\r\n              Authorization: `Bearer ${token}`,\r\n              \"Content-Type\": \"text/plain\",\r\n            },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          if (response.data) {\r\n            setCheckNINError(true);\r\n          } else {\r\n            setCheckNINError(false);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  };\r\n  const handleSaveRelationship = (e) => {\r\n    const relationshipType = getValues(\"relationshipType\");\r\n    const cfirstName = getValues(\"cfirstName\");\r\n    const cmiddleName = getValues(\"cmiddleName\");\r\n    const clastName = getValues(\"clastName\");\r\n    const contactPhoneNumber = getValues(\"contactPhoneNumber\");\r\n    const contactEmail = getValues(\"contactEmail\");\r\n    const contactAddress = getValues(\"contactAddress\");\r\n    if (!relationshipType) {\r\n      setError(\r\n        \"relationshipType\",\r\n        { type: \"custom\", message: \"Relationship is required\" },\r\n        { shouldFocus: true }\r\n      );\r\n      return;\r\n    }\r\n    if (!cfirstName) {\r\n      setError(\r\n        \"cfirstName\",\r\n        { type: \"custom\", message: \"FirstName is required\" },\r\n        { shouldFocus: true }\r\n      );\r\n      return;\r\n    }\r\n    if (!clastName) {\r\n      setError(\r\n        \"clastName\",\r\n        { type: \"custom\", message: \"LastName is required\" },\r\n        { shouldFocus: true }\r\n      );\r\n      return;\r\n    }\r\n\r\n    const contact = {\r\n      address: {\r\n        line: [contactAddress],\r\n      },\r\n      contactPoint: {\r\n        type: \"phone\",\r\n        value: contactPhoneNumber,\r\n      },\r\n      firstName: cfirstName,\r\n      fullName: cfirstName + \" \" + cmiddleName + \" \" + clastName,\r\n      relationshipId: relationshipType,\r\n      surname: clastName,\r\n      otherName: cmiddleName,\r\n    };\r\n\r\n    if (editRelative != null) {\r\n      contacts.splice(editRelative, 1);\r\n      setContacts(contacts.concat(contact));\r\n    } else {\r\n      if (contacts === undefined) {\r\n        setContacts([].concat(contact));\r\n      } else {\r\n        setContacts(contacts.concat(contact));\r\n      }\r\n    }\r\n    setShowRelative(false);\r\n  };\r\n  const handleCancelSaveRelationship = () => {\r\n    setShowRelative(false);\r\n  };\r\n  const handleEmailValidation = (email) => {\r\n    console.log(\"ValidateEmail was called with\", email);\r\n\r\n    const isValid = isValidEmail(email);\r\n    if (!isValid) {\r\n      errors.email.message = \"Please enter a valid email\";\r\n    }\r\n    const validityChanged =\r\n      (errors.email && isValid) || (!errors.email && !isValid);\r\n    if (validityChanged) {\r\n      console.log(\"Fire tracker with\", isValid ? \"Valid\" : \"Invalid\");\r\n    }\r\n\r\n    return isValid;\r\n  };\r\n\r\n  const onSubmit = async (data) => {\r\n    if (\r\n      _.find(errors, function (error) {\r\n        return error;\r\n      })\r\n    ) {\r\n      toast.error(\"Failed to save form kindly check the form for errors\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n    } else {\r\n      try {\r\n        const patientForm = {\r\n          active: true,\r\n          address: [\r\n            {\r\n              city: data.address,\r\n              countryId: data.countryId,\r\n              district: data.district,\r\n              line: [data.landmark],\r\n              organisationUnitId: 0,\r\n              postalCode: \"\",\r\n              stateId: data.stateId,\r\n            },\r\n          ],\r\n          contact: contacts,\r\n          contactPoint: [],\r\n          dateOfBirth: new Date(data.dob),\r\n          deceased: false,\r\n          deceasedDateTime: null,\r\n          firstName: data.firstName,\r\n          sexId: data.sex,\r\n          /*genderId:data.sex,*/\r\n          identifier: [\r\n            {\r\n              assignerId: 1,\r\n              type: \"HospitalNumber\",\r\n              value: data.hospitalNumber,\r\n            },\r\n          ],\r\n          ninNumber: data.ninNumber,\r\n          otherName: data.middleName,\r\n          maritalStatusId: data.maritalStatus,\r\n          surname: data.lastName,\r\n          educationId: data.highestQualification,\r\n          employmentStatusId:\r\n            data.employmentStatus != null ? data.employmentStatus : null,\r\n          dateOfRegistration: data.dateOfRegistration,\r\n          isDateOfBirthEstimated: data.dateOfBirth == \"Actual\" ? false : true,\r\n        };\r\n        const phone = {\r\n          type: \"phone\",\r\n          value: data.pnumber,\r\n        };\r\n        if (data.email) {\r\n          const email = {\r\n            type: \"email\",\r\n            value: data.email,\r\n          };\r\n          patientForm.contactPoint.push(email);\r\n        }\r\n        if (data.altPhonenumber) {\r\n          const altPhonenumber = {\r\n            type: \"altphone\",\r\n            value: data.altPhonenumber,\r\n          };\r\n          patientForm.contactPoint.push(altPhonenumber);\r\n        }\r\n        patientForm.contactPoint.push(phone);\r\n        if (patientId) {\r\n          patientForm.id = null;\r\n          patientForm.facilityId = patientFacilityId;\r\n          const response = await axios.put(\r\n            `${baseUrl}patient/${patientId}`,\r\n            patientForm,\r\n            { headers: { Authorization: `Bearer ${token}` } }\r\n          );\r\n        } else {\r\n          const response = await axios.post(`${baseUrl}patient`, patientForm, {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n          });\r\n        }\r\n        toast.success(\"Patient Register successful\");\r\n        history.push(\"/\");\r\n      } catch (e) {\r\n        console.log(e);\r\n        toast.error(\"An error occured while registering a patient !\", {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n        });\r\n      }\r\n    }\r\n  };\r\n  const onError = (errors) => {\r\n    console.error(errors);\r\n  };\r\n  const handleEditRelative = (relative, index) => {\r\n    setValue(\"relationshipType\", relative.relationshipId);\r\n    setValue(\"cfirstName\", relative.firstName);\r\n    setValue(\"cmiddleName\", relative.otherName);\r\n    setValue(\"clastName\", relative.surname);\r\n    setValue(\r\n      \"contactPhoneNumber\",\r\n      relative.contactPoint\r\n        ? phoneNumberFormatCheck(relative.contactPoint).value\r\n        : \"\"\r\n    );\r\n    setValue(\r\n      \"contactAddress\",\r\n      relative.address &&\r\n        relative.address.line &&\r\n        relative.address.line.length > 0\r\n        ? relative.address.line[0]\r\n        : \"\"\r\n    );\r\n    setShowRelative(true);\r\n    setEditRelative(index);\r\n  };\r\n  const handleDeleteRelative = (index) => {\r\n    setTimeout(() => {\r\n      contacts.splice(index, 1);\r\n      setContacts(contacts);\r\n      setShowRelative(true);\r\n      setShowRelative(false);\r\n    }, 500);\r\n  };\r\n\r\n  const loadSexes = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${baseUrl}application-codesets/v2/SEX`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      await setSexOptions(response.data);\r\n    } catch (e) {\r\n      toast.error(\"An error occured while fetching sex codesets !\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n    }\r\n  }, []);\r\n  const loadMaritalStatus = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${baseUrl}application-codesets/v2/MARITAL_STATUS`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      setMaritalStatusOptions(response.data);\r\n    } catch (e) {\r\n      toast.error(\"An error occured while fetching marital codesets !\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n    }\r\n  }, []);\r\n  const loadEducation = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${baseUrl}application-codesets/v2/EDUCATION`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      setEducationOptions(response.data);\r\n    } catch (e) {\r\n      toast.error(\"An error occured while fetching education codesets !\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n    }\r\n  }, []);\r\n  const loadOccupation = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${baseUrl}application-codesets/v2/OCCUPATION`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      setOccupationOptions(response.data);\r\n    } catch (e) {\r\n      toast.error(\"An error occured while fetching occupation codesets !\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n    }\r\n  }, []);\r\n  const loadRelationships = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${baseUrl}application-codesets/v2/RELATIONSHIP`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      setRelationshipOptions(response.data);\r\n    } catch (e) {\r\n      toast.error(\"An error occured while fetching relationship codesets !\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n    }\r\n  }, []);\r\n  const loadTopLevelCountry = useCallback(async () => {\r\n    const response = await axios.get(\r\n      `${baseUrl}organisation-units/parent-organisation-units/0`,\r\n      { headers: { Authorization: `Bearer ${token}` } }\r\n    );\r\n    settopLevelUnitCountryOptions(response.data);\r\n  }, []);\r\n  const loadOrganisationUnitsByParentId = async (parentId) => {\r\n    const response = await axios.get(\r\n      `${baseUrl}organisation-units/parent-organisation-units/${parentId}`,\r\n      { headers: { Authorization: `Bearer ${token}` } }\r\n    );\r\n    return response.data;\r\n  };\r\n  const onCountryChange = async (e) => {\r\n    if (e.target.value) {\r\n      const stateOptions = await loadOrganisationUnitsByParentId(\r\n        e.target.value\r\n      );\r\n      setStateUnitOptions(stateOptions);\r\n    } else {\r\n      setStateUnitOptions([]);\r\n    }\r\n  };\r\n  const onStateChange = async (e) => {\r\n    if (e.target.value) {\r\n      const districtOptions = await loadOrganisationUnitsByParentId(\r\n        e.target.value\r\n      );\r\n      setDistrictUnitOptions(districtOptions);\r\n    } else {\r\n      setDistrictUnitOptions([]);\r\n    }\r\n  };\r\n\r\n  const handleDobChange = (e) => {\r\n    if (e.target.value) {\r\n      const today = new Date();\r\n      const birthDate = new Date(e.target.value);\r\n      let age_now = today.getFullYear() - birthDate.getFullYear();\r\n      const m = today.getMonth() - birthDate.getMonth();\r\n      if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n        age_now--;\r\n      }\r\n      setValue(\"age\", age_now);\r\n    } else {\r\n      setValue(\"age\", null);\r\n    }\r\n  };\r\n\r\n  const handleDateOfBirthChange = (e) => {\r\n    if (e.target.value == \"Actual\") {\r\n      setAgeDisabled(true);\r\n    } else if (e.target.value == \"Estimated\") {\r\n      setAgeDisabled(false);\r\n    }\r\n  };\r\n\r\n  const handleAgeChange = (e) => {\r\n    if (!ageDisabled && e.target.value) {\r\n      setValue(\"age\", e.target.value);\r\n      const currentDate = new Date();\r\n      currentDate.setDate(15);\r\n      currentDate.setMonth(5);\r\n      const estDob = moment(currentDate.toISOString());\r\n      const dob = estDob.add(e.target.value * -1, \"years\");\r\n      setValue(\"dob\", format(new Date(dob.toDate()), \"yyyy-MM-dd\"));\r\n      if (calculate_age(format(new Date(dob.toDate()), \"yyyy-MM-dd\")) >= 60) {\r\n        toggle();\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadSexes();\r\n    loadMaritalStatus();\r\n    loadEducation();\r\n    loadOccupation();\r\n    loadRelationships();\r\n    loadTopLevelCountry();\r\n    getPatient();\r\n    districtValue();\r\n  }, [\r\n    loadSexes,\r\n    loadMaritalStatus,\r\n    loadEducation,\r\n    loadOccupation,\r\n    loadRelationships,\r\n    loadTopLevelCountry,\r\n    getPatient,\r\n  ]);\r\n\r\n  let genderRows = null;\r\n  let sexRows = null;\r\n  let maritalStatusRows = null;\r\n  let educationRows = null;\r\n  let occupationRows = null;\r\n  let relationshipRows = null;\r\n  let topLevelUnitCountryRows = null;\r\n  let stateRows = null;\r\n  let districtRows = null;\r\n  if (sexOptions && sexOptions.length > 0) {\r\n    sexRows = sexOptions.map((sex, index) => (\r\n      <option key={sex.id} value={sex.id}>\r\n        {sex.display}\r\n      </option>\r\n    ));\r\n  }\r\n  if (maritalStatusOptions && maritalStatusOptions.length > 0) {\r\n    maritalStatusRows = maritalStatusOptions.map(\r\n      (maritalStatusOption, index) => (\r\n        <option\r\n          key={maritalStatusOption.id}\r\n          value={maritalStatusOption.id}\r\n          defaultValue={maritalStatusOption.display}\r\n        >\r\n          {maritalStatusOption.display}\r\n        </option>\r\n      )\r\n    );\r\n  }\r\n  if (educationOptions && educationOptions.length > 0) {\r\n    educationRows = educationOptions.map((educationOption, index) => (\r\n      <option key={educationOption.id} value={educationOption.id}>\r\n        {educationOption.display}\r\n      </option>\r\n    ));\r\n  }\r\n  if (occupationOptions && occupationOptions.length > 0) {\r\n    occupationRows = occupationOptions.map((occupationOption, index) => (\r\n      <option key={occupationOption.id} value={occupationOption.id}>\r\n        {occupationOption.display}\r\n      </option>\r\n    ));\r\n  }\r\n  if (relationshipOptions && relationshipOptions.length > 0) {\r\n    relationshipRows = relationshipOptions.map((relationshipOption, index) => (\r\n      <option key={relationshipOption.id} value={relationshipOption.id}>\r\n        {relationshipOption.display}\r\n      </option>\r\n    ));\r\n  }\r\n  if (topLevelUnitCountryOptions && topLevelUnitCountryOptions.length > 0) {\r\n    topLevelUnitCountryRows = topLevelUnitCountryOptions.map(\r\n      (topLevelUnitCountryOption, index) => (\r\n        <option\r\n          key={topLevelUnitCountryOption.id}\r\n          value={topLevelUnitCountryOption.id}\r\n        >\r\n          {topLevelUnitCountryOption.name}\r\n        </option>\r\n      )\r\n    );\r\n  }\r\n  if (stateUnitOptions && stateUnitOptions.length > 0) {\r\n    stateRows = stateUnitOptions.map((stateUnitOption, index) => (\r\n      <option key={stateUnitOption.id} value={stateUnitOption.id}>\r\n        {stateUnitOption.name}\r\n      </option>\r\n    ));\r\n  }\r\n  if (districtUnitOptions && districtUnitOptions.length > 0) {\r\n    districtRows = districtUnitOptions.map((districtUnitOption, index) => (\r\n      <option key={districtUnitOption.id} value={districtUnitOption.id}>\r\n        {districtUnitOption.name}\r\n      </option>\r\n    ));\r\n  }\r\n\r\n  const districtValue = () => {\r\n    let value = \"\";\r\n    if (\r\n      Object.keys(patientData).length !== 0 &&\r\n      patientData.address.address[0].district !== null\r\n    ) {\r\n      districtUnitOptions.map((districtUnitOption, index) => {\r\n        if (districtUnitOption.id === patientData.address.address[0].district) {\r\n          value = districtUnitOption.name;\r\n          setDisValue(value);\r\n        }\r\n      });\r\n    }\r\n    return value;\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const checkPhoneNumber = (e, inputName) => {\r\n    setValue(inputName, e);\r\n  };\r\n\r\n  const alphabetOnly = (e, inputName) => {\r\n    const result = e.target.value.replace(/[^a-z]/gi, \"\");\r\n    setValue(inputName, result);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ToastContainer autoClose={3000} hideProgressBar />\r\n      <Card className={classes.root}>\r\n        <CardContent>\r\n          <div className=\"row mb-12 col-md-12\" style={{ paddingBottom: \"5px\" }}>\r\n            <div className=\"mb-6 col-md-6\">\r\n              <Breadcrumbs aria-label=\"breadcrumb\">\r\n                <Typography style={{ color: \"#992E62\" }}>Patient</Typography>\r\n                <Typography style={{ color: \"#014d88\" }}>\r\n                  Registration\r\n                </Typography>\r\n              </Breadcrumbs>\r\n            </div>\r\n            <div className=\"mb-6 col-md-6\">\r\n              <Link\r\n                to={{\r\n                  pathname: \"/\",\r\n                  state: \"users\",\r\n                }}\r\n              >\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className=\" float-right ms-1\"\r\n                  style={{ backgroundColor: \"#014d88\", fontWeight: \"bolder\" }}\r\n                  startIcon={<TiArrowBack />}\r\n                >\r\n                  <span style={{ textTransform: \"capitalize\" }}>Back </span>\r\n                </Button>\r\n              </Link>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-xl-12 col-lg-12\">\r\n            <Form onSubmit={handleSubmit(onSubmit, onError)}>\r\n              <div className=\"card\">\r\n                <div\r\n                  className=\"card-header\"\r\n                  style={{\r\n                    backgroundColor: \"#014d88\",\r\n                    color: \"#fff\",\r\n                    fontWeight: \"bolder\",\r\n                  }}\r\n                >\r\n                  <h5\r\n                    className=\"card-title\"\r\n                    style={{ color: \"#fff\", fontWeight: \"bolder\" }}\r\n                  >\r\n                    {userDetail === null\r\n                      ? \"Basic Information\"\r\n                      : \"Edit User Information\"}\r\n                  </h5>\r\n                </div>\r\n\r\n                <div className=\"card-body\">\r\n                  <div className=\"basic-form\">\r\n                    <div className=\"row\">\r\n                      <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                          <Label for=\"dateOfRegistration\">\r\n                            Date of Registration*{\" \"}\r\n                          </Label>\r\n                          <input\r\n                            className=\"form-control\"\r\n                            type=\"date\"\r\n                            name=\"dateOfRegistration\"\r\n                            id=\"dateOfRegistration\"\r\n                            max={today}\r\n                            {...register(\"dateOfRegistration\")}\r\n                            onChange={(e) => {\r\n                              if (\r\n                                new Date(e.target.value) instanceof Date &&\r\n                                e.target.value != \"\"\r\n                              ) {\r\n                                setMaxDOB(\r\n                                  new Date(e.target.value)\r\n                                    .toISOString()\r\n                                    .substr(0, 10)\r\n                                    .replace(\"T\", \" \")\r\n                                );\r\n                              } else {\r\n                                setMaxDOB(\r\n                                  new Date()\r\n                                    .toISOString()\r\n                                    .substr(0, 10)\r\n                                    .replace(\"T\", \" \")\r\n                                );\r\n                              }\r\n                            }}\r\n                            style={{ border: \"1px solid #014d88\" }}\r\n                            readOnly\r\n                          />\r\n                          {errors.dateOfRegistration && (\r\n                            <p>Enter the registration date</p>\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n\r\n                      <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                          <Label for=\"patientId\">Hospital Number* </Label>\r\n                          <input\r\n                            className=\"form-control\"\r\n                            type=\"text\"\r\n                            name=\"hospitalNumber\"\r\n                            id=\"hospitalNumber\"\r\n                            autoComplete=\"off\"\r\n                            onInput={(e) => {\r\n                              e.target.value = e.target.value.replace(\r\n                                /\\s/g,\r\n                                \"\"\r\n                              );\r\n                              console.log(e.target.value);\r\n                              checkHospitalNumber(e.target.value);\r\n                            }}\r\n                            onChange={checkHospitalNumber}\r\n                            {...register(\"hospitalNumber\", {\r\n                              onChange: (e) => {\r\n                                checkHospitalNumber(\r\n                                  e.target.value.replace(/\\s/g, \"\")\r\n                                );\r\n                              },\r\n                            })}\r\n                            style={{ border: \"1px solid #014d88\" }}\r\n                            readOnly\r\n                          />\r\n                          {checkHospitalNumberError && (\r\n                            <p>Hospital number has been registered before</p>\r\n                          )}\r\n                          {!checkHospitalNumberError &&\r\n                            errors.hospitalNumber && (\r\n                              <p>Enter the hospital number</p>\r\n                            )}\r\n                        </FormGroup>\r\n                      </div>\r\n                      <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                          <Label for=\"ninNumber\">\r\n                            National Identification Number (NIN)\r\n                          </Label>\r\n                          <input\r\n                            className=\"form-control\"\r\n                            name=\"ninNumber\"\r\n                            type=\"number\"\r\n                            {...register(\"ninNumber\")}\r\n                            id=\"ninNumber\"\r\n                            autoComplete=\"off\"\r\n                            onChange={(e) => {\r\n                              console.log(\"here\");\r\n                              clearErrors(\"ninNumber\");\r\n                              e.target.value = e.target.value.replace(\r\n                                /\\D/g,\r\n                                \"\"\r\n                              );\r\n                              checkNIN(e);\r\n                              if (e.target.value.length > e.target.maxLength) {\r\n                                e.target.value = e.target.value.slice(\r\n                                  0,\r\n                                  e.target.maxLength\r\n                                );\r\n                                clearErrors(\"ninNumber\");\r\n                              } else if (\r\n                                e.target.value.length > 0 &&\r\n                                e.target.value.length < e.target.maxLength\r\n                              ) {\r\n                                setError(\"ninNumber\");\r\n                              } else if (\r\n                                e.target.value.length <= 0 ||\r\n                                e.target.value.length == e.target.maxLength\r\n                              ) {\r\n                                clearErrors(\"ninNumber\");\r\n                              }\r\n                            }}\r\n                            minLength={11}\r\n                            maxLength={11}\r\n                            style={{ border: \"1px solid #014d88\" }}\r\n                            readOnly\r\n                          />\r\n                          {checkNINError && (\r\n                            <p>NIN has been registered before</p>\r\n                          )}\r\n                          {!checkNINError && errors.ninNumber && (\r\n                            <p>Enter a valid NIN Number</p>\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n                      {/*                                            <div className=\"form-group mb-3 col-md-3\">\r\n                                                <FormGroup>\r\n                                                    <Label for=\"emrId\">EMR ID *</Label>\r\n                                                    <input\r\n                                                        className=\"form-control\"\r\n                                                        disabled={true}\r\n                                                        type=\"text\"\r\n                                                        name=\"emrId\"\r\n                                                        id=\"emrId\"\r\n                                                        style={{border: \"1px solid #014d88\"}}\r\n                                                    />\r\n                                                </FormGroup>\r\n                                            </div>*/}\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                      <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                          <Label for=\"firstName\">First Names *</Label>\r\n                          <input\r\n                            className=\"form-control\"\r\n                            type=\"text\"\r\n                            name=\"firstName\"\r\n                            id=\"firstName\"\r\n                            {...register(\"firstName\", {\r\n                              onChange: (e) => {\r\n                                alphabetOnly(e, \"firstName\");\r\n                              },\r\n                            })}\r\n                            style={{ border: \"1px solid #014d88\" }}\r\n                            readOnly\r\n                          />\r\n                          {errors.firstName && <p>First Name is required</p>}\r\n                        </FormGroup>\r\n                      </div>\r\n\r\n                      <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                          <Label>Middle Name</Label>\r\n                          <input\r\n                            className=\"form-control\"\r\n                            type=\"text\"\r\n                            name=\"middleName\"\r\n                            id=\"middleName\"\r\n                            {...register(\"middleName\", {\r\n                              onChange: (e) => {\r\n                                alphabetOnly(e, \"middleName\");\r\n                              },\r\n                            })}\r\n                            style={{ border: \"1px solid #014d88\" }}\r\n                            readOnly\r\n                          />\r\n                          {errors.middleName && (\r\n                            <p>{errors.middleName.message}</p>\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n\r\n                      <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                          <Label>Last Name *</Label>\r\n                          <input\r\n                            className=\"form-control\"\r\n                            type=\"text\"\r\n                            name=\"lastName\"\r\n                            id=\"lastName\"\r\n                            {...register(\"lastName\", {\r\n                              onChange: (e) => {\r\n                                alphabetOnly(e, \"lastName\");\r\n                              },\r\n                            })}\r\n                            style={{ border: \"1px solid #014d88\" }}\r\n                            readOnly\r\n                          />\r\n                          {errors.lastName && <p>Last Name is required</p>}\r\n                        </FormGroup>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                      <div className=\"form-group  col-md-4\">\r\n                        <FormGroup>\r\n                          <Label>Sex *</Label>\r\n                          <input\r\n                            className=\"form-control\"\r\n                            type=\"text\"\r\n                            name=\"sex\"\r\n                            id=\"sex\"\r\n                            value={\r\n                              patientData.sex !== null ? patientData.sex : \" \"\r\n                            }\r\n                            style={{ border: \"1px solid #014d88\" }}\r\n                            readOnly\r\n                          />\r\n                          {errors.sex && <p>Select Sex</p>}\r\n                        </FormGroup>\r\n                      </div>\r\n                      <div className=\"form-group mb-2 col-md-2\">\r\n                        <FormGroup>\r\n                          <Label>Date Of Birth</Label>\r\n                          <div className=\"radio\">\r\n                            <label>\r\n                              <input\r\n                                type=\"radio\"\r\n                                value=\"Actual\"\r\n                                name=\"dateOfBirth\"\r\n                                defaultChecked\r\n                                {...register(\"dateOfBirth\")}\r\n                                onChange={(e) => handleDateOfBirthChange(e)}\r\n                                style={{ border: \"1px solid #014d88\" }}\r\n                              />{\" \"}\r\n                              Actual\r\n                            </label>\r\n                          </div>\r\n                          <div className=\"radio\">\r\n                            <label>\r\n                              <input\r\n                                type=\"radio\"\r\n                                value=\"Estimated\"\r\n                                name=\"dateOfBirth\"\r\n                                {...register(\"dateOfBirth\")}\r\n                                onChange={(e) => handleDateOfBirthChange(e)}\r\n                                style={{ border: \"1px solid #014d88\" }}\r\n                              />{\" \"}\r\n                              Estimated\r\n                            </label>\r\n                          </div>\r\n                        </FormGroup>\r\n                      </div>\r\n\r\n                      <div className=\"form-group mb-3 col-md-2\">\r\n                        <FormGroup>\r\n                          <Label>Date</Label>\r\n                          <input\r\n                            className=\"form-control\"\r\n                            type=\"date\"\r\n                            name=\"dob\"\r\n                            id=\"dob\"\r\n                            min={minDOB}\r\n                            max={maxDOB}\r\n                            {...register(\"dob\")}\r\n                            onChange={(e) => {\r\n                              clearErrors(\"dob\");\r\n                              if (new Date(e.target.value) instanceof Date) {\r\n                                console.log(\"date\");\r\n                                handleDobChange(e);\r\n                                clearErrors(\"dob\");\r\n                              } else {\r\n                                setError(\"dob\");\r\n                              }\r\n                            }}\r\n                            style={{ border: \"1px solid #014d88\" }}\r\n                            readOnly\r\n                          />\r\n                          {errors.dob && (\r\n                            <p>Enter a valid date of birth (dd/mm/yyyy)</p>\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n\r\n                      <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                          <Label>Age</Label>\r\n                          <input\r\n                            className=\"form-control\"\r\n                            type=\"number\"\r\n                            name=\"age\"\r\n                            id=\"age\"\r\n                            {...register(\"age\")}\r\n                            disabled={ageDisabled}\r\n                            onChange={(e) => handleAgeChange(e)}\r\n                            style={{ border: \"1px solid #014d88\" }}\r\n                            readOnly\r\n                          />\r\n                        </FormGroup>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className={\"row\"}>\r\n                      {/*                                            {watchShowAge >=0 &&\r\n                                            <>*/}\r\n                      <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                          <Label>Marital Status *</Label>\r\n                          <input\r\n                            className=\"form-control\"\r\n                            type=\"text\"\r\n                            name=\"maritalStatus\"\r\n                            id=\"maritalStatus\"\r\n                            value={\r\n                              Object.keys(patientData).length !== 0 &&\r\n                              patientData.maritalStatus !== null\r\n                                ? patientData.maritalStatus.display\r\n                                : \"\"\r\n                            }\r\n                            style={{ border: \"1px solid #014d88\" }}\r\n                            readOnly\r\n                          />\r\n                          {errors.maritalStatus && <p>Select Marital Status</p>}\r\n                        </FormGroup>\r\n                      </div>\r\n\r\n                      <div className=\"form-group  col-md-4\">\r\n                        <FormGroup>\r\n                          <Label>Employment Status *</Label>\r\n                          <input\r\n                            className=\"form-control\"\r\n                            type=\"text\"\r\n                            name=\"employmentStatus\"\r\n                            id=\"employmentStatus\"\r\n                            value={\r\n                              Object.keys(patientData).length !== 0 &&\r\n                              patientData.employmentStatus !== null\r\n                                ? patientData.employmentStatus.display\r\n                                : \" \"\r\n                            }\r\n                            style={{ border: \"1px solid #014d88\" }}\r\n                            readOnly\r\n                          />\r\n                          {errors.employmentStatus && (\r\n                            <p>Select Employment Status</p>\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n                      {/*\r\n                                            </>\r\n                                            }\r\n*/}\r\n\r\n                      <div className=\"form-group  col-md-4\">\r\n                        <FormGroup>\r\n                          <Label>Education Level</Label>\r\n                          <input\r\n                            className=\"form-control\"\r\n                            type=\"text\"\r\n                            name=\"highestQualification\"\r\n                            id=\"highestQualification\"\r\n                            value={\r\n                              Object.keys(patientData).length !== 0 &&\r\n                              patientData.education !== null\r\n                                ? patientData.education.display\r\n                                : \"\"\r\n                            }\r\n                            style={{ border: \"1px solid #014d88\" }}\r\n                            readOnly\r\n                          />\r\n                          {errors.highestQualification && (\r\n                            <p>Select the Education Level</p>\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"card\">\r\n                <div\r\n                  className=\"card-header\"\r\n                  style={{\r\n                    backgroundColor: \"#014d88\",\r\n                    color: \"#fff\",\r\n                    fontWeight: \"bolder\",\r\n                  }}\r\n                >\r\n                  <h5 className=\"card-title\">Contact Details</h5>\r\n                </div>\r\n\r\n                <div className=\"card-body\">\r\n                  <div className={\"row\"}>\r\n                    <div className=\"form-group  col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>Phone Number *</Label>\r\n                        <PhoneInput\r\n                          containerStyle={{\r\n                            width: \"100%\",\r\n                            border: \"1px solid #014d88\",\r\n                          }}\r\n                          inputStyle={{ width: \"100%\", borderRadius: \"0px\" }}\r\n                          country={\"ng\"}\r\n                          masks={{ ng: \"...-...-....\", at: \"(....) ...-....\" }}\r\n                          placeholder=\"(234)7099999999\"\r\n                          value={getValues(\"pnumber\")}\r\n                          onChange={(e) => {\r\n                            checkPhoneNumber(e, \"pnumber\");\r\n                          }}\r\n                          isValid={(value, country) => {\r\n                            if (value === country.countryCode) {\r\n                              return true;\r\n                            } else {\r\n                              if (value.length < 13) {\r\n                                errors.pnumber = true;\r\n                                return false;\r\n                              } else {\r\n                                errors.pnumber = false;\r\n                                return true;\r\n                              }\r\n                            }\r\n                          }}\r\n                          disabled={true}\r\n                        />\r\n\r\n                        {/*                                                <input\r\n                                                    className=\"form-control\"\r\n                                                    type=\"tel\"\r\n                                                    name=\"pnumber\"\r\n                                                    id=\"pnumber\"\r\n                                                    {...register(\"pnumber\",{\r\n                                                        onChange:(e)=>{checkPhoneNumber(e,'pnumber')}\r\n                                                    })}\r\n                                                    placeholder=\"(234)7099999999\"\r\n                                                    style={{border: \"1px solid #014d88\"}}\r\n                                                />*/}\r\n                        {/*errors.pnumber && <p>Phone number is required</p>*/}\r\n                      </FormGroup>\r\n                    </div>\r\n\r\n                    <div className=\"form-group col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>Alt. Phone Number</Label>\r\n                        <PhoneInput\r\n                          containerStyle={{\r\n                            width: \"100%\",\r\n                            border: \"1px solid #014d88\",\r\n                          }}\r\n                          inputStyle={{ width: \"100%\", borderRadius: \"0px\" }}\r\n                          country={\"ng\"}\r\n                          masks={{ ng: \"...-...-....\", at: \"(....) ...-....\" }}\r\n                          placeholder=\"(234)7099999999\"\r\n                          value={getValues(\"altPhonenumber\")}\r\n                          onChange={(e) => {\r\n                            checkPhoneNumber(e, \"altPhonenumber\");\r\n                          }}\r\n                          isValid={(value, country) => {\r\n                            if (value === country.countryCode) {\r\n                              return true;\r\n                            } else {\r\n                              if (value.length < 13) {\r\n                                errors.altPhonenumber = true;\r\n                                return \"Enter a valid phone number\";\r\n                              } else {\r\n                                errors.altPhonenumber = false;\r\n                                return true;\r\n                              }\r\n                            }\r\n                          }}\r\n                          disabled={true}\r\n                        />\r\n                        {/*                                                <input\r\n                                                    className=\"form-control\"\r\n                                                    type=\"tel\"\r\n                                                    name=\"altPhoneNumber\"\r\n                                                    id=\"altPhoneNumber\"\r\n                                                    {...register(\"altPhonenumber\",{\r\n                                                        onChange:(e)=>{checkPhoneNumber(e,'altPhonenumber')}\r\n                                                    })}\r\n                                                    placeholder=\"(234)7099999999\"\r\n                                                    style={{border: \"1px solid #014d88\"}}\r\n                                                />*/}\r\n                        {errors.altPhonenumber && (\r\n                          <p>{errors.altPhonenumber.message}</p>\r\n                        )}\r\n                      </FormGroup>\r\n                    </div>\r\n\r\n                    <div className=\"form-group col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>Email</Label>\r\n                        <input\r\n                          className=\"form-control\"\r\n                          type=\"email\"\r\n                          name=\"email\"\r\n                          id=\"email\"\r\n                          {...register(\"email\", {\r\n                            required: true,\r\n                            validate: handleEmailValidation,\r\n                          })}\r\n                          style={{ border: \"1px solid #014d88\" }}\r\n                          readOnly\r\n                        />\r\n                        {errors.email && <p>{errors.email.message}</p>}\r\n                      </FormGroup>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"row\">\r\n                    <div className=\"form-group  col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>Country *</Label>\r\n                        {/* <input\r\n                                                    className=\"form-control\"\r\n                                                    type=\"text\"\r\n                                                    name=\"country\"\r\n                                                    id=\"country\"\r\n                                                    value={Object.keys(patientData).length !== 0 &&  patientData.address.address[0]?.countryId === 1 ? \"Nigeria\" : \"\"}\r\n                                                    style={{border: \"1px solid #014d88\"}}\r\n                                                    readOnly\r\n                                                />*/}\r\n                        <select\r\n                          className=\"form-control\"\r\n                          type=\"text\"\r\n                          name=\"country\"\r\n                          id=\"country\"\r\n                          readOnly\r\n                          style={{ border: \"1px solid #014d88\" }}\r\n                          {...register(\"countryId\")}\r\n                          onChange={(e) => onCountryChange(e)}\r\n                        >\r\n                          {/*<option value={\"\"}>Select Country</option>*/}\r\n                          {topLevelUnitCountryRows}\r\n                        </select>\r\n                      </FormGroup>\r\n                    </div>\r\n\r\n                    <div className=\"form-group  col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>State *</Label>\r\n                        {/*<input\r\n                                                    className=\"form-control\"\r\n                                                    type=\"text\"\r\n                                                    name=\"stateId\"\r\n                                                    id=\"stateId\"\r\n                                                    value={Object.keys(patientData).length !== 0 && patientData.address.address[0].city !== null ? patientData.address.address[0].city : \"\"}\r\n                                                    style={{border: \"1px solid #014d88\"}}\r\n                                                    readOnly\r\n                                                />*/}\r\n                        <select\r\n                          className=\"form-control\"\r\n                          type=\"text\"\r\n                          name=\"stateId\"\r\n                          id=\"stateId\"\r\n                          readOnly\r\n                          style={{ border: \"1px solid #014d88\" }}\r\n                          {...register(\"stateId\")}\r\n                          onChange={(e) => onStateChange(e)}\r\n                        >\r\n                          <option value={\"\"}>Select State</option>\r\n                          {stateRows}\r\n                        </select>\r\n                      </FormGroup>\r\n                    </div>\r\n\r\n                    <div className=\"form-group  col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>Province/District/LGA *</Label>\r\n                        {/*  <input\r\n                                                        className=\"form-control\"\r\n                                                        type=\"text\"\r\n                                                        name=\"district\"\r\n                                                        id=\"district\"\r\n                                                        value={disValue !== \"\" ? disValue : \"\"}\r\n                                                        style={{border: \"1px solid #014d88\"}}\r\n                                                        readOnly\r\n                                                    />*/}\r\n                        <select\r\n                          className=\"form-control\"\r\n                          type=\"text\"\r\n                          name=\"district\"\r\n                          id=\"district\"\r\n                          readOnly\r\n                          style={{ border: \"1px solid #014d88\" }}\r\n                          {...register(\"district\")}\r\n                        >\r\n                          <option value={\"\"}>\r\n                            Select Province/District/LGA\r\n                          </option>\r\n                          {districtRows}\r\n                        </select>\r\n                        {errors.district && <p>Select Province/District/LGA</p>}\r\n                      </FormGroup>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className={\"row\"}>\r\n                    <div className=\"form-group  col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>Street Address</Label>\r\n                        <input\r\n                          className=\"form-control\"\r\n                          type=\"text\"\r\n                          name=\"address\"\r\n                          id=\"address\"\r\n                          style={{ border: \"1px solid #014d88\" }}\r\n                          {...register(\"address\")}\r\n                          readOnly\r\n                        />\r\n                        {errors.address && <p>{errors.address.message}</p>}\r\n                      </FormGroup>\r\n                    </div>\r\n\r\n                    <div className=\"form-group  col-md-6\">\r\n                      <FormGroup>\r\n                        <Label>Landmark</Label>\r\n                        <input\r\n                          className=\"form-control\"\r\n                          type=\"text\"\r\n                          name=\"landmark\"\r\n                          id=\"landmark\"\r\n                          style={{ border: \"1px solid #014d88\" }}\r\n                          {...register(\"landmark\")}\r\n                          readOnly\r\n                        />\r\n                        {errors.landmark && <p>{errors.landmark.message}</p>}\r\n                      </FormGroup>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"card\">\r\n                <div\r\n                  className=\"card-header\"\r\n                  style={{\r\n                    backgroundColor: \"#014d88\",\r\n                    color: \"#fff\",\r\n                    fontWeight: \"bolder\",\r\n                  }}\r\n                >\r\n                  <h5 className=\"card-title\">Relationship / Next Of Kin</h5>\r\n                </div>\r\n                <div className=\"card-body\">\r\n                  <div className=\"row\">\r\n                    {contacts && contacts.length > 0 && (\r\n                      <div className=\"col-xl-12 col-lg-12\">\r\n                        <table style={{ width: \"100%\" }}>\r\n                          <thead>\r\n                            <tr>\r\n                              <th>Relationship Type</th>\r\n                              <th>Name</th>\r\n                              <th>Phone</th>\r\n                              <th>Address</th>\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody>\r\n                            {contacts.map((item, index) => {\r\n                              return (\r\n                                <tr key={item.index}>\r\n                                  <td>\r\n                                    {getRelationship(item.relationshipId)}\r\n                                  </td>\r\n                                  <td>{getNames(item)}</td>\r\n                                  <td>\r\n                                    {getPhoneContactPoint(item.contactPoint)}\r\n                                  </td>\r\n                                  <td>{getAddress(item.address)}</td>\r\n                                  {/*<td>\r\n                                                                        <button type=\"button\"\r\n                                                                                className=\"btn btn-default btn-light btn-sm editRow\"\r\n                                                                                onClick={(e) => handleEditRelative(item, index)}>\r\n                                                                            <FontAwesomeIcon icon=\"edit\" />\r\n                                                                        </button>\r\n                                                                        &nbsp;&nbsp;\r\n                                                                        <button\r\n                                                                            type=\"button\"\r\n                                                                            className=\"btn btn-danger btn-sm removeRow\"\r\n                                                                            onClick={(e) => handleDeleteRelative(index)}>\r\n                                                                            <FontAwesomeIcon icon=\"trash\" />\r\n                                                                        </button>\r\n                                                                    </td>*/}\r\n                                </tr>\r\n                              );\r\n                            })}\r\n                          </tbody>\r\n                        </table>\r\n                      </div>\r\n                    )}\r\n                    <div className=\"col-xl-12 col-lg-12\">\r\n                      {showRelative && (\r\n                        <div className=\"card\">\r\n                          <div className=\"card-body\">\r\n                            <div className=\"row\">\r\n                              <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                  <Label for=\"relationshipType\">\r\n                                    Relationship Type *\r\n                                  </Label>\r\n                                  <select\r\n                                    className=\"form-control\"\r\n                                    name=\"relationshipType\"\r\n                                    id=\"relationshipType\"\r\n                                    style={{ border: \"1px solid #014d88\" }}\r\n                                    {...register(\"relationshipType\")}\r\n                                  >\r\n                                    <option value={\"\"}></option>\r\n                                    {relationshipRows}\r\n                                  </select>\r\n                                  {errors.relationshipType && (\r\n                                    <p>{errors.relationshipType.message}</p>\r\n                                  )}\r\n                                </FormGroup>\r\n                              </div>\r\n\r\n                              <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                  <Label for=\"cfirstName\">First Name *</Label>\r\n                                  <input\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    name=\"cfirstName\"\r\n                                    id=\"cfirstName\"\r\n                                    style={{ border: \"1px solid #014d88\" }}\r\n                                    {...register(\"cfirstName\", {\r\n                                      onChange: (e) => {\r\n                                        alphabetOnly(e, \"cfirstName\");\r\n                                      },\r\n                                    })}\r\n                                  />\r\n                                  {errors.cfirstName && (\r\n                                    <p>{errors.cfirstName.message}</p>\r\n                                  )}\r\n                                </FormGroup>\r\n                              </div>\r\n\r\n                              <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                  <Label>Middle Name</Label>\r\n                                  <input\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    name=\"cmiddleName\"\r\n                                    id=\"cmiddleName\"\r\n                                    style={{ border: \"1px solid #014d88\" }}\r\n                                    {...register(\"cmiddleName\", {\r\n                                      onChange: (e) => {\r\n                                        alphabetOnly(e, \"cmiddleName\");\r\n                                      },\r\n                                    })}\r\n                                  />\r\n                                  {errors.cmiddleName && (\r\n                                    <p>{errors.cmiddleName.message}</p>\r\n                                  )}\r\n                                </FormGroup>\r\n                              </div>\r\n\r\n                              <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                  <Label>Last Name </Label>\r\n                                  <input\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    name=\"clastName\"\r\n                                    id=\"clastName\"\r\n                                    style={{ border: \"1px solid #014d88\" }}\r\n                                    {...register(\"clastName\", {\r\n                                      onChange: (e) => {\r\n                                        alphabetOnly(e, \"clastName\");\r\n                                      },\r\n                                    })}\r\n                                  />\r\n                                  {errors.clastName && (\r\n                                    <p>{errors.clastName.message}</p>\r\n                                  )}\r\n                                </FormGroup>\r\n                              </div>\r\n                            </div>\r\n\r\n                            <div className=\"row\">\r\n                              <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                  <Label for=\"contactPhoneNumber\">\r\n                                    Phone Number\r\n                                  </Label>\r\n                                  <PhoneInput\r\n                                    containerStyle={{\r\n                                      width: \"100%\",\r\n                                      border: \"1px solid #014d88\",\r\n                                    }}\r\n                                    inputStyle={{\r\n                                      width: \"100%\",\r\n                                      borderRadius: \"0px\",\r\n                                    }}\r\n                                    country={\"ng\"}\r\n                                    onlyCountries={[\"ng\"]}\r\n                                    masks={{\r\n                                      ng: \"...-...-....\",\r\n                                      at: \"(....) ...-....\",\r\n                                    }}\r\n                                    placeholder=\"(234)7099999999\"\r\n                                    value={getValues(\"contactPhoneNumber\")}\r\n                                    onChange={(e) => {\r\n                                      checkPhoneNumber(e, \"contactPhoneNumber\");\r\n                                    }}\r\n                                    isValid={(value, country) => {\r\n                                      if (value === country.countryCode) {\r\n                                        return true;\r\n                                      } else {\r\n                                        if (value.length < 13) {\r\n                                          errors.contactPhoneNumber = true;\r\n                                          return \"Enter a valid phone number\";\r\n                                        } else {\r\n                                          errors.contactPhoneNumber = false;\r\n                                          return true;\r\n                                        }\r\n                                      }\r\n                                    }}\r\n                                  />\r\n                                  {/*                                                                        <input\r\n                                                                            className=\"form-control\"\r\n                                                                            type=\"text\"\r\n                                                                            name=\"contactPhoneNumber\"\r\n                                                                            id=\"contactPhoneNumber\"\r\n                                                                            style={{border: \"1px solid #014d88\"}}\r\n                                                                            {...register(\"contactPhoneNumber\",{\r\n                                                                                onChange:(e)=>{checkPhoneNumber(e,'contactPhoneNumber')}\r\n                                                                            })}\r\n                                                                        />*/}\r\n                                  //\r\n                                  {errors.contactPhoneNumber && (\r\n                                    <p>{errors.contactPhoneNumber.message}</p>\r\n                                  )}\r\n                                </FormGroup>\r\n                              </div>\r\n\r\n                              <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                  <Label for=\"contactEmail\">Email</Label>\r\n                                  <input\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    name=\"contactEmail\"\r\n                                    id=\"contactEmail\"\r\n                                    style={{ border: \"1px solid #014d88\" }}\r\n                                    {...register(\"contactEmail\", {\r\n                                      onChange: (e) => {\r\n                                        checkPhoneNumber(e, \"contactEmail\");\r\n                                      },\r\n                                    })}\r\n                                  />\r\n                                  {errors.contactEmail && (\r\n                                    <p>{errors.contactEmail.message}</p>\r\n                                  )}\r\n                                </FormGroup>\r\n                              </div>\r\n\r\n                              <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                  <Label for=\"contactAddress\">Address</Label>\r\n                                  <input\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    name=\"contactAddress\"\r\n                                    id=\"contactAddress\"\r\n                                    style={{ border: \"1px solid #014d88\" }}\r\n                                    {...register(\"contactAddress\")}\r\n                                  />\r\n                                  {errors.contactAddress && (\r\n                                    <p>{errors.contactAddress.message}</p>\r\n                                  )}\r\n                                </FormGroup>\r\n                              </div>\r\n                            </div>\r\n\r\n                            {/*  <div className=\"row\">\r\n                                                                <div className=\"\">\r\n                                                                    <MatButton\r\n                                                                        type=\"button\"\r\n                                                                        variant=\"contained\"\r\n                                                                        color=\"primary\"\r\n                                                                        className={classes.button}\r\n                                                                        onClick={handleSaveRelationship}\r\n                                                                        style={{backgroundColor:'#014d88',color:'#fff'}}\r\n                                                                    >\r\n                                                                        Add\r\n                                                                    </MatButton>\r\n                                                                    <MatButton\r\n                                                                        type=\"button\"\r\n                                                                        variant=\"contained\"\r\n                                                                        color=\"secondary\"\r\n                                                                        className={classes.button}\r\n                                                                        onClick={handleCancelSaveRelationship}\r\n                                                                        style={{backgroundColor:'#992E62',color:'#fff'}}\r\n                                                                    >\r\n                                                                        Cancel\r\n                                                                    </MatButton>\r\n                                                                </div>\r\n                                                            </div> */}\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                  {/*\r\n                                    <div className=\"row\">\r\n                                        <MatButton\r\n                                            type=\"button\"\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            className={classes.button}\r\n                                            startIcon={<AddIcon />}\r\n                                            onClick={handleAddRelative}\r\n                                            style={{backgroundColor:'#014d88',fontWeight:\"bolder\"}}\r\n                                        >\r\n                                            Add a Relative/Next Of Kin\r\n                                        </MatButton>\r\n                                    </div>\r\n                                    */}\r\n                </div>\r\n              </div>\r\n\r\n              {saving ? <Spinner /> : \"\"}\r\n\r\n              <br />\r\n              {/*!checkHospitalNumberError &&\r\n                                <>\r\n                                    {userDetail ===null ? (\r\n                                            <MatButton\r\n                                                type=\"submit\"\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                className={classes.button}\r\n                                                startIcon={<SaveIcon />}\r\n                                                style={{backgroundColor:'#014d88',color:'#fff'}}\r\n                                            >\r\n                                                {!saving ? (\r\n                                                    <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                                                ) : (\r\n                                                    <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n                                                )}\r\n                                            </MatButton>\r\n                                        )\r\n                                        :\r\n                                        (\r\n                                            <MatButton\r\n                                                type=\"submit\"\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                className={classes.button}\r\n                                                startIcon={<SaveIcon />}\r\n                                                style={{backgroundColor:'#014d88',color:'#fff'}}\r\n                                            >\r\n                                                {!saving ? (\r\n                                                    <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                                                ) : (\r\n                                                    <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n                                                )}\r\n                                            </MatButton>\r\n                                        )\r\n                                    }\r\n                                </>\r\n\r\n                            }\r\n\r\n                            <MatButton\r\n                                variant=\"contained\"\r\n                                className={classes.button}\r\n                                startIcon={<CancelIcon />}\r\n                                onClick={handleCancel}\r\n                                style={{backgroundColor:'#992E62',color:'#fff'}}\r\n                            >\r\n                                <span style={{ textTransform: \"capitalize\" }}>Cancel</span>\r\n                            </MatButton> */}\r\n            </Form>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n      <Modal\r\n        show={open}\r\n        toggle={toggle}\r\n        className=\"fade\"\r\n        size=\"sm\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        backdrop=\"static\"\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Notification!\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <h4>Are you Sure of the Age entered?</h4>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            onClick={toggle}\r\n            style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n          >\r\n            Yes\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ViewPatient;\r\n","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\biometrics\\index.js",["272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295"],"import React, { useCallback, useEffect, useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport { TiArrowBack } from \"react-icons/ti\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  FormControl,\r\n  Grid,\r\n  MenuItem,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport axios from \"axios\";\r\nimport { token, url as baseUrl } from \"../../../../api\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport PatientsCard from \"../PatientsCard\";\r\nimport ClientDashboard from \"./index\";\r\nimport PersonDemographics from \"../PersonDemographics\";\r\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\r\nimport { Tab } from \"semantic-ui-react\";\r\nimport MaterialTable from \"material-table\";\r\nimport Biometrics from \"../Biometrics\";\r\nimport ReCaptureBiometric from \"../ReCaptureBiometric\";\r\nimport PreviousRecapture from \"../PreviousRecapture\";\r\nimport moment from \"moment\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    marginBottom: 20,\r\n    flexGrow: 1,\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  icon: {\r\n    verticalAlign: \"bottom\",\r\n    height: 20,\r\n    width: 20,\r\n  },\r\n  details: {\r\n    alignItems: \"center\",\r\n  },\r\n  column: {\r\n    flexBasis: \"20.33%\",\r\n  },\r\n  helper: {\r\n    borderLeft: `2px solid ${theme.palette.divider}`,\r\n    padding: `${theme.spacing(1)}px ${theme.spacing(1) * 2}px`,\r\n  },\r\n  link: {\r\n    color: theme.palette.primary.main,\r\n    textDecoration: \"none\",\r\n    \"&:hover\": {\r\n      textDecoration: \"underline\",\r\n    },\r\n  },\r\n  checkinModal: {\r\n    \"& .modal-dialog\": {\r\n      maxWidth: \"1000px\",\r\n    },\r\n    \"& .ui.label\": {\r\n      backgroundColor: \"#fff\",\r\n      fontSize: \"16px\",\r\n      color: \"#014d88\",\r\n      fontWeight: \"bold\",\r\n      textAlign: \"left\",\r\n    },\r\n    \"& .card-title\": {\r\n      color: \"#fff\",\r\n      fontWeight: \"bold\",\r\n    },\r\n    \"& .form-control\": {\r\n      borderRadius: \"0.25rem\",\r\n      height: \"41px\",\r\n    },\r\n    \"& .card-header:first-child\": {\r\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\r\n    },\r\n    \"& .dropdown-toggle::after\": {\r\n      display: \" block !important\",\r\n    },\r\n    \"& select\": {\r\n      \"-webkit-appearance\": \"listbox !important\",\r\n    },\r\n    \"& p\": {\r\n      color: \"red\",\r\n    },\r\n    \"& label\": {\r\n      fontSize: \"14px\",\r\n      color: \"#014d88\",\r\n      fontWeight: \"bold\",\r\n    },\r\n  },\r\n  checkInDatePicker: {\r\n    \"& .MuiFormControl-root.MuiTextField-root\": {\r\n      border: \"1px solid #eee\",\r\n    },\r\n  },\r\n}));\r\n\r\nfunction Index(props) {\r\n  const userDetail =\r\n    props.location && props.location.state ? props.location.state.user : null;\r\n  const [loading, setLoading] = useState(\"\");\r\n  let history = useHistory();\r\n  const classes = useStyles();\r\n  const patientObj =\r\n    history.location && history.location.state\r\n      ? history.location.state.patientObj\r\n      : {};\r\n  const permissions =\r\n    history.location && history.location.state\r\n      ? history.location.state.permissions\r\n      : [];\r\n  const [patientBiometricStatus, setPatientBiometricStatus] = useState(\r\n    patientObj.biometricStatus\r\n  );\r\n  const [biometricsModuleInstalled, setBiometricsModuleInstalled] =\r\n    useState(false);\r\n  const [patientVisits, setPatientVisits] = useState([]);\r\n  const [checkinStatus, setCheckinStatus] = useState(false);\r\n\r\n  const updatePatientBiometricStatus = (bioStatus) => {\r\n    setPatientBiometricStatus(bioStatus);\r\n  };\r\n\r\n  const panes = [\r\n    // {\r\n    //   menuItem:\r\n    //     (permissions.includes(\"view_patient_appointment\") &&\r\n    //       biometricsModuleInstalled) ||\r\n    //     (permissions.includes(\"all_permission\") && biometricsModuleInstalled)\r\n    //       ? \"Biometrics\"\r\n    //       : \"\",\r\n    //   render: () =>\r\n    //     permissions.includes(\"view_patient_appointment\") ||\r\n    //     permissions.includes(\"all_permission\") ? (\r\n    //       <Tab.Pane>\r\n    //         <div style={{ minHeight: 400, width: \"100%\" }}>\r\n    //           <Biometrics\r\n    //             patientObj={patientObj}\r\n    //             age={patientObj.dateOfBirth}\r\n    //             patientId={patientObj.id}\r\n    //             updatePatientBiometricStatus={updatePatientBiometricStatus}\r\n    //           />\r\n    //         </div>\r\n    //       </Tab.Pane>\r\n    //     ) : (\r\n    //       \"\"\r\n    //     ),\r\n    // },\r\n\r\n    {\r\n      menuItem: \"Recapture Biometrics\",\r\n      render: () => (\r\n        <Tab.Pane>\r\n          <div style={{ minHeight: 400, width: \"100%\" }}>\r\n            <PreviousRecapture\r\n              patientObj={patientObj}\r\n              age={patientObj.dateOfBirth}\r\n              patientId={patientObj.id}\r\n              updatePatientBiometricStatus={updatePatientBiometricStatus}\r\n            />\r\n          </div>\r\n        </Tab.Pane>\r\n      ),\r\n    },\r\n    // {\r\n    //   menuItem: \"Recapture\",\r\n    //   render: () => (\r\n    //     <Tab.Pane>\r\n    //       <div style={{ minHeight: 400, width: \"100%\" }}>\r\n    //         <ReCaptureBiometric\r\n    //           patientObj={patientObj}\r\n    //           age={patientObj.dateOfBirth}\r\n    //           patientId={patientObj.id}\r\n    //           updatePatientBiometricStatus={updatePatientBiometricStatus}\r\n    //         />\r\n    //       </div>\r\n    //     </Tab.Pane>\r\n    //   ),\r\n    // },\r\n  ];\r\n\r\n  const checkForBiometricsModule = () => {\r\n    axios\r\n      .get(`${baseUrl}modules/check?moduleName=biometric`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        if (response.data === true) {\r\n          setBiometricsModuleInstalled(true);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    checkForBiometricsModule();\r\n  }, []);\r\n  return (\r\n    <div className={classes.root}>\r\n      <div\r\n        className=\"mb-6 col-md-6\"\r\n        style={{ paddingTop: \"10px\", paddingBottom: \"10px\" }}\r\n      >\r\n        <Breadcrumbs aria-label=\"breadcrumb\">\r\n          <Typography style={{ color: \"#992E62\" }}>Patient</Typography>\r\n          <Typography style={{ color: \"#014d88\" }}>Dashboard</Typography>\r\n        </Breadcrumbs>\r\n      </div>\r\n      <Card>\r\n        <CardContent>\r\n          {/* <PersonDemographics patientObj={patientObj} permissions={permissions} patientBiometricStatus={patientObj.biometricStatus}/> */}\r\n          <PatientsCard\r\n            patientObj={patientObj}\r\n            permissions={permissions}\r\n            patientBiometricStatus={patientObj.biometricStatus}\r\n          />\r\n          <Card style={{ marginTop: \"5px\" }}>\r\n            <div>\r\n              <Link to={\"/\"}>\r\n                <MatButton\r\n                  className=\" float-right mr-1\"\r\n                  variant=\"contained\"\r\n                  floated=\"left\"\r\n                  startIcon={<TiArrowBack />}\r\n                  style={{\r\n                    backgroundColor: \"rgb(153, 46, 98)\",\r\n                    color: \"#fff\",\r\n                    height: \"35px\",\r\n                  }}\r\n                >\r\n                  <span style={{ textTransform: \"capitalize\" }}>Back</span>\r\n                </MatButton>\r\n              </Link>\r\n            </div>\r\n            <CardContent>\r\n              <Tab panes={panes} />\r\n            </CardContent>\r\n          </Card>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Index;\r\n","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\index.js",["296","297","298","299","300","301","302","303"],"import React, { useEffect, useState } from \"react\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport { Card, CardBody } from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { FaUserPlus } from \"react-icons/fa\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport axios from \"axios\";\r\nimport { token, url as baseUrl } from \"../../../api\";\r\nimport { Tab } from \"semantic-ui-react\";\r\nimport PatientBiometrics from \"./PatientBiometrics\";\r\nimport PatientList from \"./Home/PatientList\";\r\nimport BiometricsCapture from \"./Home/Biometrics\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\r\nimport CheckedInPatients from \"./Home/CheckedInPatients\";\r\nimport MigrationDQA from \"./MigrationDQA\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n    \"& a\": {\r\n      textDecoration: \"none !important\",\r\n    },\r\n  },\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n}));\r\nfunction Index(props) {\r\n  const classes = useStyles();\r\n  const [patients, setPatients] = useState([]);\r\n  const [permissions, setPermissions] = useState([]);\r\n  const [loading, setLoading] = useState(\"\");\r\n  const [modal, setModal] = useState(false);\r\n  const [patient, setPatient] = useState(false);\r\n  const [enablePPI, setEnablePPI] = useState(true);\r\n  const toggle = (id) => {\r\n    const patient = patients.find((obj) => obj.id == id);\r\n    setPatient(patient);\r\n    setModal(!modal);\r\n  };\r\n  useEffect(() => {\r\n    userPermission();\r\n  }, []);\r\n  //Get list of Finger index\r\n  const userPermission = () => {\r\n    axios\r\n      .get(`${baseUrl}account`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setPermissions(response.data.permissions);\r\n      })\r\n      .catch((error) => {});\r\n  };\r\n  const enablePPIColumns = () => {\r\n    setEnablePPI(!enablePPI);\r\n  };\r\n  const panes = [\r\n    {\r\n      menuItem: \"Clients\",\r\n      render: () => (\r\n        <Tab.Pane>\r\n          <PatientList permissions={permissions} />\r\n        </Tab.Pane>\r\n      ),\r\n    },\r\n    {\r\n      menuItem: \"Checked-In\",\r\n      render: () => (\r\n        <Tab.Pane>\r\n          <CheckedInPatients permissions={permissions} />\r\n        </Tab.Pane>\r\n      ),\r\n    },\r\n    {\r\n      menuItem: \"Patient Biometrics\",\r\n      render: () => (\r\n        <Tab.Pane>\r\n          <BiometricsCapture permissions={permissions} />\r\n        </Tab.Pane>\r\n      ),\r\n    },\r\n    //    { menuItem: 'Biometrics Capture', render: () =>\r\n    //            <Tab.Pane>\r\n    //                <PatientBiometrics permissions={permissions}/>\r\n    //            </Tab.Pane>\r\n    //    },\r\n    {\r\n      menuItem: \"Migration DQA\",\r\n      render: () => (\r\n        <Tab.Pane>\r\n          <MigrationDQA permissions={permissions} />\r\n        </Tab.Pane>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <ToastContainer autoClose={3000} hideProgressBar />\r\n      {permissions.length > 0 && (\r\n        <Card>\r\n          <CardBody>\r\n            <div className=\"row mb-12 col-md-12\">\r\n              <div className=\"mb-6 col-md-6\">\r\n                <Breadcrumbs aria-label=\"breadcrumb\">\r\n                  <Typography style={{ color: \"#992E62\" }}>Patient</Typography>\r\n                  <Typography style={{ color: \"#014d88\" }}>Home</Typography>\r\n                </Breadcrumbs>\r\n              </div>\r\n              <div className=\"mb-6 col-md-6\">\r\n                {permissions.includes(\"view_patient\") ||\r\n                permissions.includes(\"all_permission\") ? (\r\n                  <Link to={\"register-patient\"}>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      className=\" float-right mr-1\"\r\n                      startIcon={<FaUserPlus size=\"25\" />}\r\n                      style={{ backgroundColor: \"#014d88\" }}\r\n                    >\r\n                      <span\r\n                        style={{\r\n                          textTransform: \"capitalize\",\r\n                          fontWeight: \"bolder\",\r\n                        }}\r\n                      >\r\n                        New Client\r\n                      </span>\r\n                    </Button>\r\n                  </Link>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            <Tab panes={panes} />\r\n          </CardBody>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Index;\r\n","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\ClientDashboard\\index.js",["304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323"],"import React, {useCallback, useEffect, useState} from 'react';\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {Button, Card, CardContent, FormControl, Grid, MenuItem, Paper, TextField, Typography} from \"@mui/material\";\r\nimport axios from \"axios\";\r\nimport {token, url as baseUrl} from \"../../../../api\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport PatientCard from \"../PatientCard\";\r\nimport ClientDashboard from \"./index\";\r\nimport PersonDemographics from \"../PersonDemographics\";\r\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\r\nimport CheckIn from \"./CheckIn\";\r\nimport {Tab} from \"semantic-ui-react\";\r\nimport MaterialTable from \"material-table\";\r\nimport Biometrics from \"../Biometrics\";\r\nimport moment from \"moment\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        marginBottom: 20,\r\n        flexGrow: 1,\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n    },\r\n    secondaryHeading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    icon: {\r\n        verticalAlign: 'bottom',\r\n        height: 20,\r\n        width: 20,\r\n    },\r\n    details: {\r\n        alignItems: 'center',\r\n    },\r\n    column: {\r\n        flexBasis: '20.33%',\r\n    },\r\n    helper: {\r\n        borderLeft: `2px solid ${theme.palette.divider}`,\r\n        padding: `${theme.spacing(1)}px ${theme.spacing(1) * 2}px`,\r\n    },\r\n    link: {\r\n        color: theme.palette.primary.main,\r\n        textDecoration: 'none',\r\n        '&:hover': {\r\n            textDecoration: 'underline',\r\n        },\r\n    },\r\n    checkinModal:{\r\n        \"& .modal-dialog\":{\r\n            maxWidth:\"1000px\"\r\n        },\r\n        \"& .ui.label\":{\r\n            backgroundColor:\"#fff\",\r\n            fontSize:'16px',\r\n            color:'#014d88',\r\n            fontWeight:'bold',\r\n            textAlign:'left'\r\n        },\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n    },\r\n    checkInDatePicker:{\r\n        '& .MuiFormControl-root.MuiTextField-root':{\r\n            border:'1px solid #eee'\r\n        }\r\n    }\r\n}));\r\nfunction Index(props) {\r\n    const userDetail = props.location && props.location.state ? props.location.state.user : null;\r\n    const [loading, setLoading] = useState('');\r\n    let history = useHistory();\r\n    const classes = useStyles();\r\n    const patientObj = history.location && history.location.state ? history.location.state.patientObj : {};\r\n    console.log(\"client  dashboard\", patientObj)\r\n    const permissions = history.location && history.location.state ? history.location.state.permissions : [];\r\n    const [patientBiometricStatus, setPatientBiometricStatus]= useState(patientObj.biometricStatus);\r\n\r\n    const [biometricsModuleInstalled,setBiometricsModuleInstalled]=useState(false);\r\n    const [patientVisits, setPatientVisits]= useState([]);\r\n    const [checkinStatus, setCheckinStatus]= useState(false)\r\n\r\n    const updatePatientBiometricStatus = (bioStatus) =>{\r\n        setPatientBiometricStatus(bioStatus);\r\n    }\r\n    const panes = [\r\n        { menuItem: 'Visits', render: () =>\r\n                <Tab.Pane>\r\n                    <MaterialTable\r\n                        title=\"\"\r\n                        columns={[\r\n                            {\r\n                                title: \"Check-In Date\",\r\n                                field: \"checkInDate\", filtering: false,\r\n                                headerStyle: {\r\n                                    backgroundColor: \"#039be5\",\r\n                                    border:'2px solid #fff',\r\n                                    paddingRight:'30px'\r\n                                }\r\n                            },\r\n                            { title: \"Check-Out Date\", field: \"checkOutDate\", filtering: false  },\r\n                            { title: \"Service\", field: \"service\", filtering: false  },\r\n                            { title: \"Status\", field: \"status\", filtering: false },\r\n                        ]}\r\n                        isLoading={loading}\r\n                        data={patientVisits.map((row) => ({\r\n                            checkInDate: moment(row.checkInDate).format(\"YYYY-MM-DD h:mm a\"),\r\n                            checkOutDate: row.checkOutDate?moment(row.checkOutDate).format(\"YYYY-MM-DD h:mm a\"):\"Visit Ongoing\",\r\n                            service:row.service,\r\n                            status:(<h6 style={{color:row.status ==='COMPLETED' ? 'green' : 'red'}}>{row.status}</h6>),\r\n\r\n                        }))}\r\n\r\n                        options={{\r\n                            headerStyle: {\r\n                                backgroundColor: \"#014d88\",\r\n                                color: \"#fff\",\r\n                                fontSize:'16px',\r\n                                padding:'10px',\r\n                                fontWeight:'bold'\r\n                            },\r\n                            rowStyle: {\r\n                                color: 'rgba(0,0,0,.87)',\r\n                                fontFamily:`'poppins', sans-serif`\r\n                            },\r\n                            searchFieldStyle: {\r\n                                width : '200%',\r\n                                margingLeft: '250px',\r\n                            },\r\n                            filtering: false,\r\n                            exportButton: false,\r\n                            searchFieldAlignment: 'left',\r\n                            pageSizeOptions:[10,20,100],\r\n                            pageSize:10,\r\n                            debounceInterval: 400\r\n                        }}\r\n                    />\r\n                </Tab.Pane>\r\n        },\r\n\r\n        { menuItem: permissions.includes('view_patient_appointment') && biometricsModuleInstalled || permissions.includes(\"all_permission\")  && biometricsModuleInstalled? 'Biometrics' : \"\", render: () =>\r\n                permissions.includes('view_patient_appointment') || permissions.includes(\"all_permission\") ?\r\n                    <Tab.Pane>\r\n                        <div style={{ minHeight: 400, width: '100%' }}>\r\n                            <Biometrics age={patientObj.dateOfBirth} patientId={patientObj.id} updatePatientBiometricStatus={updatePatientBiometricStatus}/>\r\n                        </div>\r\n                    </Tab.Pane>\r\n                    :\"\"\r\n        }\r\n\r\n\r\n\r\n    ];\r\n    const checkForBiometricsModule =()=>{\r\n        axios\r\n            .get(`${baseUrl}modules/check?moduleName=biometric`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                if(response.data===true){\r\n                    setBiometricsModuleInstalled(true);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                //console.log(error);\r\n            });\r\n\r\n    }\r\n    const loadPatientVisits = useCallback(async () => {\r\n        try {\r\n            const response = await axios.get(`${baseUrl}patient/visit/visit-by-patient/${patientObj.id}`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            setPatientVisits(response.data);\r\n            response.data.map((visits)=> {\r\n                if(visits.checkOutDate===null){\r\n                    setCheckinStatus(true)\r\n                }\r\n            })\r\n\r\n\r\n        } catch (e) {\r\n            await Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: 'An error occurred fetching services!',\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        loadPatientVisits();\r\n        checkForBiometricsModule();\r\n    }, []);\r\n    return (\r\n        <div className={classes.root}>\r\n            <div className=\"mb-6 col-md-6\" style={{paddingTop:\"10px\",paddingBottom:'10px'}} >\r\n                <Breadcrumbs aria-label=\"breadcrumb\">\r\n                    <Typography style={{color:'#992E62'}}>Patient</Typography>\r\n                    <Typography style={{color:'#014d88'}}>Dashboard</Typography>\r\n                </Breadcrumbs>\r\n\r\n            </div>\r\n            <Card>\r\n                <CardContent>\r\n                    <PersonDemographics patientObj={patientObj} permissions={permissions} patientBiometricStatus={patientObj.biometricStatus}/>\r\n                    <Card style={{marginTop:'5px'}}>\r\n                        <CardContent>\r\n                            <CheckIn props={props}/>\r\n                            <Tab panes={panes} />\r\n                        </CardContent>\r\n                    </Card>\r\n                </CardContent>\r\n            </Card>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Index;","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\PatientCard.js",["324","325","326","327","328","329","330","331","332","333","334"],"import React,{useState, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport {Accordion, AccordionActions, AccordionDetails, AccordionSummary} from '@material-ui/core';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport {Button, Label} from 'semantic-ui-react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport {Col, Row, Modal} from \"reactstrap\";\r\nimport CaptureBiometric from './CaptureBiometric';\r\nimport axios from \"axios\";\r\nimport {token, url as baseUrl} from \"../../../api\";\r\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n    },\r\n    secondaryHeading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    icon: {\r\n        verticalAlign: 'bottom',\r\n        height: 20,\r\n        width: 20,\r\n    },\r\n    details: {\r\n        alignItems: 'center',\r\n    },\r\n    column: {\r\n        flexBasis: '20.33%',\r\n    },\r\n    helper: {\r\n        borderLeft: `2px solid ${theme.palette.divider}`,\r\n        padding: `${theme.spacing(1)}px ${theme.spacing(1) * 2}px`,\r\n    },\r\n    link: {\r\n        color: theme.palette.primary.main,\r\n        textDecoration: 'none',\r\n        '&:hover': {\r\n            textDecoration: 'underline',\r\n        },\r\n    },\r\n});\r\n\r\nfunction PatientCard(props) {\r\n    const { classes } = props;\r\n    const patientObj = props.patientObj ? props.patientObj : {};\r\n    \r\n    const permissions= props.permissions ? props.permissions : [];\r\n    const [modal, setModal] = useState(false) //Modal to collect sample\r\n    const [patientBiometricStatus, setPatientBiometricStatus]= useState(props.patientBiometricStatus);\r\n    const toggleModal = () => setModal(!modal)\r\n\r\n    const [biometricStatus, setBiometricStatus] = useState(false);\r\n    const [devices, setDevices] = useState([]);\r\n    useEffect(() => {\r\n        setPatientBiometricStatus(props.patientBiometricStatus)\r\n        TemplateType();\r\n    }, [props.patientBiometricStatus]);\r\n    //Get list of KP\r\n    const TemplateType =()=>{\r\n        axios\r\n            .get(`${baseUrl}modules/check?moduleName=biometric`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                //console.log(response);\r\n                setBiometricStatus(response.data);\r\n                if(response.data===true){\r\n                    axios\r\n                        .get(`${baseUrl}biometrics/devices`,\r\n                            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n                        )\r\n                        .then((response) => {\r\n                            setDevices(response.data);\r\n\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log(error)\r\n                        });\r\n\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                //console.log(error);\r\n            });\r\n\r\n    }\r\n    const getHospitalNumber = (identifier) => {\r\n        const hospitalNumber = identifier.identifier.find(obj => obj.type == 'HospitalNumber');\r\n        return hospitalNumber ? hospitalNumber.value : '';\r\n    };\r\n\r\n    const calculate_age = dob => {\r\n        const today = new Date();\r\n        const dateParts = dob.split(\"-\");\r\n        const birthDate = new Date(dob); // create a date object directlyfrom`dob1`argument\r\n        let age_now = today.getFullYear() - birthDate.getFullYear();\r\n        const m = today.getMonth() - birthDate.getMonth();\r\n        if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n            age_now--;\r\n        }\r\n        if (age_now === 0) {\r\n            return m + \" month(s)\";\r\n        }\r\n        return age_now + \" year(s)\";\r\n    };\r\n\r\n    const getPhone = (contactPoint) => {\r\n        const phoneContact = contactPoint.contactPoint.find(obj => obj.type == 'phone');\r\n        return phoneContact ? phoneContact.value : '';\r\n    };\r\n\r\n    const getAddress = (address) => {\r\n        const city = address && address.address && address.address.length > 0 ? `${address.address[0].line[0]}, ${address.address[0].city}` : null;\r\n        return city;\r\n    };\r\n\r\n\r\n    const handleBiometricCapture = (id) => {\r\n        let patientObjID= id\r\n        setModal(!modal)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n\r\n            <Breadcrumbs aria-label=\"breadcrumb\">\r\n                <Typography style={{color:'#992E62'}}>Patient</Typography>\r\n                <Typography style={{color:'#014d88'}}>Dashboard</Typography>\r\n            </Breadcrumbs>\r\n            <Accordion defaultExpanded>\r\n                <AccordionSummary>\r\n\r\n                    <Row>\r\n                        <Col md={11}>\r\n                            <Row className={\"mt-1\"}>\r\n                                <Col md={12} className={classes.root2} >\r\n                                    <b style={{fontSize: \"25px\", color:'rgb(153, 46, 98)'}}>\r\n                                        {patientObj.surname + \", \" + patientObj.firstName + \" \" + patientObj.otherName !== null ? patientObj.otherName : \" \"}\r\n                                    </b>\r\n\r\n                                </Col>\r\n                                <Col md={4} className={classes.root2} style={{marginTop:\"10px\"}}>\r\n                                    <span style={{color:'#000'}}>\r\n                                        {\" \"}\r\n                                        Hospital Number : <b style={{color:'#0B72AA'}}>{getHospitalNumber(patientObj.identifier) }</b>\r\n                                    </span>\r\n                                </Col>\r\n\r\n                                <Col md={4} className={classes.root2} style={{marginTop:\"10px\"}}>\r\n                                    <span style={{color:'#000'}}>\r\n                                        Date Of Birth : <b style={{color:'#0B72AA'}}>{patientObj.dateOfBirth }</b>\r\n                                    </span>\r\n                                </Col>\r\n                                <Col md={4} className={classes.root2} style={{marginTop:\"10px\"}}>\r\n                                <span style={{color:'#000'}}>\r\n                                    {\" \"}\r\n                                    Age : <b style={{color:'#0B72AA'}}>{calculate_age(patientObj.dateOfBirth) }</b>\r\n                                </span>\r\n                                </Col>\r\n                                <Col md={4} style={{marginTop:\"10px\"}}>\r\n                                    <span  style={{color:'#000'}}>\r\n                                        {\" \"}\r\n                                        Sex :{\" \"}\r\n                                        <b style={{color:'#0B72AA',fontFamily:`'poppins', sans-serif`,fontWeight:'bolder'}}>{patientObj.sex }</b>\r\n                                    </span>\r\n\r\n                                </Col>\r\n                                <Col md={4} className={classes.root2} style={{marginTop:\"10px\"}}>\r\n                                <span style={{color:'#000'}}>\r\n                                    {\" \"}\r\n                                    Phone Number : <b style={{color:'#0B72AA'}}>{getPhone(patientObj.contactPoint)}</b>\r\n                                </span>\r\n                                </Col>\r\n                                <Col md={4} className={classes.root2} style={{marginTop:\"10px\"}}>\r\n                                <span style={{color:'#000'}}>\r\n                                    {\" \"}\r\n                                    Address : <b style={{color:'#0B72AA'}}>{getAddress(patientObj.address)} </b>\r\n                                </span>\r\n\r\n                                </Col>\r\n\r\n\r\n                            </Row>\r\n                        </Col>\r\n\r\n\r\n\r\n                    </Row>\r\n\r\n                </AccordionSummary>\r\n                <AccordionDetails className={classes.details}>\r\n                    {biometricStatus===true ? (\r\n                            <>\r\n                                <div >\r\n                                    <Typography variant=\"caption\">\r\n                                        <Label  style={{height:'30px', fontSize:'14px'}} color={patientBiometricStatus===true? \"green\" : \"red\"} size={\"large\"}>\r\n                                            Biometric Status\r\n                                            <Label.Detail>{patientBiometricStatus===true? \"Captured\" : \"Not Captured\"}</Label.Detail>\r\n                                        </Label>\r\n                                        {patientBiometricStatus!==true ? (\r\n\r\n                                                <>\r\n                                                    {permissions.includes('patient_check_in') || permissions.includes(\"all_permission\") ? (\r\n                                                            <>\r\n                                                                <Label style={{height:'30px', fontSize:'14px'}} as='a' color='teal' onClick={() => handleBiometricCapture(patientObj.id)} tag>\r\n                                                                    Capture Now\r\n                                                                </Label>\r\n                                                            </>\r\n                                                        )\r\n                                                        :\"\"\r\n                                                    }\r\n                                                </>\r\n                                            )\r\n                                            :\"\"\r\n                                        }\r\n\r\n                                    </Typography>\r\n                                </div>\r\n                            </>\r\n                        )\r\n                        :\r\n                        <>\r\n                            <div >\r\n                                <Typography variant=\"caption\">\r\n                                    <Label color={\"red\"} style={{height:'30px', fontSize:'14px'}}>\r\n                                        Biometrics Module Not Install\r\n\r\n                                    </Label>\r\n\r\n                                </Typography>\r\n                            </div>\r\n                        </>\r\n                    }\r\n                </AccordionDetails>\r\n            </Accordion>\r\n{/*\r\n            <CaptureBiometric  modalstatus={modal} togglestatus={toggleModal} patientId={patientObj.id} biometricDevices={devices} setPatientBiometricStatus={setPatientBiometricStatus} />\r\n*/}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nPatientCard.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(PatientCard);","C:\\Users\\USER\\Data.fi\\patient-module\\src\\api.js",[],"C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\Biometrics.js",["335","336","337","338","339","340","341","342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Form,\r\n  Row,\r\n  Label,\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  FormGroup,\r\n  CardHeader,\r\n  Input,\r\n  Badge,\r\n} from \"reactstrap\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Select from \"react-select\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport FingerprintIcon from \"@material-ui/icons/Fingerprint\";\r\nimport { Button2, Icon, List } from \"semantic-ui-react\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport ThumbUpIcon from \"@material-ui/icons/ThumbUp\";\r\nimport axios from \"axios\";\r\nimport { token, url as baseUrl } from \"../../../api\";\r\nimport RestartAltIcon from \"@mui/icons-material/RestartAlt\";\r\n\r\nimport { green, red } from \"@mui/material/colors\";\r\nimport { Dimmer, Loader, Image, Segment } from \"semantic-ui-react\";\r\n\r\nimport Box from \"@mui/material/Box\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Fab from \"@mui/material/Fab\";\r\nimport CheckIcon from \"@mui/icons-material/Check\";\r\n//import SaveIcon from '@mui/icons-material/Save';\r\n// import LinearProgress from '@mui/material/LinearProgress';\r\nimport Typography from \"@mui/material/Typography\";\r\n// import CancelIcon from '@mui/icons-material/Cancel';\r\n// import ModalImage from \"react-modal-image\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport { Alert, AlertTitle } from \"@material-ui/lab\";\r\nimport fingerprintimage from \"../images/fingerprintimage.png\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport UpgradeIcon from \"@mui/icons-material/Upgrade\";\r\nimport _ from \"lodash\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    \"& .dropdown-toggle::after, .dropleft .dropdown-toggle::before, .dropright .dropdown-toggle::before, .dropup .dropdown-toggle::after\":\r\n      {\r\n        fontFamily: \"FontAwesome\",\r\n        border: \"0\",\r\n        verticalAlign: \"middle\",\r\n        marginLeft: \".25em\",\r\n        lineHeight: \"1\",\r\n      },\r\n    \"& .dropdown-menu .dropdown-item\": {\r\n      fontSize: \"14px\",\r\n      color: \"#014d88\",\r\n      padding: \"0.3rem 1.5rem\",\r\n      fontWeight: \"bold\",\r\n    },\r\n    \"& .mt-4\": {\r\n      marginTop: \"28px !important\",\r\n    },\r\n    \"& .form-control\": {\r\n      color: \"#992E62\",\r\n    },\r\n    \"& .form-control:focus\": {\r\n      color: \"#014d88\",\r\n    },\r\n    \"& .sharp \": {\r\n      \"min-width\": \"35px\",\r\n      padding: \"5px\",\r\n      height: \"35px\",\r\n      \"min-height\": \"35px\",\r\n    },\r\n  },\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  /*    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20,\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        \"& > *\": {\r\n            margin: theme.spacing(1),\r\n        },\r\n    },\r\n    input: {\r\n        display: \"none\",\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"12.8px\",\r\n    },*/\r\n}));\r\n\r\nlet checkUrl = \"\";\r\n\r\nfunction Biometrics(props) {\r\n  //console.log(props.age);\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n  const permissions =\r\n    history.location && history.location.state\r\n      ? history.location.state.permissions\r\n      : [];\r\n  const [biometricDevices, setbiometricDevices] = useState([]);\r\n  const [objValues, setObjValues] = useState({\r\n    biometricType: \"FINGERPRINT\",\r\n    patientId: props.patientId,\r\n    templateType: \"\",\r\n    device: \"\",\r\n    reason: \"\",\r\n    age: \"\",\r\n  });\r\n  const [fingerType, setFingerType] = useState([]);\r\n  const [devices, setDevices] = useState([]);\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [pageLoading, setPageLoading] = useState(false);\r\n  const [showCapture, setshowCapture] = React.useState(false);\r\n  const [tryAgain, setTryAgain] = React.useState(false);\r\n  const [success, setSuccess] = React.useState(false);\r\n  const [errors, setErrors] = useState({});\r\n  const [storedBiometrics, setStoredBiometrics] = useState([]);\r\n  // const [responseImage, setResponseImage] = useState(\"\")\r\n  const [capturedFingered, setCapturedFingered] = useState([]);\r\n  const [selectedFingers, setSelectedFingers] = useState([]);\r\n  const [imageQuality, setImageQuality] = useState(false);\r\n  const [isNewStatus, setIsNewStatus] = useState(true);\r\n\r\n  const calculate_age = (dob) => {\r\n    const today = new Date();\r\n    const dateParts = dob.split(\"-\");\r\n    const birthDate = new Date(dob); // create a date object directlyfrom`dob1`argument\r\n    let age_now = today.getFullYear() - birthDate.getFullYear();\r\n    const m = today.getMonth() - birthDate.getMonth();\r\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n      age_now--;\r\n    }\r\n    if (age_now === 0) {\r\n      return m + \" month(s)\";\r\n    }\r\n    return age_now;\r\n  };\r\n\r\n  const buttonSx = {\r\n    ...(success && {\r\n      bgcolor: green[500],\r\n      \"&:hover\": {\r\n        bgcolor: green[700],\r\n      },\r\n    }),\r\n  };\r\n\r\n  const getPersonBiometrics = async () => {\r\n    const fingersCodeset = await axios.get(\r\n      `${baseUrl}application-codesets/v2/BIOMETRIC_CAPTURE_FINGERS`,\r\n      { headers: { Authorization: `Bearer ${token}` } }\r\n    );\r\n\r\n    axios\r\n      .get(`${baseUrl}biometrics/person/${props.patientId}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then(async (response) => {\r\n        console.log(\"patient bio\", response.data);\r\n        if (response.data.length > 0) {\r\n          setStoredBiometrics(response.data);\r\n          setPageLoading(true);\r\n          let personCapturedFingers = _.uniq(\r\n            _.map(response.data, \"templateType\")\r\n          );\r\n          setSelectedFingers(personCapturedFingers);\r\n          let biometricItems = _.map(fingersCodeset.data, (item) => {\r\n            return _.extend({}, item, {\r\n              captured: personCapturedFingers.includes(item.display),\r\n            });\r\n          });\r\n          setFingerType(biometricItems);\r\n        } else {\r\n          let biometricItems = _.map(fingersCodeset.data, (item) => {\r\n            return _.extend({}, item, { captured: false });\r\n            //return item.captured = personCapturedFingers.includes(item.display)\r\n          });\r\n          setFingerType(biometricItems);\r\n        }\r\n      })\r\n      .catch(async (error) => {\r\n        // console.log(\"getPersonBiometrics error\")\r\n        // console.log(error)\r\n\r\n        let biometricItems = _.map(fingersCodeset.data, (item) => {\r\n          return _.extend({}, item, { captured: false });\r\n        });\r\n        setFingerType(biometricItems);\r\n        setPageLoading(true);\r\n      });\r\n  };\r\n\r\n  const clear_storelist = () => {\r\n    axios\r\n      .post(\r\n        `${baseUrl}biometrics/store-list/${props.patientId}`,\r\n        props.patientId,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        console.log(\"cleared store\");\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"cleared store error\");\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    clear_storelist();\r\n    getPersonBiometrics();\r\n    TemplateType();\r\n    //biometricFingers();\r\n  }, []);\r\n  //Get list of KP\r\n  const TemplateType = () => {\r\n    axios\r\n      .get(`${baseUrl}modules/check?moduleName=biometric`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        if (response.data === true) {\r\n          axios\r\n            .get(`${baseUrl}biometrics/devices?active=true`, {\r\n              headers: { Authorization: `Bearer ${token}` },\r\n            })\r\n            .then((response) => {\r\n              //console.log(response.data.find((x) => x.active === true));\r\n              setDevices(response.data.find((x) => x.active === true));\r\n              setbiometricDevices(response.data);\r\n            })\r\n            .catch((error) => {\r\n              console.log(error);\r\n            });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n\r\n  //Get list of Finger index\r\n  const biometricFingers = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/BIOMETRIC_CAPTURE_FINGERS`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        console.log(\"er\", response);\r\n        setFingerType(response.data);\r\n      })\r\n      .catch((error) => {});\r\n  };\r\n  //check if device is plugged or not\r\n  const checkDevice = (e) => {\r\n    const deviceName = e.target.value;\r\n    const selectedDevice = biometricDevices.find((x) => x.name === deviceName);\r\n    checkUrl = selectedDevice.url === null ? baseUrl : selectedDevice.url;\r\n    setObjValues({ ...objValues, device: deviceName });\r\n    axios\r\n      .get(`${checkUrl}biometrics/secugen/boot?reader=${deviceName}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        if (response.data.errorType === \"ERROR\") {\r\n          toast.error(response.data.errorName + \" is not plug\");\r\n          //setshowCapture(true)\r\n        } else {\r\n          setshowCapture(true);\r\n        }\r\n      })\r\n      .catch((error) => {});\r\n  };\r\n  // handle the input changes\r\n  const handleInputChange = (e) => {\r\n    setObjValues({\r\n      ...objValues,\r\n      [e.target.name]: e.target.value,\r\n      age: calculate_age(props.age),\r\n    });\r\n  };\r\n  //form validation\r\n  const validate = () => {\r\n    let temp = { ...errors };\r\n    temp.templateType = objValues.templateType ? \"\" : \"This field is required\";\r\n    //temp.device = objValues.device ? \"\" : \"This field is required\"\r\n    setErrors({\r\n      ...temp,\r\n    });\r\n    return Object.values(temp).every((x) => x === \"\");\r\n  };\r\n  //to capture  selected index finger\r\n  const captureFinger = (e) => {\r\n    e.preventDefault();\r\n    if (validate()) {\r\n      setLoading(true);\r\n      // console.log(biometricDevices)\r\n      // console.log(devices)\r\n      // axios.post(`${checkUrl}biometrics/secugen/enrollment?reader=SG_DEV_AUTO`,objValues,\r\n      console.log(\"\", objValues);\r\n      axios\r\n        .post(\r\n          `${devices.url}?reader=${devices.name}&isNew=${isNewStatus}`,\r\n          objValues,\r\n          {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          setLoading(false);\r\n          if (response.data.type === \"ERROR\") {\r\n            setLoading(false);\r\n            setTryAgain(true);\r\n            window.setTimeout(() => {\r\n              setTryAgain(false);\r\n            }, 5000);\r\n            toast.error(response.data.message.ERROR);\r\n            setIsNewStatus(false);\r\n          } else if (response.data.type === \"SUCCESS\") {\r\n            if (\r\n              response.data.imageQuality <= 60 &&\r\n              calculate_age(props.age) <= 6\r\n            ) {\r\n              toast.info(\r\n                \"Image quality captured is poor, Kindly give a reason for capture above.\",\r\n                { position: toast.POSITION.BOTTOM_CENTER, autoClose: 20000 }\r\n              );\r\n              setImageQuality(true);\r\n            }\r\n            const templateType = response.data.templateType;\r\n            setTryAgain(false);\r\n            setSuccess(true);\r\n            window.setTimeout(() => {\r\n              setSuccess(false);\r\n              setLoading(false);\r\n            }, 5000);\r\n            let biometricsEnrollments = response.data;\r\n            biometricsEnrollments.capturedBiometricsList = _.uniqBy(\r\n              biometricsEnrollments.capturedBiometricsList,\r\n              \"templateType\"\r\n            );\r\n\r\n            setCapturedFingered([...capturedFingered, biometricsEnrollments]);\r\n            //fingerType.splice(templateType, 1);\r\n            _.find(fingerType, { display: templateType }).captured = true;\r\n            setFingerType([...fingerType]);\r\n            //setObjValues({biometricType: \"FINGERPRINT\", patientId:props.patientId, templateType:\"\", device:\"\"});\r\n            setObjValues({ ...objValues, templateType: \"\" });\r\n            setIsNewStatus(false);\r\n            //console.log(\"captured\",  biometricsEnrollments)\r\n          } else {\r\n            setLoading(false);\r\n            setTryAgain(true);\r\n            toast.error(\"Something went wrong capturing biometrics...\", {\r\n              position: toast.POSITION.BOTTOM_CENTER,\r\n            });\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          setLoading(false);\r\n        });\r\n    }\r\n  };\r\n\r\n  const deleteBiometric = (id, finger) => {\r\n    axios\r\n      .delete(`${baseUrl}biometrics/${id}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        toast.success(`${finger} deleted successfully`, {\r\n          position: toast.POSITION.BOTTOM_CENTER,\r\n        });\r\n        _.find(fingerType, { display: finger }).captured = false;\r\n        setFingerType([...fingerType]);\r\n        let newStoredBiometrics = _.reject(storedBiometrics, {\r\n          templateType: finger,\r\n        });\r\n        setStoredBiometrics(newStoredBiometrics);\r\n        clear_storelist();\r\n        if (newStoredBiometrics.length === 0) {\r\n          props.updatePatientBiometricStatus(false);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        toast.error(\"Something went wrong\", {\r\n          position: toast.POSITION.BOTTOM_CENTER,\r\n        });\r\n        console.log(error);\r\n      });\r\n  };\r\n  //Save Biometric capture\r\n  const saveBiometrics = (e) => {\r\n    e.preventDefault();\r\n    if (capturedFingered.length >= 1) {\r\n      const capturedObj = capturedFingered[capturedFingered.length - 1];\r\n      console.log({ ...capturedObj, recapture: true });\r\n      capturedObj.capturedBiometricsList = _.uniqBy(\r\n        capturedObj.capturedBiometricsList,\r\n        \"templateType\"\r\n      );\r\n\r\n      //console.log(\"capturedObj\", capturedFingered);\r\n\r\n      axios\r\n        .post(`${baseUrl}biometrics/templates`, capturedObj, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((response) => {\r\n          console.log(\"saved\", response);\r\n          toast.success(\"Biometric save successful\", {\r\n            position: toast.POSITION.BOTTOM_CENTER,\r\n          });\r\n          setCapturedFingered([]);\r\n          getPersonBiometrics();\r\n          props.updatePatientBiometricStatus(true);\r\n        })\r\n        .catch((error) => {\r\n          toast.error(\"Something went wrong saving biometrics\", {\r\n            position: toast.POSITION.BOTTOM_CENTER,\r\n          });\r\n          console.log(error);\r\n        });\r\n    } else {\r\n      toast.error(\"You can't save less than 2 finger\", {\r\n        position: toast.POSITION.BOTTOM_CENTER,\r\n      });\r\n    }\r\n  };\r\n\r\n  const deleteTempBiometrics = (x) => {\r\n    axios\r\n      .delete(\r\n        `${baseUrl}biometrics?personId=${x.patientId}&templateType=${x.templateType}`,\r\n        {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        }\r\n      )\r\n      .then((resp) => {\r\n        console.log(resp);\r\n        let deletedRecord = capturedFingered.filter(\r\n          (data) => data.templateType !== x.templateType\r\n        );\r\n        setCapturedFingered(deletedRecord);\r\n        toast.info(x.templateType + \"captured removed successfully!\");\r\n      })\r\n      .catch((error) => {\r\n        toast.error(\"Something went wrong\", {\r\n          position: toast.POSITION.BOTTOM_CENTER,\r\n        });\r\n        console.log(error);\r\n      });\r\n    // let deletedRecord = capturedFingered.filter(\r\n    //   (data) => data.templateType !== x.templateType\r\n    // );\r\n    // setCapturedFingered(deletedRecord);\r\n    // console.log(\"deleted temp\");\r\n  };\r\n\r\n  const getFingerprintsQuality = (imageQuality) => {\r\n    if (imageQuality > 60 && imageQuality <= 75) {\r\n      return (\r\n        <Badge color=\"warning\" style={{ fontSize: \"12px\" }}>\r\n          {imageQuality + \"%\"}\r\n        </Badge>\r\n      );\r\n    } else if (imageQuality > 75) {\r\n      return (\r\n        <Badge color=\"success\" style={{ fontSize: \"12px\" }}>\r\n          {imageQuality + \"%\"}\r\n        </Badge>\r\n      );\r\n    } else {\r\n      return (\r\n        <Badge color=\"error\" style={{ fontSize: \"12px\" }}>\r\n          {imageQuality + \"%\"}\r\n        </Badge>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div>\r\n        {/* temporal update */}\r\n        {permissions.includes(\"capture_patient_biometrics\") ||\r\n        permissions.includes(\"all_permission\") ? (\r\n          <div\r\n            style={{\r\n              flex: \"10\",\r\n              padding: \"5px\",\r\n              marginLeft: \"5px\",\r\n              border: \"1px solid rgba(99, 99, 99, 0.2)\",\r\n              boxShadow: \"rgba(99, 99, 99, 0.2) 0px 2px 8px 0px\",\r\n            }}\r\n          >\r\n            <Row>\r\n              <ToastContainer />\r\n              <Col md={3}>\r\n                <FormGroup>\r\n                  <Label\r\n                    for=\"device\"\r\n                    style={{\r\n                      color: \"#014d88\",\r\n                      fontWeight: \"bold\",\r\n                      fontSize: \"14px\",\r\n                    }}\r\n                  >\r\n                    {\" \"}\r\n                    Device{\" \"}\r\n                  </Label>\r\n                  <Input\r\n                    type=\"select\"\r\n                    name=\"device\"\r\n                    id=\"device\"\r\n                    //onChange={checkDevice}\r\n                    value={objValues.device}\r\n                    required\r\n                    disabled\r\n                  >\r\n                    {biometricDevices.map(({ id, name, active, url, type }) => (\r\n                      <option key={id} value={url}>\r\n                        {type}\r\n                      </option>\r\n                    ))}\r\n                  </Input>\r\n                  {errors.device !== \"\" ? (\r\n                    <span className={classes.error}>{errors.device}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </Col>\r\n\r\n              <Col md={3}>\r\n                <FormGroup>\r\n                  <Label\r\n                    for=\"device\"\r\n                    style={{\r\n                      color: \"#014d88\",\r\n                      fontWeight: \"bold\",\r\n                      fontSize: \"14px\",\r\n                    }}\r\n                  >\r\n                    Select Finger\r\n                  </Label>\r\n                  <Input\r\n                    type=\"select\"\r\n                    name=\"templateType\"\r\n                    id=\"templateType\"\r\n                    onChange={handleInputChange}\r\n                    value={objValues.templateType}\r\n                    required\r\n                  >\r\n                    <option value=\"\">Select Finger </option>\r\n\r\n                    {_.filter(fingerType, [\"captured\", false]).map((value) => (\r\n                      <option key={value.id} value={value.display}>\r\n                        {value.display}\r\n                      </option>\r\n                    ))}\r\n                  </Input>\r\n                  {errors.templateType !== \"\" ? (\r\n                    <span className={classes.error}>{errors.templateType}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </Col>\r\n\r\n              {!imageQuality ? (\r\n                \"\"\r\n              ) : (\r\n                <Col md={4}>\r\n                  <FormGroup>\r\n                    <Label\r\n                      for=\"device\"\r\n                      style={{\r\n                        color: \"#014d88\",\r\n                        fontWeight: \"bold\",\r\n                        fontSize: \"14px\",\r\n                      }}\r\n                    >\r\n                      {\" \"}\r\n                      Reason for capture{\" \"}\r\n                    </Label>\r\n                    <Input\r\n                      type=\"textarea\"\r\n                      name=\"reason\"\r\n                      id=\"reason\"\r\n                      onChange={handleInputChange}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n              )}\r\n\r\n              <Col md={2}>\r\n                <MatButton\r\n                  type=\"button\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={captureFinger}\r\n                  className={\"mt-4\"}\r\n                  style={{ backgroundColor: \"#992E62\" }}\r\n                  startIcon={<FingerprintIcon />}\r\n                  disabled={loading}\r\n                >\r\n                  Capture Finger\r\n                </MatButton>\r\n              </Col>\r\n              <br />\r\n            </Row>\r\n          </div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        <Row>\r\n          {capturedFingered.length >= 1 ? (\r\n            <>\r\n              <Col md={12} style={{ marginTop: \"10px\", paddingBottom: \"20px\" }}>\r\n                {\r\n                  /* <List celled horizontal>\r\n                  {capturedFingered.map((x) => (\r\n                    <List.Item\r\n                      style={{\r\n                        width: \"200px\",\r\n                        height: \"200px\",\r\n                        border: \"1px dotted #014d88\",\r\n                        margin: \"5px\",\r\n                      }}\r\n                    >\r\n                      <List.Header\r\n                        style={{\r\n                          paddingLeft: \"0px\",\r\n                          height: \"0.5rem\",\r\n\r\n                          alignItems: \"right\",\r\n                        }}\r\n                      >\r\n                        {getFingerprintsQuality(x.imageQuality)}\r\n                        <span\r\n                          onClick={() => {\r\n                            deleteTempBiometrics(x);\r\n                          }}\r\n                        >\r\n                          <Icon\r\n                            name=\"cancel\"\r\n                            color=\"red\"\r\n                            style={{ float: \"right\" }}\r\n                          />{\" \"}\r\n                        </span>\r\n                      </List.Header>\r\n                      <List.Content\r\n                        style={{\r\n                          width: \"200px\",\r\n                          height: \"160px\",\r\n                          display: \"flex\",\r\n                          justifyContent: \"center\",\r\n                          alignItems: \"center\",\r\n                        }}\r\n                      >\r\n                        {\" \"}\r\n                        <FingerprintIcon\r\n                          style={{ color: \"#992E62\", fontSize: 150 }}\r\n                        />\r\n                      </List.Content>\r\n                      <List.Content\r\n                        style={{\r\n                          width: \"200px\",\r\n                          height: \"30px\",\r\n                          display: \"flex\",\r\n                          justifyContent: \"center\",\r\n                          alignItems: \"center\",\r\n                          fontSize: \"18px\",\r\n                          color: \"#014d88\",\r\n                          fontWeight: \"bold\",\r\n                          fontFamily: '\"poppins\", sans-serif',\r\n                        }}\r\n                      >\r\n                        {x.templateType}\r\n                      </List.Content>\r\n                    </List.Item>\r\n                  ))}\r\n                </List> */\r\n                  //console.log(capturedFingered)\r\n                }\r\n                <List celled horizontal>\r\n                  {capturedFingered.map((x) => (\r\n                    <List.Item\r\n                      style={{\r\n                        width: \"200px\",\r\n                        height: \"200px\",\r\n                        border: \"1px dotted #014d88\",\r\n                        margin: \"5px\",\r\n                      }}\r\n                    >\r\n                      <List.Header\r\n                        style={{\r\n                          paddingLeft: \"0px\",\r\n                          height: \"0.5rem\",\r\n                          alignItems: \"right\",\r\n                        }}\r\n                      >\r\n                        {getFingerprintsQuality(x.mainImageQuality)}\r\n                        <span\r\n                          onClick={() => {\r\n                            deleteTempBiometrics(x);\r\n                          }}\r\n                        >\r\n                          <Icon\r\n                            name=\"cancel\"\r\n                            color=\"red\"\r\n                            style={{ float: \"right\" }}\r\n                          />{\" \"}\r\n                        </span>\r\n                      </List.Header>\r\n                      <List.Content\r\n                        style={{\r\n                          width: \"200px\",\r\n                          height: \"150px\",\r\n                          display: \"flex\",\r\n                          justifyContent: \"center\",\r\n                          alignItems: \"center\",\r\n                        }}\r\n                      >\r\n                        {\" \"}\r\n                        <FingerprintIcon\r\n                          style={{ color: \"#992E62\", fontSize: 150 }}\r\n                        />\r\n                      </List.Content>\r\n                      <List.Content\r\n                        style={{\r\n                          width: \"200px\",\r\n                          height: \"30px\",\r\n                          display: \"flex\",\r\n                          justifyContent: \"center\",\r\n                          alignItems: \"center\",\r\n                          fontSize: \"16px\",\r\n                          color: \"#014d88\",\r\n                          fontWeight: \"bold\",\r\n                          fontFamily: '\"poppins\", sans-serif',\r\n                        }}\r\n                      >\r\n                        {x.templateType}\r\n                      </List.Content>\r\n                      <List.Content>\r\n                        <br />\r\n                        {x.mainImageQuality < 75 ? (\r\n                          <MatButton\r\n                            type=\"button\"\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            onClick={() => {\r\n                              deleteTempBiometrics(x);\r\n                            }}\r\n                            startIcon={<RestartAltIcon />}\r\n                          >\r\n                            Reset recapture\r\n                          </MatButton>\r\n                        ) : (\r\n                          \" \"\r\n                        )}\r\n                      </List.Content>\r\n                    </List.Item>\r\n                  ))}\r\n                </List>\r\n              </Col>\r\n              <br />\r\n              <br />\r\n              <br />\r\n              <br />\r\n              <br />\r\n              <br />\r\n              <Col md={12}>\r\n                {storedBiometrics.length < 10 &&\r\n                storedBiometrics.length !== 0 ? (\r\n                  <MatButton\r\n                    type=\"button\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    //disabled={capturedFingered.length < 6 ? true : false}\r\n                    onClick={saveBiometrics}\r\n                    // className={classes.button}\r\n                    startIcon={<SaveIcon />}\r\n                  >\r\n                    Save Capture\r\n                  </MatButton>\r\n                ) : (\r\n                  <MatButton\r\n                    type=\"button\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    disabled={capturedFingered.length < 6 ? true : false}\r\n                    onClick={saveBiometrics}\r\n                    // className={classes.button}\r\n                    startIcon={<SaveIcon />}\r\n                  >\r\n                    Save Capture\r\n                  </MatButton>\r\n                )}\r\n              </Col>\r\n              <br />\r\n            </>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </Row>\r\n      </div>\r\n      <div style={{ display: \"flex\", width: \"100%\" }}>\r\n        <div\r\n          className=\"\"\r\n          style={{\r\n            padding: \"5px\",\r\n            flex: \"10\",\r\n            boxShadow: \"rgba(99, 99, 99, 0.2) 0px 2px 8px 0px\",\r\n            minHeight: \"400px\",\r\n          }}\r\n        >\r\n          {pageLoading && storedBiometrics.length > 0 ? (\r\n            <div style={{ display: \"flex\", width: \"100%\", flexWrap: \"wrap\" }}>\r\n              {storedBiometrics.map((biometric, index) => (\r\n                <div\r\n                  key={index}\r\n                  style={{ minHeight: \"120px\", padding: \"5px\", width: \"20%\" }}\r\n                >\r\n                  <div className=\"card \" style={{ borderRadius: \"6px\" }}>\r\n                    <div\r\n                      className=\"card-header align-items-start\"\r\n                      style={{ backgroundColor: \"#fff\" }}\r\n                    >\r\n                      <div>\r\n                        <h6 className=\"fs-18 font-w500 mb-3 user-name\">\r\n                          <Link\r\n                            to={\"#\"}\r\n                            style={{\r\n                              color: \"#014d88\",\r\n                              fontSize: \"14px\",\r\n                              fontFamily: `\"poppins\",sans-serif`,\r\n                            }}\r\n                          >\r\n                            {biometric.templateType}\r\n                          </Link>\r\n                        </h6>\r\n                        <div\r\n                          className=\"fs-9 text-nowrap\"\r\n                          style={{\r\n                            fontSize: \"10px\",\r\n                            color: \"#992E62\",\r\n                            fontWeight: \"bold\",\r\n                            fontFamily: `\"poppins\",sans-serif`,\r\n                          }}\r\n                        >\r\n                          <i\r\n                            className=\"fa fa-calendar-o me-3\"\r\n                            aria-hidden=\"true\"\r\n                          ></i>\r\n                          {moment(biometric.lastModifiedDate).format(\r\n                            \"YYYY-MM-DD HH:mm\"\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n\r\n                      {/*Action button -- Dropdown menu*/}\r\n                      <Dropdown className=\"dropdown ms-auto\">\r\n                        <Dropdown.Toggle\r\n                          as=\"button\"\r\n                          variant=\"\"\r\n                          drop=\"up\"\r\n                          className=\"btn sharp btn-primary \"\r\n                          id=\"tp-btn\"\r\n                          style={{\r\n                            backgroundColor: \"#014d88\",\r\n                            borderColor: \"#014d88\",\r\n                            borderRadius: \"5px\",\r\n                            marginRight: \"-18px\",\r\n                            marginTop: \"-10px\",\r\n                          }}\r\n                        >\r\n                          <svg\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\r\n                            width=\"18px\"\r\n                            height=\"18px\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            version=\"1.1\"\r\n                          >\r\n                            <g\r\n                              stroke=\"none\"\r\n                              strokeWidth=\"1\"\r\n                              fill=\"none\"\r\n                              fillRule=\"evenodd\"\r\n                            >\r\n                              <rect x=\"0\" y=\"0\" width=\"24\" height=\"24\" />\r\n                              <circle fill=\"#ffffff\" cx=\"12\" cy=\"5\" r=\"2\" />\r\n                              <circle fill=\"#ffffff\" cx=\"12\" cy=\"12\" r=\"2\" />\r\n                              <circle fill=\"#ffffff\" cx=\"12\" cy=\"19\" r=\"2\" />\r\n                            </g>\r\n                          </svg>\r\n                        </Dropdown.Toggle>\r\n                        <Dropdown.Menu\r\n                          alignRight={true}\r\n                          className=\"dropdown-menu-right\"\r\n                        >\r\n                          <Dropdown.Item\r\n                            style={{ color: \"red\" }}\r\n                            onClick={() =>\r\n                              deleteBiometric(\r\n                                biometric.id,\r\n                                biometric.templateType\r\n                              )\r\n                            }\r\n                          >\r\n                            <DeleteIcon /> Delete\r\n                          </Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                      </Dropdown>\r\n                    </div>\r\n                    <div className=\"card-body p-0 pb-2\">\r\n                      <ul className=\"list-group list-group-flush\">\r\n                        <li\r\n                          className=\"list-group-item\"\r\n                          style={{\r\n                            height: \"100px\",\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                          }}\r\n                        >\r\n                          <img\r\n                            src={fingerprintimage}\r\n                            alt=\"\"\r\n                            style={{ height: \"80px\" }}\r\n                          />\r\n                        </li>\r\n\r\n                        <li className=\"list-group-item\">\r\n                          <Badge\r\n                            variant=\"info badge-xs light\"\r\n                            className=\"card-link float-end\"\r\n                          >\r\n                            {biometric.imageQuality !== null\r\n                              ? biometric.imageQuality + \"%\"\r\n                              : \"N/A\"}{\" \"}\r\n                            {/*{contact.version}*/}\r\n                          </Badge>\r\n                          <span className=\"mb-0 title\">\r\n                            Status {biometric.iso}\r\n                          </span>{\" \"}\r\n                          :\r\n                          <span className=\"text-black desc-text ms-2\">\r\n                            <Badge\r\n                              variant={\r\n                                biometric.iso === true\r\n                                  ? \"primary badge-xs\"\r\n                                  : \"danger badge-xs\"\r\n                              }\r\n                            >\r\n                              <i\r\n                                className=\"fa fa-check-square me-2 scale4\"\r\n                                aria-hidden=\"true\"\r\n                              ></i>{\" \"}\r\n                            </Badge>\r\n                          </span>\r\n                        </li>\r\n                      </ul>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <div className=\"flex-grow-8\">\r\n                <div className=\"flex-grow-8\">\r\n                  <Alert severity=\"info\">\r\n                    <AlertTitle style={{ height: \"400px\" }}>\r\n                      <strong>No biometrics captured</strong>\r\n                    </AlertTitle>\r\n                  </Alert>\r\n                </div>\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n        {/*{permissions.includes('capture_patient_biometrics')|| permissions.includes(\"all_permission\")?*/}\r\n        {permissions.includes(\"capture_patient_biometrics\") ||\r\n        permissions.includes(\"all_permission\")\r\n          ? \"\"\r\n          : // <div\r\n            //     style={{\r\n            //     flex: \"3\",\r\n            //     padding: \"5px\",\r\n            //     marginLeft: \"5px\",\r\n            //     border: \"1px solid rgba(99, 99, 99, 0.2)\",\r\n            //     boxShadow: \"rgba(99, 99, 99, 0.2) 0px 2px 8px 0px\",\r\n            //     }}\r\n            // >\r\n            //     <div className=\"col-12\">\r\n            //         <ToastContainer />\r\n            //         <Col md={12}>\r\n            //             <FormGroup>\r\n            //                 <Label\r\n            //                     for=\"device\"\r\n            //                     style={{\r\n            //                     color: \"#014d88\",\r\n            //                     fontWeight: \"bold\",\r\n            //                     fontSize: \"14px\",\r\n            //                     }}\r\n            //                 >\r\n            //                     {\" \"} Device {\" \"}\r\n            //                 </Label>\r\n            //                 <Input\r\n            //                     type=\"select\"\r\n            //                     name=\"device\"\r\n            //                     id=\"device\"\r\n            //                     //onChange={checkDevice}\r\n            //                     value={objValues.device}\r\n            //                     required\r\n            //                     disabled\r\n            //                 >\r\n            //                     {biometricDevices.map(({ id, name, active, url, type }) => (\r\n            //                     <option key={id} value={url}>\r\n            //                         {type}\r\n            //                     </option>\r\n            //                     ))}\r\n            //                 </Input>\r\n            //                 {errors.device !== \"\" ? (\r\n            //                     <span className={classes.error}>{errors.device}</span>\r\n            //                 ) : (\r\n            //                     \"\"\r\n            //                 )}\r\n            //             </FormGroup>\r\n            //         </Col>\r\n\r\n            //     <div className=\"row col-12\">\r\n            //         <Col md={12}>\r\n            //         <FormGroup>\r\n            //             <Label\r\n            //             for=\"device\"\r\n            //             style={{\r\n            //                 color: \"#014d88\",\r\n            //                 fontWeight: \"bold\",\r\n            //                 fontSize: \"14px\",\r\n            //             }}\r\n            //             >\r\n            //             Select Finger\r\n            //             </Label>\r\n            //             <Input\r\n            //             type=\"select\"\r\n            //             name=\"templateType\"\r\n            //             id=\"templateType\"\r\n            //             onChange={handleInputChange}\r\n            //             value={objValues.templateType}\r\n            //             required\r\n            //             >\r\n            //             <option value=\"\">Select Finger </option>\r\n\r\n            //             {_.filter(fingerType, [\"captured\", false]).map(\r\n            //                 (value) => (\r\n            //                 <option key={value.id} value={value.display}>\r\n            //                     {value.display}\r\n            //                 </option>\r\n            //                 )\r\n            //             )}\r\n            //             </Input>\r\n            //             {errors.templateType !== \"\" ? (\r\n            //             <span className={classes.error}>\r\n            //                 {errors.templateType}\r\n            //             </span>\r\n            //             ) : (\r\n            //             \"\"\r\n            //             )}\r\n            //         </FormGroup>\r\n            //         </Col>\r\n\r\n            //         <Col md={12}>\r\n            //         <MatButton\r\n            //             type=\"button\"\r\n            //             variant=\"contained\"\r\n            //             color=\"primary\"\r\n            //             onClick={captureFinger}\r\n            //             className={\"mt-4\"}\r\n            //             style={{ backgroundColor: \"#992E62\" }}\r\n            //             startIcon={<FingerprintIcon />}\r\n            //             disabled={loading}\r\n            //         >\r\n            //             Capture Finger\r\n            //         </MatButton>\r\n            //         </Col>\r\n            //         <br />\r\n            //     </div>\r\n            //     </div>\r\n            // </div>\r\n            \"\"}\r\n      </div>\r\n\r\n      {/*\r\n            <Form >\r\n\r\n                    <Card>\r\n                         <CardHeader>\r\n                                    Capture Biometrics\r\n                                </CardHeader>\r\n                        <CardBody>\r\n                            <Row form>\r\n                                <ToastContainer />\r\n                                <Col md={4}>\r\n                                    <FormGroup>\r\n                                        <Label for='device'>Select Device </Label>\r\n                                        <Input\r\n                                            type=\"select\"\r\n                                            name=\"device\"\r\n                                            id=\"device\"\r\n                                            onChange={checkDevice}\r\n                                            value={objValues.device}\r\n                                            required\r\n                                        >\r\n                                            <option value=\"\">Select Device </option>\r\n                                            {biometricDevices.map(({ id, name }) => (\r\n                                                <option key={id} value={name}>\r\n                                                    {name}\r\n                                                </option>\r\n                                            ))}\r\n\r\n                                        </Input>\r\n                                        {errors.device !==\"\" ? (\r\n                                            <span className={classes.error}>{errors.device}</span>\r\n                                        ) : \"\" }\r\n                                    </FormGroup>\r\n                                </Col>\r\n                                {showCapture ? (\r\n                                        <>\r\n                                            <Col md={4}>\r\n                                                <FormGroup>\r\n                                                    <Label for='device'>Select Finger</Label>\r\n                                                    <Input\r\n                                                        type=\"select\"\r\n                                                        name=\"templateType\"\r\n                                                        id=\"templateType\"\r\n                                                        onChange={handleInputChange}\r\n                                                        value={objValues.templateType}\r\n                                                        required\r\n                                                    >\r\n                                                        <option value=\"\">Select Finger </option>\r\n\r\n                                                        {fingerType.map((value) => (\r\n                                                            <option key={value.id} value={value.display}>\r\n                                                                {value.display}\r\n                                                            </option>\r\n                                                        ))}\r\n                                                    </Input>\r\n                                                    {errors.templateType !==\"\" ? (\r\n                                                        <span className={classes.error}>{errors.templateType}</span>\r\n                                                    ) : \"\" }\r\n                                                </FormGroup>\r\n                                            </Col>\r\n\r\n\r\n                                            <Col md={4}>\r\n\r\n                                                <MatButton\r\n                                                    type='button'\r\n                                                    variant='contained'\r\n                                                    color='primary'\r\n                                                    onClick={captureFinger}\r\n                                                    className={'mt-4'}\r\n                                                    startIcon={<FingerprintIcon />}\r\n                                                >\r\n                                                    Capture Finger\r\n                                                </MatButton>\r\n\r\n                                            </Col>\r\n                                            <br/>\r\n\r\n                                        </>\r\n                                    )\r\n                                    :\r\n                                    \"\"\r\n                                }\r\n                                 <img width='500' height='200' src={responseImage}/>\r\n                                <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\r\n\r\n                                    {loading && (\r\n                                        <>\r\n                                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                                                <Box sx={{ m: 1, position: 'relative' }}>\r\n                                                    <Fab\r\n                                                        aria-label=\"save\"\r\n                                                        color=\"secondary\"\r\n                                                        sx={buttonSx}\r\n\r\n                                                    >\r\n                                                        {success ? <CheckIcon /> : <FingerprintIcon />}\r\n                                                    </Fab>\r\n                                                    {loading && (\r\n                                                        <CircularProgress\r\n                                                            size={68}\r\n                                                            sx={{\r\n                                                                color: green[500],\r\n                                                                position: 'absolute',\r\n                                                                top: -6,\r\n                                                                left: -6,\r\n                                                                zIndex: 1,\r\n                                                            }}\r\n                                                        />\r\n                                                    )}\r\n                                                </Box>\r\n                                                <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                                                    {success ?` your  ${objValues.templateType} Finger captured.` : `Please place your  ${objValues.templateType} Finger on scanner.`}\r\n                                                </Typography>\r\n                                            </Box>\r\n                                        </>\r\n                                    )\r\n                                    }\r\n                                    {tryAgain && (\r\n                                        <>\r\n\r\n\r\n                                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                                                <Box sx={{ m: 1, position: 'relative' }}>\r\n                                                    <Fab\r\n                                                        aria-label=\"save\"\r\n                                                        color=\"secondary\"\r\n                                                        sx={buttonSx}\r\n\r\n                                                    >\r\n                                                        <FingerprintIcon />\r\n                                                    </Fab>\r\n                                                    {tryAgain && (\r\n                                                        <CircularProgress\r\n                                                            size={68}\r\n                                                            sx={{\r\n                                                                color: red[500],\r\n                                                                position: 'absolute',\r\n                                                                top: -6,\r\n                                                                left: -6,\r\n                                                                zIndex: 1,\r\n                                                            }}\r\n                                                        />\r\n                                                    )}\r\n                                                </Box>\r\n                                                <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                                                    Click to Recapture Again\r\n                                                </Typography>\r\n                                            </Box>\r\n                                        </>\r\n                                    )\r\n                                    }\r\n\r\n                                </Col>\r\n\r\n\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                {capturedFingered.length >=1 ? (\r\n                                        <>\r\n                                            <Col md={12} >\r\n                                                <h3>Captured Fingerprints</h3>\r\n                                            </Col>\r\n                                            <Col md={12} style={{marginTop:\"20px\"}}>\r\n                                                <List celled horizontal>\r\n                                                    {capturedFingered.map((x) => (\r\n                                                        <List.Item style={{width:'200px',height:'200px',display:'flex', justifyContent:'center',alignItems: 'center'}}>\r\n                                                             <List.Header><Icon name='cancel'  color='red' /> </List.Header>\r\n                                                            <List.Content> <FingerprintIcon style={{color:\"#2E7D32\", fontSize: 40}}/>{x.templateType}</List.Content>\r\n                                                        </List.Item>\r\n                                                    ))}\r\n\r\n                                                </List>\r\n\r\n                                            </Col>\r\n                                             <Col md={6} style={{marginTop:\"20px\"}}>\r\n                                        <List celled horizontal>\r\n                                            {[1,2,3].map((x) => (\r\n                                                <List.Item>\r\n                                                    <List.Header><Icon name='checkmark' color='green'/> </List.Header>\r\n                                                    <List.Content > <FingerprintIcon style={{color:\"#2E7D32\", fontSize: 40}} /> Finger Type</List.Content>\r\n                                                </List.Item>\r\n                                            ))}\r\n\r\n                                        </List>\r\n\r\n                                    </Col>\r\n                                            <br/><br/><br/><br/><br/><br/>\r\n                                            <Col md={12} >\r\n                                                <MatButton\r\n                                                    type='button'\r\n                                                    variant='contained'\r\n                                                    color='primary'\r\n                                                    onClick={saveBiometrics}\r\n                                                    // className={classes.button}\r\n                                                    startIcon={<SaveIcon/>}\r\n                                                >\r\n                                                    Save Capture\r\n                                                </MatButton>\r\n                                            </Col>\r\n                                        </>\r\n                                    )\r\n                                    :\r\n                                    \"\"\r\n                                }\r\n                            </Row>\r\n                        </CardBody>\r\n                    </Card>\r\n            </Form>\r\n*/}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Biometrics;\r\n","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\PreviousRecapture.js",["366","367","368","369","370","371","372","373","374","375","376"],"import React, { useState, useRef, useEffect } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport axios from \"axios\";\r\nimport { url as baseUrl, token } from \"../../../api\";\r\nimport { FaEye } from \"react-icons/fa\";\r\nimport SplitActionButton from \"./SplitActionButton\";\r\nimport PatientRecapture from \"./PatientRecapture\";\r\nimport Recapture from \"./Recapture\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport FingerprintIcon from \"@mui/icons-material/Fingerprint\";\r\n\r\nimport { forwardRef } from \"react\";\r\n//import { Button} from \"react-bootstrap\";\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport TablePagination from \"@mui/material/TablePagination\";\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\n\r\nconst PreviousRecapture = (props) => {\r\n  let createdDate = props.patientObj.createdDate.split(\"T\")[0];\r\n  let currentDate = new Date().toISOString().split(\"T\")[0];\r\n\r\n  const [recapturedFingered, setRecapturedFingered] = useState([]);\r\n  const [modal, setModal] = useState(false);\r\n  const [modalNew, setModalNew] = useState(false);\r\n  const toggle = () => setModal(!modal);\r\n  const toggleNew = () => setModalNew(!modalNew);\r\n\r\n  const tableRef = useRef(null);\r\n  const [loading, setLoading] = useState(\"\");\r\n  const [recaptures, setRecaptures] = useState([]);\r\n  const [biometrics, setBiometrics] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n  const getRecaptureCount = () => {\r\n    console.log(\"get recaptures\");\r\n    axios\r\n      .get(`${baseUrl}biometrics/grouped/person/${props.patientId}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        //console.log(response.data);\r\n        setRecapturedFingered(response.data);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getRecaptureCount();\r\n  }, []);\r\n\r\n  const handleChangePage = (page) => {\r\n    setCurrentPage(page + 1);\r\n  };\r\n\r\n  function actionItems(row) {\r\n    //console.log(row);\r\n    axios\r\n      .get(\r\n        `${baseUrl}biometrics?personUuid=${row.personUuid}&recapture=${row.recapture}`,\r\n        {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        toggle();\r\n        let biometricData = response.data.filter(\r\n          (data) => data.date === row.captureDate\r\n        );\r\n        //console.log(\"gotten\", biometricData);\r\n        setBiometrics(biometricData);\r\n      });\r\n    //.error((err) => console.log(err));\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h4>\r\n        {\" \"}\r\n        Patient recapture count : <b>{recapturedFingered.length - 1}</b>\r\n      </h4>\r\n      {createdDate !== currentDate ? (\r\n        <MatButton\r\n          className=\" float-right mr-1\"\r\n          variant=\"contained\"\r\n          floated=\"left\"\r\n          startIcon={<FingerprintIcon />}\r\n          style={{\r\n            backgroundColor: \"#014d88\",\r\n            color: \"#fff\",\r\n            height: \"35px\",\r\n            float: \"right\",\r\n            //marginBottom: \"40px\",\r\n          }}\r\n          onClick={toggleNew}\r\n        >\r\n          <span style={{ textTransform: \"capitalize\" }}>Recapture</span>\r\n        </MatButton>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <br />\r\n      <br />\r\n      <br />\r\n      <MaterialTable\r\n        tableRef={tableRef}\r\n        /*onSearchChange={(e) => {\r\n          handleSearchChange(e);\r\n      }}*/\r\n        icons={tableIcons}\r\n        title={`Biometrics List`}\r\n        columns={[\r\n          {\r\n            title: \"Captured Date\",\r\n            field: \"captureDate\",\r\n            filtering: false,\r\n            // hidden: enablePPI,\r\n          },\r\n          {\r\n            title: \"Number of Fingers Captured\",\r\n            field: \"count\",\r\n            filtering: false,\r\n          },\r\n          { title: \"Category\", field: \"data\" },\r\n          { title: \"Actions\", field: \"actions\", filtering: false },\r\n        ]}\r\n        isLoading={loading}\r\n        data={\r\n          recapturedFingered &&\r\n          recapturedFingered\r\n            .filter((record) => {\r\n              return record.archived === 0;\r\n            })\r\n            .map((row) => ({\r\n              captureDate: row.captureDate,\r\n              count: row.count === null ? 0 : row.count,\r\n              data: row.recapture === 1 ? \"Recapture\" : \"Baseline\",\r\n              actions: (\r\n                <Button\r\n                  style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n                  onClick={() => actionItems(row)}\r\n                >\r\n                  View\r\n                </Button>\r\n              ),\r\n            }))\r\n          // (query) =>\r\n          // new Promise((resolve, reject) =>\r\n          //   axios\r\n          //     .get(`${baseUrl}biometrics/grouped/person/${props.patientId}`, {\r\n          //       headers: { Authorization: `Bearer ${token}` },\r\n          //     })\r\n          //     .then((response) => response)\r\n          //     .then((result) => {\r\n          //       resolve({\r\n          //         data: result.data\r\n          //           .filter((record) => {\r\n          //             return record.archived === 0;\r\n          //           })\r\n          //           .map((row) => ({\r\n          //             captureDate: row.captureDate,\r\n          //             count: row.count === null ? 0 : row.count,\r\n          //             //data: actionItems(row),\r\n          //             actions: (\r\n          //               <Button\r\n          //                 style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n          //                 onClick={() => actionItems(row)}\r\n          //               >\r\n          //                 View\r\n          //               </Button>\r\n          //             ),\r\n          //           })),\r\n          //         page: query.page,\r\n          //         totalCount: result.data.length,\r\n          //       });\r\n          //     })\r\n          // )\r\n        }\r\n        options={{\r\n          headerStyle: {\r\n            backgroundColor: \"#014d88\",\r\n            color: \"#fff\",\r\n            fontSize: \"16px\",\r\n            padding: \"10px\",\r\n            fontWeight: \"bolder\",\r\n          },\r\n          searchFieldStyle: {\r\n            width: \"50%\",\r\n          },\r\n          filtering: false,\r\n          exportButton: false,\r\n          searchFieldAlignment: \"left\",\r\n          pageSizeOptions: [10, 20, 100],\r\n          pageSize: 10,\r\n          debounceInterval: 400,\r\n        }}\r\n        onChangePage={handleChangePage}\r\n        //localization={localization}\r\n      />\r\n      <PatientRecapture\r\n        storedBiometrics={biometrics}\r\n        modal={modal}\r\n        toggle={toggle}\r\n      />\r\n      <Recapture\r\n        toggle={toggleNew}\r\n        modal={modalNew}\r\n        patientId={props.patientId}\r\n        age={props.age}\r\n        getRecaptureCount={getRecaptureCount}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PreviousRecapture;\r\n","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\SplitActionButton.js",["377","378","379","380","381","382","383","384"],"import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport ButtonGroup from '@mui/material/ButtonGroup';\r\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\r\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\r\nimport Grow from '@mui/material/Grow';\r\nimport Paper from '@mui/material/Paper';\r\nimport Popper from '@mui/material/Popper';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport MenuList from '@mui/material/MenuList';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport ListItemIcon from '@mui/material/ListItemIcon';\r\nimport ContentCut from '@mui/icons-material/ContentCut';\r\nimport Typography from '@mui/material/Typography';\r\nimport {FaEye, FaCaretDown } from \"react-icons/fa\";\r\nimport Divider from '@mui/material/Divider';\r\nimport {useRef} from \"react\";\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\n\r\nconst options = ['Delete', 'Edit'];\r\n\r\n\r\n\r\nexport default function SplitActionButton(props) {\r\n    const [open, setOpen] = React.useState(false);\r\n    const anchorRef = useRef(null);\r\n    const [selectedIndex, setSelectedIndex] = React.useState(1);\r\n\r\n    const handleClick = () => {\r\n        console.info(`You clicked ${options[selectedIndex]}`);\r\n    };\r\n\r\n    const handleMenuItemClick = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleToggle = () => {\r\n        setOpen((prevOpen) => !prevOpen);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ButtonGroup variant=\"contained\" ref={anchorRef} style={{backgroundColor:'rgb(153, 46, 98)', height:'30px',width:'150px'}} >\r\n                <Link to={props.actions[0].to} style={{borderRight:'20px solid #fff !important'}}>\r\n                    <Button size=\"small\" onClick={handleClick} variant=\"contained\" startIcon={props.actions[0].icon} style={{backgroundColor:'rgb(153, 46, 98)'}}>\r\n                        <Typography variant=\"h7\" style={{fontWeight:'bolder'}}>{props.actions[0].name}</Typography>\r\n                    </Button>\r\n                </Link>\r\n\r\n                <Divider orientation=\"vertical\" flexItem style={{borderRight:'20px solid #fff !important', backgroundColor:'#fff',width:'1px', height:'26px',marginTop:'2px'}}>\r\n                    1\r\n                </Divider>\r\n                <Button\r\n                    size=\"medium\"\r\n                    aria-controls={open ? 'split-button-menu' : undefined}\r\n                    aria-expanded={open ? 'true' : undefined}\r\n                    aria-label=\"select merge strategy\"\r\n                    aria-haspopup=\"menu\"\r\n                    onClick={handleToggle}\r\n                    style={{backgroundColor:'rgb(153, 46, 98)'}}\r\n                >\r\n                    <FaCaretDown size='24' />\r\n                </Button>\r\n            </ButtonGroup>\r\n            <Popper\r\n                open={open}\r\n                anchorEl={anchorRef.current}\r\n                role={undefined}\r\n                transition\r\n                disablePortal\r\n                style={{ zIndex:'10000' }}\r\n            >\r\n                {({ TransitionProps, placement }) => (\r\n                    <Grow\r\n                        {...TransitionProps}\r\n                        style={{\r\n                            transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom',\r\n                            zIndex:'1000'\r\n                        }}\r\n                    >\r\n                        {/*width: 130,*/}\r\n                        <Paper sx={{ minWidth:'130px', maxWidth: '150px', marginTop:'2px', zIndex:'1000' }}>\r\n                            <ClickAwayListener onClickAway={handleClose}>\r\n                                <MenuList id=\"split-button-menu\" autoFocusItem>\r\n                                    {props.actions.slice(1).map((option, index) => (\r\n                                        <MenuItem\r\n                                            key={Math.random()}\r\n                                        >\r\n                                            <Link\r\n                                                to={option.to}\r\n                                                onClick={option.deleteAction}\r\n                                            >\r\n                                                {option.icon}<span style={{color: 'rgb(153, 46, 98)', fontWeight:'bolder', fontSize:'12px'}}>{option.name}</span>\r\n                                            </Link>\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </MenuList>\r\n                            </ClickAwayListener>\r\n                        </Paper>\r\n                    </Grow>\r\n                )}\r\n            </Popper>\r\n        </React.Fragment>\r\n    );\r\n}\r\n","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\PatientRecapture.js",["385","386","387"],"import React from \"react\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\r\nimport { Dropdown, Badge } from \"react-bootstrap\";\r\nimport { Alert, AlertTitle } from \"@material-ui/lab\";\r\nimport moment from \"moment\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport fingerprintimage from \"../images/fingerprintimage.png\";\r\n\r\nconst PatientRecapture = (props) => {\r\n  //console.log(\"details\", props.storedBiometrics);\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        isOpen={props.modal}\r\n        toggle={props.toggle}\r\n        style={{ display: \"flex\", maxWidth: \"85%\", maxHeight: \"80%\" }}\r\n        fullscreen=\"true\"\r\n      >\r\n        <ModalHeader toggle={props.toggle}>\r\n          {props.storedBiometrics[0]?.recapture === 0\r\n            ? \"Baseline Fingerprints\"\r\n            : \"Previous Recaptured Fingerprints\"}\r\n        </ModalHeader>\r\n        <ModalBody>\r\n          <div>\r\n            <div\r\n              className=\"\"\r\n              style={{\r\n                padding: \"5px\",\r\n                flex: \"10\",\r\n                boxShadow: \"rgba(99, 99, 99, 0.2) 0px 2px 8px 0px\",\r\n                minHeight: \"400px\",\r\n              }}\r\n            >\r\n              {props.storedBiometrics.length > 0 ? (\r\n                <div\r\n                  style={{ display: \"flex\", width: \"100%\", flexWrap: \"wrap\" }}\r\n                >\r\n                  {props.storedBiometrics.map((biometric, index) => (\r\n                    <div\r\n                      key={index}\r\n                      style={{\r\n                        minHeight: \"120px\",\r\n                        padding: \"5px\",\r\n                        width: \"20%\",\r\n                      }}\r\n                    >\r\n                      <div className=\"card \" style={{ borderRadius: \"6px\" }}>\r\n                        <div\r\n                          className=\"card-header align-items-start\"\r\n                          style={{ backgroundColor: \"#fff\" }}\r\n                        >\r\n                          <div>\r\n                            <h6 className=\"fs-18 font-w500 mb-3 user-name\">\r\n                              <Link\r\n                                to={\"#\"}\r\n                                style={{\r\n                                  color: \"#014d88\",\r\n                                  fontSize: \"14px\",\r\n                                  fontFamily: `\"poppins\",sans-serif`,\r\n                                }}\r\n                              >\r\n                                {biometric.templateType}\r\n                              </Link>\r\n                            </h6>\r\n                            <div\r\n                              className=\"fs-9 text-nowrap\"\r\n                              style={{\r\n                                fontSize: \"10px\",\r\n                                color: \"#992E62\",\r\n                                fontWeight: \"bold\",\r\n                                fontFamily: `\"poppins\",sans-serif`,\r\n                              }}\r\n                            >\r\n                              <i\r\n                                className=\"fa fa-calendar-o me-3\"\r\n                                aria-hidden=\"true\"\r\n                              ></i>\r\n                              {moment(biometric.lastModifiedDate).format(\r\n                                \"YYYY-MM-DD HH:mm\"\r\n                              )}\r\n                            </div>\r\n                          </div>\r\n\r\n                          {/*Action button -- Dropdown menu*/}\r\n                          {/* <Dropdown className=\"dropdown ms-auto\">\r\n                            <Dropdown.Toggle\r\n                              as=\"button\"\r\n                              variant=\"\"\r\n                              drop=\"up\"\r\n                              className=\"btn sharp btn-primary \"\r\n                              id=\"tp-btn\"\r\n                              style={{\r\n                                backgroundColor: \"#014d88\",\r\n                                borderColor: \"#014d88\",\r\n                                borderRadius: \"5px\",\r\n                                marginRight: \"-18px\",\r\n                                marginTop: \"-10px\",\r\n                              }}\r\n                            >\r\n                              <svg\r\n                                xmlns=\"http://www.w3.org/2000/svg\"\r\n                                xmlnsXlink=\"http://www.w3.org/1999/xlink\"\r\n                                width=\"18px\"\r\n                                height=\"18px\"\r\n                                viewBox=\"0 0 24 24\"\r\n                                version=\"1.1\"\r\n                              >\r\n                                <g\r\n                                  stroke=\"none\"\r\n                                  strokeWidth=\"1\"\r\n                                  fill=\"none\"\r\n                                  fillRule=\"evenodd\"\r\n                                >\r\n                                  <rect x=\"0\" y=\"0\" width=\"24\" height=\"24\" />\r\n                                  <circle fill=\"#ffffff\" cx=\"12\" cy=\"5\" r=\"2\" />\r\n                                  <circle\r\n                                    fill=\"#ffffff\"\r\n                                    cx=\"12\"\r\n                                    cy=\"12\"\r\n                                    r=\"2\"\r\n                                  />\r\n                                  <circle\r\n                                    fill=\"#ffffff\"\r\n                                    cx=\"12\"\r\n                                    cy=\"19\"\r\n                                    r=\"2\"\r\n                                  />\r\n                                </g>\r\n                              </svg>\r\n                            </Dropdown.Toggle>\r\n                            <Dropdown.Menu\r\n                              alignRight={true}\r\n                              className=\"dropdown-menu-right\"\r\n                            >\r\n                              <Dropdown.Item\r\n                                style={{ color: \"red\" }}\r\n                                onClick={() =>\r\n                                  deleteBiometric(\r\n                                    biometric.id,\r\n                                    biometric.templateType\r\n                                  )\r\n                                }\r\n                              >\r\n                                <DeleteIcon /> Delete\r\n                              </Dropdown.Item>\r\n                            </Dropdown.Menu>\r\n                          </Dropdown> */}\r\n                        </div>\r\n                        <div className=\"card-body p-0 pb-2\">\r\n                          <ul className=\"list-group list-group-flush\">\r\n                            <li\r\n                              className=\"list-group-item\"\r\n                              style={{\r\n                                height: \"100px\",\r\n                                display: \"flex\",\r\n                                justifyContent: \"center\",\r\n                              }}\r\n                            >\r\n                              <img\r\n                                src={fingerprintimage}\r\n                                alt=\"\"\r\n                                style={{ height: \"80px\" }}\r\n                              />\r\n                            </li>\r\n\r\n                            <li className=\"list-group-item\">\r\n                              <Badge\r\n                                variant=\"info badge-xs light\"\r\n                                className=\"card-link float-end\"\r\n                              >\r\n                                {biometric.imageQuality !== null\r\n                                  ? biometric.imageQuality + \"%\"\r\n                                  : \"N/A\"}{\" \"}\r\n                                {/*{contact.version}*/}\r\n                              </Badge>\r\n                              <span className=\"mb-0 title\">\r\n                                Fingerprint Quality {biometric.iso}\r\n                              </span>{\" \"}\r\n                              :\r\n                              {/* <span className=\"text-black desc-text ms-2\">\r\n                                <Badge\r\n                                  variant={\r\n                                    biometric.iso === true\r\n                                      ? \"primary badge-xs\"\r\n                                      : \"danger badge-xs\"\r\n                                  }\r\n                                >\r\n                                  <i\r\n                                    className=\"fa fa-check-square me-2 scale4\"\r\n                                    aria-hidden=\"true\"\r\n                                  ></i>{\" \"}\r\n                                </Badge>\r\n                              </span> */}\r\n                            </li>\r\n                          </ul>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              ) : (\r\n                <>\r\n                  <div className=\"flex-grow-8\">\r\n                    <div className=\"flex-grow-8\">\r\n                      <Alert severity=\"info\">\r\n                        <AlertTitle style={{ height: \"400px\" }}>\r\n                          <strong>No biometrics captured</strong>\r\n                        </AlertTitle>\r\n                      </Alert>\r\n                    </div>\r\n                  </div>\r\n                </>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          {/* <Button color=\"primary\" onClick={props.toggle}>\r\n            Do Something\r\n          </Button>{\" \"}\r\n          <Button color=\"secondary\" onClick={props.toggle}>\r\n            Cancel\r\n          </Button> */}\r\n        </ModalFooter>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PatientRecapture;\r\n","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\MigrationDQA\\index.js",["388","389","390","391"],"import React, {useEffect, useState} from 'react';\r\nimport {Tab} from \"semantic-ui-react\";\r\nimport PatientList from \"../Home/PatientList\";\r\nimport {ToastContainer} from \"react-toastify\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport DuplicateHospitalNumbers from \"./DuplicateHospitalNumbers\";\r\nimport axios from \"axios\";\r\nimport {token, url as baseUrl} from \"../../../../api\";\r\nimport {Link} from \"react-router-dom\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {FaUserPlus} from \"react-icons/fa\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        },\r\n        '& a':{\r\n            textDecoration:'none !important'\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n    },\r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    },\r\n}));\r\nfunction Index(props) {\r\n    const classes = useStyles();\r\n    const [permissions, setPermissions] = useState([]);\r\n    useEffect(() => {\r\n        userPermission();\r\n    }, []);\r\n    //Get list of Finger index\r\n    const userPermission =()=>{\r\n        axios\r\n            .get(`${baseUrl}account`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setPermissions(response.data.permissions);\r\n\r\n            })\r\n            .catch((error) => {\r\n            });\r\n\r\n    }\r\n    const panes = [\r\n        { menuItem: 'Duplicate Hospital Numbers', render: () =>\r\n                <Tab.Pane>\r\n                    <DuplicateHospitalNumbers permissions={permissions}/>\r\n                </Tab.Pane>\r\n        }\r\n    ];\r\n    return (\r\n        <div className={classes.root}>\r\n            <ToastContainer autoClose={3000} hideProgressBar />\r\n            {permissions.includes('view_patient') || permissions.includes(\"all_permission\") ? (\r\n                <Tab panes={panes} />\r\n            ):\"\"\r\n            }\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Index;","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\ClientDashboard\\CheckIn\\index.js",["392","393","394","395","396","397","398","399","400","401","402","403","404","405","406","407","408","409","410","411","412","413","414"],"import React, {useCallback, useEffect, useState} from 'react';\r\nimport {Link, useHistory} from \"react-router-dom\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport {TiArrowBack} from \"react-icons/ti\";\r\nimport {Button, Grid, MenuItem, Paper, TextField} from \"@mui/material\";\r\nimport {Modal, ModalBody, ModalHeader} from \"reactstrap\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport {LocalizationProvider} from \"@mui/x-date-pickers/LocalizationProvider\";\r\nimport {AdapterDateFns} from \"@mui/x-date-pickers/AdapterDateFns\";\r\nimport {Label} from \"semantic-ui-react\";\r\nimport {DesktopDateTimePicker} from \"@mui/x-date-pickers/DesktopDateTimePicker\";\r\nimport DualListBox from \"react-dual-listbox\";\r\nimport axios from \"axios\";\r\nimport {token, url as baseUrl} from \"../../../../../api\";\r\nimport {toast} from \"react-toastify\";\r\nimport _ from \"lodash\";\r\nimport Swal from \"sweetalert2\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {format} from \"date-fns\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport moment from \"moment\";\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        marginBottom: 20,\r\n        flexGrow: 1,\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n    },\r\n    secondaryHeading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    icon: {\r\n        verticalAlign: 'bottom',\r\n        height: 20,\r\n        width: 20,\r\n    },\r\n    details: {\r\n        alignItems: 'center',\r\n    },\r\n    column: {\r\n        flexBasis: '20.33%',\r\n    },\r\n    helper: {\r\n        borderLeft: `2px solid ${theme.palette.divider}`,\r\n        padding: `${theme.spacing(1)}px ${theme.spacing(1) * 2}px`,\r\n    },\r\n    link: {\r\n        color: theme.palette.primary.main,\r\n        textDecoration: 'none',\r\n        '&:hover': {\r\n            textDecoration: 'underline',\r\n        },\r\n    },\r\n    checkinModal:{\r\n        \"& .modal-dialog\":{\r\n            maxWidth:\"1000px\"\r\n        },\r\n        \"& .ui.label\":{\r\n            backgroundColor:\"#fff\",\r\n            fontSize:'16px',\r\n            color:'#014d88',\r\n            fontWeight:'bold',\r\n            textAlign:'left'\r\n        },\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n    },\r\n    checkInDatePicker:{\r\n        '& .MuiFormControl-root.MuiTextField-root':{\r\n            border:'1px solid #eee'\r\n        }\r\n    }\r\n}));\r\nlet newDate = new Date()\r\nfunction Index(props) {\r\n    const userDetail = props.location && props.location.state ? props.location.state.user : null;\r\n    const [loading, setLoading] = useState('');\r\n    let history = useHistory();\r\n    const classes = useStyles();\r\n    const [checkInDate,setCheckInDate]=useState(new Date());\r\n    const [checkOutDate,setCheckOutDate]=useState(new Date());\r\n    const [today, setToday] = useState(new Date().toISOString().substr(0, 10).replace('T', ' '));\r\n    const patientObj = history.location && history.location.state ? history.location.state.patientObj : {};\r\n    ///console.log(\"check in\", patientObj)\r\n    const permissions = history.location && history.location.state ? history.location.state.permissions : [];\r\n    const { handleSubmit, control } = useForm();\r\n    const [modal, setModal] = useState(false);\r\n    const [allServices, setAllServices] = useState(null);\r\n    const [checkinStatus, setCheckinStatus]= useState(false)\r\n    const [modalCheckOut, setModalCheckOut] = useState(false);\r\n    const [services, setServices]= useState([]);\r\n    const [selectedServices, setSelectedServices]= useState({\"selected\":[]});\r\n    const [patientVisits, setPatientVisits]= useState([]);\r\n    const [patientBiometricStatus, setPatientBiometricStatus]= useState(patientObj.biometricStatus);\r\n    const [biometricsModuleInstalled,setBiometricsModuleInstalled]=useState(false);\r\n\r\n    const [checkOutObj, setCheckOutObj] = useState({\r\n        personId: \"\",\r\n        visitStartDate:format(new Date(newDate), 'yyyy-MM-dd hh:mm')\r\n    })\r\n    const [checkInObj, setCheckInObj] = useState({\r\n        serviceIds:\"\",\r\n        visitDto: {\r\n            personId: patientObj.id,\r\n            checkInDate: format(new Date(newDate), 'yyyy-MM-dd hh:mm')\r\n        }\r\n    })\r\n    const loadServices = useCallback(async () => {\r\n        try {\r\n            const response = await axios.get(`${baseUrl}patient/post-service`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            //setServices(response.data);\r\n            setAllServices(response.data);\r\n            setServices(\r\n                Object.entries(response.data).map(([key, value]) => ({\r\n                    label: value.moduleServiceName,\r\n                    value: value.moduleServiceCode,\r\n                }))\r\n            );\r\n            /*            setSelectedServices(\r\n                            _.uniq(_.map(userDetail.applicationUserOrganisationUnits, 'organisationUnitName'))\r\n                        )*/\r\n        } catch (e) {\r\n            await Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: 'An error occurred fetching services!',\r\n            });\r\n        }\r\n    }, []);\r\n    const loadPatientVisits = useCallback(async () => {\r\n        try {\r\n            const response = await axios.get(`${baseUrl}patient/visit/visit-by-patient/${patientObj.id}`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            setPatientVisits(response.data);\r\n            response.data.map((visits)=> {\r\n                if(visits.checkOutDate===null){\r\n                    setCheckinStatus(true)\r\n                }\r\n            })\r\n\r\n\r\n        } catch (e) {\r\n            await Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: 'An error occurred fetching services!',\r\n            });\r\n        }\r\n    }, []);\r\n    let visitTypesRows = null;\r\n    if (services && services.length > 0) {\r\n        visitTypesRows = services.map((service, index) => (\r\n            <MenuItem key={service.moduleServiceCode} value={service.moduleServiceCode}>{service.moduleServiceName}</MenuItem>\r\n        ));\r\n    }\r\n\r\n    const onChangeDate = (date) => {\r\n        console.log(date.target.value)\r\n        const newDate = moment(new Date(date.target.value)).format(\"yyyy-MM-dd hh:mm\");\r\n        setCheckInDate(newDate);\r\n        console.log(newDate);\r\n    };\r\n    const handleCheckIn = () => {\r\n        setModal(true);\r\n    };\r\n    const handleCheckOut = () => {\r\n        setModalCheckOut(true);\r\n    };\r\n\r\n    const onCancelCheckIn = () => {\r\n        setModal(false);\r\n    };\r\n    const onCancelCheckOut = () => {\r\n        setModalCheckOut(false);\r\n    };\r\n    const onDelete = () => {\r\n\r\n    };\r\n    const onSubmit = async (data) => {\r\n        try {\r\n            const today = new Date();\r\n            const visitDetails = await axios.get(`${baseUrl}patient/visit/visit-detail/${patientObj.id}`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            const visitDetail = visitDetails.data;\r\n            const pendingVisit = visitDetail.find(obj => obj.status == \"PENDING\");\r\n            let visit = null;\r\n            if (!pendingVisit) {\r\n                const visitResponse = await axios.post(`${baseUrl}patient/visit`, {\r\n                    \"personId\": patientObj.id,\r\n                    \"visitStartDate\": today\r\n                }, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n                visit = visitResponse.data;\r\n            } else {\r\n                visit = pendingVisit;\r\n            }\r\n            await axios.post(`${baseUrl}patient/encounter`, {\r\n                \"encounterDate\": today,\r\n                \"personId\": patientObj.id,\r\n                \"serviceCode\": data.VisitType,\r\n                \"status\": \"PENDING\",\r\n                \"visitId\": visit.id\r\n            }, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            setModal(false);\r\n            await Swal.fire({\r\n                icon: 'success',\r\n                text: 'CheckedIn successfully',\r\n                timer: 1500\r\n            });\r\n        } catch (e) {\r\n            await Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: 'An error occurred while checking in Patient!',\r\n            });\r\n        }\r\n    };\r\n    const onError = async () => {\r\n        await Swal.fire({\r\n            icon: 'error',\r\n            title: 'Oops...',\r\n            text: 'An error occurred while checking in Patient!',\r\n        });\r\n    };\r\n    let checkInServicesID = [];\r\n    /**** Submit Button For CheckIN  */\r\n    const handleSubmitCheckIn = (e) => {\r\n        e.preventDefault();\r\n        //Check if selected service object is empty before creating visit and posting.\r\n        let m = moment(checkInDate, \"yyyy-MM-DD hh:mm\").format('yyyy-MM-DD H:mm');\r\n        if(selectedServices.selected.length > 0 && moment(m).isValid()){\r\n            selectedServices.selected.length > 0 && selectedServices.selected.map((service)=> {\r\n                checkInServicesID.push(_.find(allServices,{moduleServiceCode:service}).id)\r\n            });\r\n\r\n            checkInObj.serviceIds= checkInServicesID\r\n            //Ensure date time is in 24hr format\r\n            checkInObj.visitDto.checkInDate = moment(checkInDate, \"yyyy-MM-DD hh:mm\").format('yyyy-MM-DD HH:mm');\r\n            axios.post(`${baseUrl}patient/visit/checkin`, checkInObj,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n\r\n            )\r\n                .then(response => {\r\n                    toast.success(\"Patient Check-In successful\");\r\n                    setCheckinStatus(true)\r\n                    onCancelCheckIn()\r\n                    loadPatientVisits()\r\n                })\r\n                .catch(error => {\r\n                    console.log(error)\r\n                    toast.error(\"Something went wrong\");\r\n                    onCancelCheckIn()\r\n                });\r\n        }else{\r\n            toast.error(\"Kindly check the form for a valid date and selected services\");\r\n        }\r\n\r\n    }\r\n    /**** Submit Button Processing  */\r\n    const handleSubmitCheckOut = (e) => {\r\n        e.preventDefault();\r\n        const getVisitID= patientVisits.find((visits)=> visits.status==='PENDING')\r\n\r\n        axios.put(`${baseUrl}patient/visit/checkout/${getVisitID.id}`,getVisitID.id,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n\r\n        )\r\n            .then(response => {\r\n                toast.success(\"Record save successful\");\r\n                setCheckinStatus(false)\r\n                onCancelCheckOut()\r\n                loadPatientVisits()\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n                toast.error(\"Something went wrong\");\r\n                onCancelCheckOut()\r\n            });\r\n    }\r\n    const onServiceSelect = (selectedValues) => {\r\n        setSelectedServices({\"selected\":selectedValues});\r\n    };\r\n    useEffect(() => {\r\n        loadServices();\r\n        loadPatientVisits();\r\n    }, [loadServices, loadPatientVisits]);\r\n    return (\r\n        <>\r\n            <div className=\"row\">\r\n                <div className=\"mb-3 col-md-3\">\r\n                    &nbsp;\r\n                </div>\r\n                <div className=\"mb-3 col-md-3\">\r\n                    &nbsp;\r\n                </div>\r\n                <div className=\"mb-3 col-md-3\">\r\n                    &nbsp;\r\n                </div>\r\n                <div className=\"mb-3 col-md-3\">\r\n                    <Link to={\"/\"} >\r\n                        <MatButton\r\n                            className=\" float-right mr-1\"\r\n                            variant=\"contained\"\r\n                            floated=\"left\"\r\n                            startIcon={<TiArrowBack  />}\r\n                            style={{backgroundColor:\"rgb(153, 46, 98)\", color:'#fff', height:'35px'}}\r\n                        >\r\n                            <span style={{ textTransform: \"capitalize\" }}>Back</span>\r\n                        </MatButton>\r\n                    </Link>\r\n\r\n                    {permissions.includes('patient_check_in') || permissions.includes(\"all_permission\") ? (\r\n                            <>\r\n                                {checkinStatus===false ? (\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            style={{ backgroundColor: \"rgb(4, 196, 217)\", fontSize:'14PX', fontWeight:'bold', height:'35px' }}\r\n                                            onClick={handleCheckIn}\r\n                                            className=\" float-right mr-1\"\r\n                                        >\r\n                                            <span style={{ textTransform: \"capitalize\" }}>CheckIn</span>\r\n                                        </Button>\r\n                                    )\r\n                                    :\r\n                                    \"\"\r\n                                }\r\n                            </>\r\n                        )\r\n                        :\"\"\r\n                    }\r\n                    {checkinStatus===true ? (\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                style={{ backgroundColor: \"green\", fontSize:'14PX', fontWeight:'bold', height:'35px' }}\r\n                                onClick={handleCheckOut}\r\n                                className=\" float-right mr-1\"\r\n                            >\r\n                                <span style={{ textTransform: \"capitalize\" }}>Check Out</span>\r\n                            </Button>\r\n                        )\r\n                        :\r\n                        \"\"\r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n            <Modal  size=\"lg\" style={{maxWidth: '900px'}} isOpen={modal} toggle={onCancelCheckIn}  className={classes.checkinModal}>\r\n                <ModalHeader toggle={onCancelCheckIn}><h5 style={{fontWeight:\"bold\",fontSize:'30px',color:'#992E62'}}>Select Check-In Service</h5></ModalHeader>\r\n                <ModalBody>\r\n                    <form onSubmit={handleSubmitCheckIn}>\r\n                        <Paper\r\n                            style={{\r\n                                display: \"grid\",\r\n                                gridRowGap: \"20px\",\r\n                                padding: \"20px\",\r\n                                margin: \"10px 10px\",\r\n                            }}>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item xs={12}>\r\n                                    <FormGroup style={{width:'100%'}} className={classes.checkInDatePicker}>\r\n                                        <LocalizationProvider dateAdapter={AdapterDateFns} >\r\n                                            <Label for=\"post-services\" style={{color:'#014d88',fontWeight:'bolder',fontSize:'18px'}}>Check-In Date *</Label>\r\n                                            <DesktopDateTimePicker\r\n                                                renderInput={(params) =>\r\n                                                    <TextField\r\n                                                        {...params}\r\n\r\n                                                        sx={{\r\n                                                            /*label:{ color:'#014d88',fontWeight:'bolder',fontSize:'18px' }*/\r\n                                                            input:{fontSize:'14px'},\r\n                                                        }}\r\n                                                        fullWidth\r\n                                                    />\r\n                                                }\r\n                                                value={checkInDate}\r\n                                                onChange={(newValue) => {\r\n                                                    setCheckInDate(newValue);\r\n                                                }}\r\n                                                maxDate={new Date()}\r\n                                                maxTime={new Date()}\r\n                                                style={{width:'100%'}}\r\n                                            />\r\n                                        </LocalizationProvider>\r\n                                    </FormGroup>\r\n                                </Grid>\r\n                                {/*                                <Grid item xs={8}>\r\n\r\n                                    <FormControl >\r\n                                        <Label for=\"dateOfRegistration\">Select service </Label>\r\n                                        <Autocomplete\r\n                                            multiple\r\n                                            id=\"checkboxes-tags-demo\"\r\n                                            options={services}\r\n                                            //disableCloseOnSelect\r\n                                            getOptionLabel={(option) => option.moduleServiceName}\r\n                                            onChange={(e, i) => {\r\n                                                console.log(i)\r\n                                                setSelectedServices({ ...selectedServices, checkInServices: i });\r\n                                            }}\r\n                                            renderOption={(props, option, { selected }) => (\r\n                                                <li {...props}>\r\n                                                    <Checkbox\r\n                                                        icon={icon}\r\n                                                        checkedIcon={checkedIcon}\r\n                                                        style={{ marginRight: 8 }}\r\n                                                        checked={selected}\r\n                                                    />\r\n                                                    {option.moduleServiceName}\r\n                                                </li>\r\n                                            )}\r\n                                            style={{ width: 400 }}\r\n                                            renderInput={(params) => (\r\n                                                <TextField {...params} label=\"Services\" />\r\n                                            )}\r\n                                        />\r\n\r\n                                    </FormControl>\r\n                                </Grid>*/}\r\n                                <Grid item xs={12}>\r\n                                    <FormGroup>\r\n                                        <Label for=\"post-services\" style={{color:'#014d88',fontWeight:'bolder',fontSize:'18px'}}><h5 style={{fontWeight:\"bold\",fontSize:'30px',color:'#992E62'}}>Check-In Service *</h5></Label>\r\n                                        <DualListBox\r\n                                            options={services}\r\n                                            onChange={onServiceSelect}\r\n                                            selected={selectedServices.selected}\r\n                                        />\r\n                                    </FormGroup>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item xs={12}>\r\n                                    <Button type={\"submit\"} variant=\"contained\" color={\"primary\"}>Submit</Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Paper>\r\n                    </form>\r\n                </ModalBody>\r\n            </Modal>\r\n            {/* Modal for CheckOut Patient */}\r\n            <Modal isOpen={modalCheckOut} toggle={onCancelCheckOut} className={classes.checkinModal} style={{maxWidth: '900px',height:\"800px\"}}>\r\n                <ModalHeader toggle={onCancelCheckOut}><h5 style={{fontWeight:\"bold\",fontSize:'30px',color:'#014d88'}}>Check Out </h5></ModalHeader>\r\n                <ModalBody>\r\n                    <form >\r\n                        <Paper\r\n                            style={{\r\n                                display: \"grid\",\r\n                                gridRowGap: \"20px\",\r\n                                padding: \"20px\",\r\n                                margin: \"10px 10px\",\r\n                            }}>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item xs={12}>\r\n                                    <h5 style={{color:'#992E62',fontSize:\"20px\", fontWeight:'bold'}}>Are you sure you want to check-out patient?</h5>\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <FormGroup style={{width:'100%'}} className={classes.checkInDatePicker}>\r\n                                        <LocalizationProvider dateAdapter={AdapterDateFns} >\r\n                                            <Label for=\"post-services\" style={{color:'#014d88',fontWeight:'bolder',fontSize:'16px'}}>Check-Out Date *</Label>\r\n                                            <DesktopDateTimePicker\r\n                                                renderInput={(params) =>\r\n                                                    <TextField\r\n                                                        {...params}\r\n\r\n                                                        sx={{\r\n                                                            /*label:{ color:'#014d88',fontWeight:'bolder',fontSize:'18px' }*/\r\n                                                            input:{fontSize:'14px'},\r\n                                                        }}\r\n                                                        fullWidth\r\n                                                    />\r\n                                                }\r\n                                                value={checkOutDate}\r\n                                                onChange={(newValue) => {\r\n                                                    setCheckOutDate(newValue);\r\n                                                }}\r\n                                                maxDate={new Date()}\r\n                                                maxTime={new Date()}\r\n                                                style={{width:'100%'}}\r\n                                            />\r\n                                        </LocalizationProvider>\r\n                                    </FormGroup>\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item xs={12}>\r\n                                    <Button type={\"submit\"} onClick={handleSubmitCheckOut} variant=\"contained\" color={\"primary\"}>Yes</Button>\r\n                                    <Button  onClick={onCancelCheckOut} variant=\"contained\" style={{backgroundColor:'#992E62',color:\"#fff\",marginLeft:\"10px\"}}>Cancel</Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Paper>\r\n                    </form>\r\n                </ModalBody>\r\n            </Modal>\r\n            {/* End of Checkout Modal */}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Index;","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\MigrationDQA\\DuplicateHospitalNumbers.js",["415","416","417","418","419","420","421","422","423","424","425","426","427","428","429","430","431","432","433","434","435","436","437","438","439","440","441","442","443"],"import React, {forwardRef, useCallback, useEffect, useRef, useState} from 'react';\r\nimport axios from \"axios\";\r\nimport {token, url as baseUrl} from \"../../../../api\";\r\nimport MaterialTable from \"material-table\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nimport {FaEye} from \"react-icons/fa\";\r\nimport {MdDeleteForever, MdModeEdit, MdPerson} from \"react-icons/md\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {ToastContainer} from \"react-toastify\";\r\nimport {Modal, ModalBody, ModalFooter, ModalHeader} from \"reactstrap\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport SplitActionButton from \"../SplitActionButton\";\r\n\r\nconst tableIcons = {\r\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n    SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        },\r\n        '& a':{\r\n            textDecoration:'none !important'\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n    },\r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    },\r\n}));\r\n\r\nfunction DuplicateHospitalNumbers(props) {\r\n    const tableRef = useRef(null);\r\n    const classes = useStyles();\r\n    const [patients, setPatients] = useState([]);\r\n    const [permissions, setPermissions] = useState(props.permissions);\r\n    const [loading, setLoading] = useState('');\r\n    const [modal, setModal] = useState(false);\r\n    const [patient, setPatient] = useState(false);\r\n    const [enablePPI, setEnablePPI] = useState(true);\r\n    const [searchParams,setSearchParams] = useState('*');\r\n    const [totalPages,setTotalPages] = useState(0);\r\n    const [totalRecords,setTotalRecords] = useState(0);\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(10);\r\n    const [currentPage,setCurrentPage] = useState(1);\r\n    const toggle = (id) => {\r\n        const patient = patients.find(obj => obj.id == id);\r\n        setPatient(patient);\r\n        setModal(!modal);\r\n    }\r\n\r\n    const handleDelete = (id) => {\r\n        axios\r\n            .delete(`${baseUrl}patient/delete/${id}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                Swal.fire({\r\n                      icon: 'success',\r\n                      text: 'DQA Deleted Successfully',\r\n                      timer: 1500\r\n                 });\r\n            })\r\n            .catch((error) => {\r\n                 Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: 'An error occurred while deleting!!!',\r\n                });\r\n            });\r\n    }\r\n\r\n    function actionItems(row){\r\n        return  [\r\n            {\r\n                name:'View',\r\n                type:'link',\r\n                icon:<FaEye  size=\"22\"/>,\r\n                to:{\r\n                    pathname: \"/register-patient\",\r\n                    state: { patientId : row.id, permissions:permissions  }\r\n                }\r\n            },\r\n            {...(permissions.includes('edit_patient') || permissions.includes(\"all_permission\")&&\r\n                    {\r\n                        name:'Edit',\r\n                        type:'link',\r\n                        icon:<MdModeEdit size=\"20\" color='rgb(4, 196, 217)' />,\r\n                        to:{\r\n                            pathname: \"/register-patient\",\r\n                            state: { patientId : row.id, permissions:permissions  }\r\n                        }\r\n                    }\r\n                )},\r\n             {...(permissions.includes('delete_patient') || permissions.includes(\"all_permission\")&&\r\n                    {\r\n                        name:'Delete',\r\n                        type:'link',\r\n                        icon:<MdDeleteForever size=\"20\" color='rgb(4, 196, 217)'  />,\r\n                        deleteAction: () => {handleDelete(row.id)},\r\n                        to:{\r\n                            pathname: \"/#\",\r\n                            state: { patientObj: row, permissions:permissions  }\r\n                        }\r\n                    }\r\n                )}\r\n        ]\r\n    }\r\n    const handleRemoteData = query =>\r\n        new Promise((resolve, reject) => {\r\n            axios.get(`${baseUrl}patient/get-duplicate-hospital_numbers?pageSize=${query.pageSize}&pageNo=${query.page}&searchParam=${query.search}`, { headers: {\"Authorization\" : `Bearer ${token}`} })\r\n                .then(response => response)\r\n                .then(result => {\r\n                  if (result.data === \"\") {\r\n                    resolve({\r\n                      data: [],\r\n                      page: 0,\r\n                      totalCount: 0,\r\n                    });\r\n                  } else {\r\n                      resolve({\r\n                        data: result.data.records.map((row) => ({\r\n                            name: [row.firstName, row.otherName, row.surname].filter(Boolean).join(\", \"),\r\n                            id: getHospitalNumber(row.identifier),\r\n                            sex: row.sex,\r\n                            dateOfBirth: row.dateOfBirth,\r\n                            status:row.archived == 1?'Archived':\"Active\",\r\n                            age: (row.dateOfBirth === 0 ||\r\n                                row.dateOfBirth === undefined ||\r\n                                row.dateOfBirth === null ||\r\n                                row.dateOfBirth === \"\" )\r\n                                ? 0\r\n                                : calculate_age(row.dateOfBirth),\r\n                            actions:\r\n                                <div>\r\n                                    {permissions.includes('view_patient') || permissions.includes(\"all_permission\") ? (\r\n                                        <SplitActionButton actions={actionItems(row)} />\r\n                                    ):\"\"\r\n                                    }\r\n                                </div>\r\n                        })),\r\n                        page: query.page,\r\n                        totalCount: result.data.totalRecords\r\n                    });\r\n                  }\r\n                });\r\n        })\r\n\r\n\r\n    const onDelete = async (id) => {\r\n        try {\r\n            if (id) {\r\n                const response = await axios.delete(`${baseUrl}patient/${id}`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n                window.location.reload();\r\n            }\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n\r\n    const onCancelDelete = () => {\r\n        setModal(false);\r\n    }\r\n\r\n    const calculate_age = dob => {\r\n\r\n        const today = new Date();\r\n        const dateParts = dob.split(\"-\");\r\n        const birthDate = new Date(dob); // create a date object directlyfrom`dob1`argument\r\n        let age_now = today.getFullYear() - birthDate.getFullYear();\r\n        const m = today.getMonth() - birthDate.getMonth();\r\n        if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n            age_now--;\r\n        }\r\n        if (age_now === 0) {\r\n            return m + \" month(s)\";\r\n        }\r\n        return age_now + \" year(s)\";\r\n    };\r\n\r\n    const getHospitalNumber = (identifier) => {\r\n        const hospitalNumber = identifier.identifier.find(obj => obj.type == 'HospitalNumber');\r\n        return hospitalNumber ? hospitalNumber.value : '';\r\n    };\r\n\r\n    const getAddress = (address) => {\r\n        const city = address && address.address && address.address.length > 0 ? address.address[0].city : null;\r\n        return city;\r\n    };\r\n\r\n    const getGender = (gender) => {\r\n        return gender.display;\r\n    };\r\n\r\n\r\n\r\n    const enablePPIColumns = () =>{\r\n        setEnablePPI(!enablePPI)\r\n    }\r\n    const PPISelect = () => <div>\r\n        {permissions.includes('view_patient') || permissions.includes(\"all_permission\") ? (\r\n            <FormGroup className=\" float-right mr-1\">\r\n                <FormControlLabel  control={\r\n                    <Checkbox\r\n                        onChange={enablePPIColumns}\r\n                        checked={!enablePPI}\r\n                        style={{color:'#014d88',fontWeight:'bold'}}\r\n                    />\r\n                } label=\"Show PII\" style={{color:'#014d88',fontWeight:'bolder'}} />\r\n            </FormGroup>\r\n        ):<h5 style={{color:'#3d4465',fontWeight:'bold'}}>Patients</h5>\r\n        }\r\n    </div>;\r\n\r\n\r\n    const handleChangePage = (page) => {\r\n        setCurrentPage(page + 1);\r\n    };\r\n    const localization = {\r\n        pagination: {\r\n            labelDisplayedRows: `Page: ${currentPage}`\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <ToastContainer autoClose={3000} hideProgressBar />\r\n            <MaterialTable\r\n                tableRef={tableRef}\r\n                /*onSearchChange={(e) => {\r\n                    handleSearchChange(e);\r\n                }}*/\r\n                icons={tableIcons}\r\n                title={<PPISelect/>}\r\n                columns={[\r\n                    {\r\n                        title: \"Name\",\r\n                        field: \"name\",\r\n                        filtering: false,\r\n                        hidden:enablePPI\r\n                    },\r\n                    { title: \"Hosp. Number\", field: \"id\" , filtering: false},\r\n                    { title: \"Sex\", field: \"sex\", filtering: false },\r\n                    { title: \"Date Of Birth\", field: \"dateOfBirth\", filtering: false },\r\n                    { title: \"Age\", field: \"age\", filtering: false },\r\n                    /*{ title: \"Address\", field: \"address\", filtering: false },*/\r\n                    { title: \"Status\", field: \"status\", filtering: false },\r\n                    {title: \"Actions\", field: \"actions\", filtering: false },\r\n                ]}\r\n                isLoading={loading}\r\n                data={handleRemoteData}\r\n\r\n                options={{\r\n                    rowStyle: rowData => {\r\n                        if(rowData.status === 'Archived') {\r\n                            return {\r\n                                backgroundColor: '#ceeef5',\r\n                                border:'2px solid #fff'\r\n                            };\r\n                        }\r\n\r\n                        return {border:'2px solid #eee'};\r\n                    },\r\n                    headerStyle: {\r\n                        backgroundColor: \"#014d88\",\r\n                        color: \"#fff\",\r\n                        fontSize:'16px',\r\n                        padding:'10px',\r\n                        fontWeight:'bolder'\r\n                    },\r\n                    searchFieldStyle: {\r\n                        width : '50%'\r\n                    },\r\n                    filtering: false,\r\n                    exportButton: false,\r\n                    searchFieldAlignment: 'left',\r\n                    pageSizeOptions:[10,20,100],\r\n                    pageSize:10,\r\n                    debounceInterval: 400,\r\n\r\n                }}\r\n                onChangePage={handleChangePage}\r\n                //localization={localization}\r\n\r\n            />\r\n            <Modal isOpen={modal} toggle={onCancelDelete}>\r\n                <ModalHeader toggle={onCancelDelete}>Delete Patient</ModalHeader>\r\n                <ModalBody>\r\n                    Are you sure to delete this record? { patient ? patient.surname +  ', ' + patient.firstname +  ' ' + patient.otherName : '' }\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"primary\" type=\"button\" onClick={(e) => onDelete(patient.id)}>Yes</Button>{' '}\r\n                    <Button color=\"secondary\" type=\"button\" onClick={(e) => onCancelDelete()}>No</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DuplicateHospitalNumbers;","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\Home\\PatientList.js",["444","445","446","447","448","449","450","451","452","453","454","455","456","457","458","459","460","461","462","463","464","465","466","467","468","469","470","471","472","473","474","475","476","477","478"],"import React, { useState, useEffect, useCallback, useRef } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport axios from \"axios\";\r\nimport { url as baseUrl, token } from \"../../../../api\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { Card, CardBody } from \"reactstrap\";\r\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { FaEye, FaUserPlus } from \"react-icons/fa\";\r\nimport {\r\n  MdDashboard,\r\n  MdDeleteForever,\r\n  MdModeEdit,\r\n  MdPerson,\r\n} from \"react-icons/md\";\r\nimport { Menu, MenuList, MenuButton, MenuItem } from \"@reach/menu-button\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport { Label } from \"semantic-ui-react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport \"../patient.css\";\r\nimport SplitActionButton from \"../SplitActionButton\";\r\n\r\nimport { forwardRef } from \"react\";\r\n//import { Button} from \"react-bootstrap\";\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport TablePagination from \"@mui/material/TablePagination\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n    \"& a\": {\r\n      textDecoration: \"none !important\",\r\n    },\r\n  },\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n}));\r\n\r\nconst PatientList = (props) => {\r\n  localStorage.setItem(\"menu\", JSON.stringify(0));\r\n  const tableRef = useRef(null);\r\n  const classes = useStyles();\r\n  const [patients, setPatients] = useState([]);\r\n  const [permissions, setPermissions] = useState(props.permissions);\r\n  const [loading, setLoading] = useState(\"\");\r\n  const [modal, setModal] = useState(false);\r\n  const [patient, setPatient] = useState(false);\r\n  const [enablePPI, setEnablePPI] = useState(true);\r\n  const [searchParams, setSearchParams] = useState(\"*\");\r\n  const [totalPages, setTotalPages] = useState(0);\r\n  const [totalRecords, setTotalRecords] = useState(0);\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const history = useHistory();\r\n  const toggle = (id) => {\r\n    //        const patient = patients.find(obj => obj.id == id);\r\n    //        setPatient(patient);\r\n    localStorage.setItem(\"patientID\", JSON.stringify(id));\r\n    setModal(!modal);\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    const patientId = localStorage.getItem(\"patientID\");\r\n    axios\r\n      .delete(`${baseUrl}patient/${patientId}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        localStorage.removeItem(\"patientID\");\r\n        Swal.fire({\r\n          icon: \"success\",\r\n          text: \"Patient Deleted Successfully\",\r\n          timer: 1500,\r\n        });\r\n\r\n        setModal(false);\r\n        history.push(\"/\");\r\n      })\r\n      .catch((error) => {\r\n        Swal.fire({\r\n          icon: \"error\",\r\n          title: \"Oops...\",\r\n          text: \"An error occurred while deleting!!!\",\r\n        });\r\n      });\r\n  };\r\n\r\n  function actionItems(row) {\r\n    return [\r\n      {\r\n        name: \"View\",\r\n        type: \"link\",\r\n        icon: <FaEye size=\"22\" />,\r\n        to: {\r\n          pathname: \"/view-patient\",\r\n          state: { patientId: row.id, permissions: permissions },\r\n        },\r\n      },\r\n      {\r\n        ...(permissions.includes(\"view_patient\") ||\r\n          (permissions.includes(\"all_permission\") && {\r\n            name: \"Dashboard\",\r\n            type: \"link\",\r\n            icon: <MdPerson size=\"20\" color=\"rgb(4, 196, 217)\" />,\r\n            to: {\r\n              pathname: \"/patient-dashboard\",\r\n              state: { patientObj: row, permissions: permissions },\r\n            },\r\n          })),\r\n      },\r\n      {\r\n        ...(permissions.includes(\"edit_patient\") ||\r\n          (permissions.includes(\"all_permission\") && {\r\n            name: \"Edit\",\r\n            type: \"link\",\r\n            icon: <MdModeEdit size=\"20\" color=\"rgb(4, 196, 217)\" />,\r\n            to: {\r\n              pathname: \"/register-patient\",\r\n              state: { patientId: row.id, permissions: permissions },\r\n            },\r\n          })),\r\n      },\r\n      {\r\n        ...(permissions.includes(\"delete_patient\") ||\r\n          (permissions.includes(\"all_permission\") && {\r\n            name: \"Delete\",\r\n            type: \"link\",\r\n            icon: <MdDeleteForever size=\"20\" color=\"rgb(4, 196, 217)\" />,\r\n            deleteAction: () => {\r\n              toggle(row.id);\r\n            },\r\n            to: {\r\n              pathname: \"/#\",\r\n              state: { patientObj: row, permissions: permissions },\r\n            },\r\n          })),\r\n      },\r\n    ];\r\n  }\r\n  const handleRemoteData = (query) =>\r\n    new Promise((resolve, reject) => {\r\n      axios\r\n        .get(\r\n          `${baseUrl}patient?pageSize=${query.pageSize}&pageNo=${query.page}&searchParam=${query.search}`,\r\n          { headers: { Authorization: `Bearer ${token}` } }\r\n        )\r\n        .then((response) => response)\r\n        .then((result) => {\r\n          if (result.data === \"\") {\r\n            resolve({\r\n              data: [],\r\n              page: 0,\r\n              totalCount: 0,\r\n            });\r\n          } else {\r\n            resolve({\r\n              data: result.data.records.map((row) => ({\r\n                name: [row.firstName, row.otherName, row.surname]\r\n                  .filter(Boolean)\r\n                  .join(\", \"),\r\n                id: getHospitalNumber(row.identifier),\r\n                sex:\r\n                  row.sex.toLowerCase().charAt(0).toUpperCase() +\r\n                  row.sex.slice(1).toLowerCase(),\r\n                dateOfBirth: row.dateOfBirth,\r\n                age:\r\n                  row.dateOfBirth === 0 ||\r\n                  row.dateOfBirth === undefined ||\r\n                  row.dateOfBirth === null ||\r\n                  row.dateOfBirth === \"\"\r\n                    ? 0\r\n                    : calculate_age(row.dateOfBirth),\r\n                actions: (\r\n                  <div>\r\n                    {permissions.includes(\"view_patient\") ||\r\n                    permissions.includes(\"all_permission\") ? (\r\n                      <SplitActionButton actions={actionItems(row)} />\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </div>\r\n                ),\r\n              })),\r\n              page: query.page,\r\n              totalCount: result.data.totalRecords,\r\n            });\r\n          }\r\n        });\r\n    });\r\n\r\n  const onDelete = async (id) => {\r\n    try {\r\n      if (id) {\r\n        const response = await axios.delete(`${baseUrl}patient/${id}`, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        });\r\n        window.location.reload();\r\n      }\r\n    } catch (e) {}\r\n  };\r\n\r\n  const onCancelDelete = () => {\r\n    setModal(false);\r\n  };\r\n\r\n  const calculate_age = (dob) => {\r\n    const today = new Date();\r\n    const dateParts = dob.split(\"-\");\r\n    const birthDate = new Date(dob); // create a date object directlyfrom`dob1`argument\r\n    let age_now = today.getFullYear() - birthDate.getFullYear();\r\n    const m = today.getMonth() - birthDate.getMonth();\r\n\r\n    if (age_now <= 0 && m < 0 && today.getDate() < birthDate.getDate()) {\r\n      age_now--;\r\n    }\r\n    // if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n    //   age_now--;\r\n    // }\r\n    if (age_now === 0) {\r\n      return m + \" month(s)\";\r\n    }\r\n    return age_now + \" year(s)\";\r\n  };\r\n\r\n  const getHospitalNumber = (identifier) => {\r\n    const hospitalNumber = identifier.identifier.find(\r\n      (obj) => obj.type == \"HospitalNumber\"\r\n    );\r\n    return hospitalNumber ? hospitalNumber.value : \"\";\r\n  };\r\n\r\n  const getAddress = (address) => {\r\n    const city =\r\n      address && address.address && address.address.length > 0\r\n        ? address.address[0].city\r\n        : null;\r\n    return city;\r\n  };\r\n\r\n  const getGender = (gender) => {\r\n    return gender.display;\r\n  };\r\n\r\n  const enablePPIColumns = () => {\r\n    setEnablePPI(!enablePPI);\r\n  };\r\n  const PPISelect = () => (\r\n    <div>\r\n      {permissions.includes(\"view_patient\") ||\r\n      permissions.includes(\"all_permission\") ? (\r\n        <FormGroup className=\" float-right mr-1\">\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox\r\n                onChange={enablePPIColumns}\r\n                checked={!enablePPI}\r\n                style={{ color: \"#014d88\", fontWeight: \"bold\" }}\r\n              />\r\n            }\r\n            label=\"Show PII\"\r\n            style={{ color: \"#014d88\", fontWeight: \"bolder\" }}\r\n          />\r\n        </FormGroup>\r\n      ) : (\r\n        <h5 style={{ color: \"#3d4465\", fontWeight: \"bold\" }}>Patients</h5>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  const handleChangePage = (page) => {\r\n    setCurrentPage(page + 1);\r\n  };\r\n  const localization = {\r\n    pagination: {\r\n      labelDisplayedRows: `${currentPage} - 10 of 2022`,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <ToastContainer autoClose={3000} hideProgressBar />\r\n      <MaterialTable\r\n        tableRef={tableRef}\r\n        /*onSearchChange={(e) => {\r\n                    handleSearchChange(e);\r\n                }}*/\r\n        icons={tableIcons}\r\n        title={<PPISelect />}\r\n        columns={[\r\n          {\r\n            title: \"Name\",\r\n            field: \"name\",\r\n            filtering: false,\r\n            hidden: enablePPI,\r\n          },\r\n          { title: \"Hosp. Number\", field: \"id\", filtering: false },\r\n          { title: \"Sex\", field: \"sex\", filtering: false },\r\n          { title: \"Date Of Birth\", field: \"dateOfBirth\", filtering: false },\r\n          { title: \"Age\", field: \"age\", filtering: false },\r\n          /*{ title: \"Address\", field: \"address\", filtering: false },*/\r\n          /*{ title: \"Status\", field: \"status\", filtering: false },*/\r\n          { title: \"Actions\", field: \"actions\", filtering: false },\r\n        ]}\r\n        isLoading={loading}\r\n        data={handleRemoteData}\r\n        options={{\r\n          headerStyle: {\r\n            backgroundColor: \"#014d88\",\r\n            color: \"#fff\",\r\n            fontSize: \"16px\",\r\n            padding: \"10px\",\r\n            fontWeight: \"bolder\",\r\n          },\r\n          searchFieldStyle: {\r\n            width: \"50%\",\r\n          },\r\n          filtering: false,\r\n          exportButton: false,\r\n          searchFieldAlignment: \"left\",\r\n          pageSizeOptions: [10, 20, 100],\r\n          pageSize: 10,\r\n          debounceInterval: 400,\r\n        }}\r\n        onChangePage={handleChangePage}\r\n        //localization={localization}\r\n      />\r\n      <Modal isOpen={modal} toggle={onCancelDelete}>\r\n        <ModalHeader toggle={onCancelDelete}>Delete Patient</ModalHeader>\r\n        <ModalBody>\r\n          Are you sure you want to delete this record?{\" \"}\r\n          {patient\r\n            ? patient.surname +\r\n              \", \" +\r\n              patient.firstname +\r\n              \" \" +\r\n              patient.otherName\r\n            : \"\"}\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"primary\" type=\"button\" onClick={handleDelete}>\r\n            Yes\r\n          </Button>{\" \"}\r\n          <Button\r\n            color=\"secondary\"\r\n            type=\"button\"\r\n            onClick={(e) => onCancelDelete()}\r\n          >\r\n            No\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PatientList;\r\n","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\CaptureBiometric.js",["479","480","481","482","483","484","485","486","487","488","489","490","491","492","493","494"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Form,\r\n  Row,\r\n  Label,\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  FormGroup,\r\n  CardHeader,\r\n  Input,\r\n} from \"reactstrap\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Select from \"react-select\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport FingerprintIcon from \"@material-ui/icons/Fingerprint\";\r\nimport { Button2, Icon, List } from \"semantic-ui-react\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport ThumbUpIcon from \"@material-ui/icons/ThumbUp\";\r\nimport axios from \"axios\";\r\nimport { token, url as baseUrl } from \"../../../api\";\r\n\r\nimport { green, red } from \"@mui/material/colors\";\r\nimport { Dimmer, Loader, Image, Segment } from \"semantic-ui-react\";\r\n\r\nimport Box from \"@mui/material/Box\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Fab from \"@mui/material/Fab\";\r\nimport CheckIcon from \"@mui/icons-material/Check\";\r\n//import SaveIcon from '@mui/icons-material/Save';\r\n// import LinearProgress from '@mui/material/LinearProgress';\r\nimport Typography from \"@mui/material/Typography\";\r\n// import CancelIcon from '@mui/icons-material/Cancel';\r\n// import ModalImage from \"react-modal-image\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"12.8px\",\r\n  },\r\n}));\r\n\r\nlet checkUrl = \"\";\r\n\r\nconst CaptureBiometric = (props) => {\r\n  const classes = useStyles();\r\n  const biometricDevices = props.biometricDevices;\r\n  //Get the default device\r\n  const selectedDevice = biometricDevices.find((x) => x.active === \"true\");\r\n  console.log(biometricDevices);\r\n  checkUrl = selectedDevice.url === null ? baseUrl : selectedDevice.url;\r\n\r\n  const [objValues, setObjValues] = useState({\r\n    biometricType: \"FINGERPRINT\",\r\n    patientId: props.patientId,\r\n    templateType: \"\",\r\n    device: \"\",\r\n  });\r\n  const [fingerType, setFingerType] = useState([]);\r\n  const [devices, setDevices] = useState(props.biometricDevices);\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [showCapture, setshowCapture] = React.useState(false);\r\n  const [tryAgain, setTryAgain] = React.useState(false);\r\n  const [success, setSuccess] = React.useState(false);\r\n  const [errors, setErrors] = useState({});\r\n  // const [responseImage, setResponseImage] = useState(\"\")\r\n  const [capturedFingered, setCapturedFingered] = useState([]);\r\n  //console.log(biometricDevices)\r\n  const buttonSx = {\r\n    ...(success && {\r\n      bgcolor: green[500],\r\n      \"&:hover\": {\r\n        bgcolor: green[700],\r\n      },\r\n    }),\r\n  };\r\n\r\n  useEffect(() => {\r\n    TemplateType();\r\n    if (objValues.device === \"\") {\r\n      setshowCapture(false);\r\n    }\r\n  }, []);\r\n  //Get list of Finger index\r\n  const TemplateType = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/BIOMETRIC_CAPTURE_FINGERS`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setFingerType(response.data);\r\n      })\r\n      .catch((error) => {});\r\n  };\r\n\r\n  //check if device is plugged or not\r\n  const checkDevice = (e) => {\r\n    const deviceName = e.target.value;\r\n    const selectedDevice = biometricDevices.find((x) => x.name === deviceName);\r\n    checkUrl = selectedDevice.url === null ? baseUrl : selectedDevice.url;\r\n    console.log(checkUrl);\r\n    setObjValues({ ...objValues, device: deviceName });\r\n    axios\r\n      // .get(`${checkUrl}biometrics/secugen/boot?reader=${deviceName}`,\r\n      .get(`${checkUrl}`, { headers: { Authorization: `Bearer ${token}` } })\r\n      .then((response) => {\r\n        if (response.data.errorType === \"ERROR\") {\r\n          toast.error(response.data.errorName + \" is not plug\");\r\n          //setshowCapture(true)\r\n        } else {\r\n          setshowCapture(true);\r\n        }\r\n      })\r\n      .catch((error) => {});\r\n  };\r\n  // handle the input changes\r\n\r\n  const handleInputChange = (e) => {\r\n    setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n  };\r\n  //form validation\r\n  const validate = () => {\r\n    let temp = { ...errors };\r\n    temp.templateType = objValues.templateType ? \"\" : \"This field is required\";\r\n    temp.device = objValues.device ? \"\" : \"This field is required\";\r\n    setErrors({\r\n      ...temp,\r\n    });\r\n    return Object.values(temp).every((x) => x == \"\");\r\n  };\r\n  //to capture  selected index finger\r\n  const captureFinger = (e) => {\r\n    e.preventDefault();\r\n    if (validate()) {\r\n      // axios.post(`${checkUrl}biometrics/secugen/enrollment?reader=SG_DEV_AUTO`,objValues,\r\n      axios\r\n        .post(`${checkUrl}`, objValues, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((response) => {\r\n          setLoading(true);\r\n          if (response.data.type === \"ERROR\") {\r\n            setLoading(false);\r\n            setTryAgain(true);\r\n            window.setTimeout(() => {\r\n              setTryAgain(false);\r\n            }, 5000);\r\n            toast.error(response.data.message.ERROR);\r\n          } else {\r\n            const templateType = response.data.templateType;\r\n            setTryAgain(false);\r\n            setSuccess(true);\r\n            window.setTimeout(() => {\r\n              setSuccess(false);\r\n              setLoading(false);\r\n            }, 5000);\r\n\r\n            setCapturedFingered([...capturedFingered, response.data]);\r\n            fingerType.splice(templateType, 1);\r\n            setFingerType([...fingerType]);\r\n          }\r\n          //toast.success(\"Record save successful\");\r\n        })\r\n        .catch((error) => {});\r\n    }\r\n  };\r\n\r\n  //Save Biometric capture\r\n  const saveBiometrics = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (capturedFingered.length > 1) {\r\n      const capturedObj = capturedFingered[capturedFingered.length - 1];\r\n\r\n      axios\r\n        .post(`${baseUrl}biometrics/templates`, capturedObj, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((response) => {\r\n          toast.success(\"Biometric save successful\");\r\n          setCapturedFingered([]);\r\n          props.setPatientBiometricStatus(true);\r\n          props.togglestatus();\r\n        })\r\n        .catch((error) => {\r\n          toast.error(\"Something went wrong\");\r\n        });\r\n    } else {\r\n      toast.error(\"You can't save less than 2 finger\");\r\n    }\r\n  };\r\n\r\n  // console.log(capturedFingered)\r\n\r\n  return (\r\n    <div>\r\n      <Card>\r\n        <CardBody>\r\n          <Modal\r\n            isOpen={props.modalstatus}\r\n            toggle={props.togglestatus}\r\n            className={props.className}\r\n            size=\"lg\"\r\n          >\r\n            <Form>\r\n              <ModalHeader toggle={props.togglestatus}>\r\n                capture Biometric\r\n              </ModalHeader>\r\n              <ModalBody>\r\n                <Card>\r\n                  {/* <CardHeader>\r\n                                    Capture Biometrics\r\n                                </CardHeader> */}\r\n                  <CardBody>\r\n                    <Row form>\r\n                      <ToastContainer />\r\n                      <Col md={4}>\r\n                        <FormGroup>\r\n                          <Label for=\"device\">Select Device </Label>\r\n                          <Input\r\n                            type=\"select\"\r\n                            name=\"device\"\r\n                            id=\"device\"\r\n                            //onChange={checkDevice}\r\n                            value={objValues.device}\r\n                            required\r\n                            disabled\r\n                          >\r\n                            <option value=\"\">Select Device </option>\r\n                            {biometricDevices.map(({ id, name }) => (\r\n                              <option key={id} value={name}>\r\n                                {name}\r\n                              </option>\r\n                            ))}\r\n                          </Input>\r\n                          {errors.device !== \"\" ? (\r\n                            <span className={classes.error}>\r\n                              {errors.device}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n                      </Col>\r\n                      {showCapture ? (\r\n                        <>\r\n                          <Col md={4}>\r\n                            <FormGroup>\r\n                              <Label for=\"device\">Select Finger</Label>\r\n                              <Input\r\n                                type=\"select\"\r\n                                name=\"templateType\"\r\n                                id=\"templateType\"\r\n                                onChange={handleInputChange}\r\n                                value={objValues.templateType}\r\n                                required\r\n                              >\r\n                                <option value=\"\">Select Finger </option>\r\n\r\n                                {fingerType.map((value) => (\r\n                                  <option key={value.id} value={value.display}>\r\n                                    {value.display}\r\n                                  </option>\r\n                                ))}\r\n                              </Input>\r\n                              {errors.templateType !== \"\" ? (\r\n                                <span className={classes.error}>\r\n                                  {errors.templateType}\r\n                                </span>\r\n                              ) : (\r\n                                \"\"\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n\r\n                          <Col md={4}>\r\n                            <MatButton\r\n                              type=\"button\"\r\n                              variant=\"contained\"\r\n                              color=\"primary\"\r\n                              onClick={captureFinger}\r\n                              className={\"mt-4\"}\r\n                              startIcon={<FingerprintIcon />}\r\n                            >\r\n                              Capture Finger\r\n                            </MatButton>\r\n                          </Col>\r\n                          <br />\r\n                        </>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                      {/* <img width='500' height='200' src={responseImage}/> */}\r\n                      <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\r\n                        {loading && (\r\n                          <>\r\n                            <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\r\n                              <Box sx={{ m: 1, position: \"relative\" }}>\r\n                                <Fab\r\n                                  aria-label=\"save\"\r\n                                  color=\"secondary\"\r\n                                  sx={buttonSx}\r\n                                >\r\n                                  {success ? (\r\n                                    <CheckIcon />\r\n                                  ) : (\r\n                                    <FingerprintIcon />\r\n                                  )}\r\n                                </Fab>\r\n                                {loading && (\r\n                                  <CircularProgress\r\n                                    size={68}\r\n                                    sx={{\r\n                                      color: green[500],\r\n                                      position: \"absolute\",\r\n                                      top: -6,\r\n                                      left: -6,\r\n                                      zIndex: 1,\r\n                                    }}\r\n                                  />\r\n                                )}\r\n                              </Box>\r\n                              <Typography\r\n                                variant=\"h6\"\r\n                                gutterBottom\r\n                                component=\"div\"\r\n                              >\r\n                                {success\r\n                                  ? ` your  ${objValues.templateType} Finger captured.`\r\n                                  : `Please place your  ${objValues.templateType} Finger on scanner.`}\r\n                              </Typography>\r\n                            </Box>\r\n                          </>\r\n                        )}\r\n                        {tryAgain && (\r\n                          <>\r\n                            <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\r\n                              <Box sx={{ m: 1, position: \"relative\" }}>\r\n                                <Fab\r\n                                  aria-label=\"save\"\r\n                                  color=\"secondary\"\r\n                                  sx={buttonSx}\r\n                                >\r\n                                  <FingerprintIcon />\r\n                                </Fab>\r\n                                {tryAgain && (\r\n                                  <CircularProgress\r\n                                    size={68}\r\n                                    sx={{\r\n                                      color: red[500],\r\n                                      position: \"absolute\",\r\n                                      top: -6,\r\n                                      left: -6,\r\n                                      zIndex: 1,\r\n                                    }}\r\n                                  />\r\n                                )}\r\n                              </Box>\r\n                              <Typography\r\n                                variant=\"h6\"\r\n                                gutterBottom\r\n                                component=\"div\"\r\n                              >\r\n                                Click to Recapture Again\r\n                              </Typography>\r\n                            </Box>\r\n                          </>\r\n                        )}\r\n                        {/*  */}\r\n                      </Col>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                      {capturedFingered.length >= 1 ? (\r\n                        <>\r\n                          <Col md={12}>\r\n                            <h3>Captured Fingerprints</h3>\r\n                          </Col>\r\n                          <Col md={12} style={{ marginTop: \"20px\" }}>\r\n                            <List celled horizontal>\r\n                              {capturedFingered.map((x) => (\r\n                                <List.Item>\r\n                                  {/* <List.Header><Icon name='cancel'  color='red' /> </List.Header> */}\r\n                                  <List.Content>\r\n                                    {\" \"}\r\n                                    <FingerprintIcon\r\n                                      style={{ color: \"#2E7D32\", fontSize: 40 }}\r\n                                    />\r\n                                    {x.templateType}\r\n                                  </List.Content>\r\n                                </List.Item>\r\n                              ))}\r\n                            </List>\r\n                          </Col>\r\n                          {/* <Col md={6} style={{marginTop:\"20px\"}}>\r\n                                        <List celled horizontal>\r\n                                            {[1,2,3].map((x) => (\r\n                                                <List.Item>\r\n                                                    <List.Header><Icon name='checkmark' color='green'/> </List.Header>\r\n                                                    <List.Content > <FingerprintIcon style={{color:\"#2E7D32\", fontSize: 40}} /> Finger Type</List.Content>\r\n                                                </List.Item>\r\n                                            ))}\r\n\r\n                                        </List>\r\n\r\n                                    </Col> */}\r\n                          <br />\r\n                          <br />\r\n                          <br />\r\n                          <br />\r\n                          <br />\r\n                          <br />\r\n                          <Col md={12}>\r\n                            <MatButton\r\n                              type=\"button\"\r\n                              variant=\"contained\"\r\n                              color=\"primary\"\r\n                              onClick={saveBiometrics}\r\n                              // className={classes.button}\r\n                              startIcon={<SaveIcon />}\r\n                            >\r\n                              Save Capture\r\n                            </MatButton>\r\n                          </Col>\r\n                        </>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </Row>\r\n                  </CardBody>\r\n                </Card>\r\n              </ModalBody>\r\n            </Form>\r\n          </Modal>\r\n        </CardBody>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CaptureBiometric;\r\n","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\Home\\BiometricsList.js",["495","496","497","498","499","500","501","502","503","504","505","506","507","508","509","510","511","512","513"],"//List of patients without biometrics\r\nimport React, { forwardRef, useCallback, useEffect, useState } from \"react\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport MaterialTable from \"material-table\";\r\nimport SplitActionButton from \"../SplitActionButton\";\r\nimport { Modal, ModalBody, ModalFooter, ModalHeader } from \"reactstrap\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport axios from \"axios\";\r\nimport { token, url as baseUrl } from \"../../../../api\";\r\nimport { FaEye } from \"react-icons/fa\";\r\nimport {\r\n  MdDeleteForever,\r\n  MdModeEdit,\r\n  MdPerson,\r\n  MdFingerprint,\r\n} from \"react-icons/md\";\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n    \"& a\": {\r\n      textDecoration: \"none !important\",\r\n    },\r\n  },\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n}));\r\n\r\nfunction BiometricsList(props) {\r\n  const classes = useStyles();\r\n  const [patients, setPatients] = useState([]);\r\n  const [permissions, setPermissions] = useState(props.permissions);\r\n  const [loading, setLoading] = useState(\"\");\r\n  const [patient, setPatient] = useState(false);\r\n  const [enablePPI, setEnablePPI] = useState(true);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n  //Get list of Finger index\r\n  const userPermission = () => {\r\n    axios\r\n      .get(`${baseUrl}account`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setPermissions(response.data.permissions);\r\n      })\r\n      .catch((error) => {});\r\n  };\r\n  const loadPatients = useCallback(async () => {\r\n    try {\r\n      await axios\r\n        .get(`${baseUrl}patient/getall-patients-without-biometric`, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((response) => {\r\n          if (response.data) {\r\n            setPatients(response.data);\r\n          }\r\n        });\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }, []);\r\n\r\n  function actionItems(row) {\r\n    return [\r\n      {\r\n        ...(permissions.includes(\"view_patient\") ||\r\n          (permissions.includes(\"all_permission\") && {\r\n            name: \"Capture\",\r\n            type: \"link\",\r\n            icon: <MdFingerprint size=\"22\" />,\r\n            to: {\r\n              pathname: \"/patient-dashboard\",\r\n              state: { patientObj: row, permissions: permissions },\r\n            },\r\n          })),\r\n      },\r\n    ];\r\n  }\r\n\r\n  const handleRemoteData = (query) =>\r\n    new Promise((resolve, reject) => {\r\n      axios\r\n        .get(\r\n          `${baseUrl}patient/getall-patients-without-biometric?pageSize=${query.pageSize}&pageNo=${query.page}&searchParam=${query.search}`,\r\n          { headers: { Authorization: `Bearer ${token}` } }\r\n        )\r\n        .then((response) => response)\r\n        .then((result) => {\r\n          resolve({\r\n            data: result.data.records.map((row) => ({\r\n              name: [row.firstName, row.otherName, row.surname]\r\n                .filter(Boolean)\r\n                .join(\", \"),\r\n              id: getHospitalNumber(row.identifier),\r\n              sex:\r\n                row.sex.toLowerCase().charAt(0).toUpperCase() +\r\n                row.sex.slice(1).toLowerCase(),\r\n              dateOfBirth: row.dateOfBirth,\r\n              age:\r\n                row.dateOfBirth === 0 ||\r\n                row.dateOfBirth === undefined ||\r\n                row.dateOfBirth === null ||\r\n                row.dateOfBirth === \"\"\r\n                  ? 0\r\n                  : calculate_age(row.dateOfBirth),\r\n              actions: (\r\n                <div>\r\n                  {permissions.includes(\"view_patient\") ||\r\n                  permissions.includes(\"all_permission\") ? (\r\n                    <SplitActionButton actions={actionItems(row)} />\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </div>\r\n              ),\r\n            })),\r\n            page: query.page,\r\n            totalCount: result.data.totalRecords,\r\n          });\r\n        });\r\n    });\r\n  useEffect(() => {\r\n    userPermission();\r\n    loadPatients();\r\n  }, []);\r\n  const calculate_age = (dob) => {\r\n    const today = new Date();\r\n    const dateParts = dob.split(\"-\");\r\n    const birthDate = new Date(dob); // create a date object directlyfrom`dob1`argument\r\n    let age_now = today.getFullYear() - birthDate.getFullYear();\r\n    const m = today.getMonth() - birthDate.getMonth();\r\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n      age_now--;\r\n    }\r\n    if (age_now === 0) {\r\n      return m + \" month(s)\";\r\n    }\r\n    return age_now + \" year(s)\";\r\n  };\r\n  const getHospitalNumber = (identifier) => {\r\n    const hospitalNumber = identifier.identifier.find(\r\n      (obj) => obj.type == \"HospitalNumber\"\r\n    );\r\n    return hospitalNumber ? hospitalNumber.value : \"\";\r\n  };\r\n\r\n  const enablePPIColumns = () => {\r\n    setEnablePPI(!enablePPI);\r\n  };\r\n  const PPISelect = () => (\r\n    <div>\r\n      {permissions.includes(\"view_patient\") ||\r\n      permissions.includes(\"all_permission\") ? (\r\n        <FormGroup className=\" float-right mr-1\">\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox\r\n                onChange={enablePPIColumns}\r\n                checked={!enablePPI}\r\n                style={{ color: \"#014d88\", fontWeight: \"bold\" }}\r\n              />\r\n            }\r\n            label=\"Show PII\"\r\n            style={{ color: \"#014d88\", fontWeight: \"bolder\" }}\r\n          />\r\n        </FormGroup>\r\n      ) : (\r\n        <h5 style={{ color: \"#3d4465\", fontWeight: \"bold\" }}>Patients</h5>\r\n      )}\r\n    </div>\r\n  );\r\n  const handleChangePage = (page) => {\r\n    setCurrentPage(page + 1);\r\n  };\r\n  const localization = {\r\n    pagination: {\r\n      labelDisplayedRows: `Page: ${currentPage}`,\r\n    },\r\n  };\r\n  return (\r\n    <div>\r\n      {/*<ToastContainer autoClose={3000} hideProgressBar />*/}\r\n      <h3>Patients without biometrics</h3>\r\n      <MaterialTable\r\n        icons={tableIcons}\r\n        title={<PPISelect />}\r\n        columns={[\r\n          {\r\n            title: \"Name\",\r\n            field: \"name\",\r\n            filtering: false,\r\n            hidden: enablePPI,\r\n          },\r\n          { title: \"Hosp. Number\", field: \"id\", filtering: false },\r\n          { title: \"Sex\", field: \"sex\", filtering: false },\r\n          { title: \"Date Of Birth\", field: \"dateOfBirth\", filtering: false },\r\n          { title: \"Age\", field: \"age\", filtering: false },\r\n          { title: \"Actions\", field: \"actions\", filtering: false },\r\n        ]}\r\n        isLoading={loading}\r\n        data={handleRemoteData}\r\n        options={{\r\n          headerStyle: {\r\n            backgroundColor: \"#014d88\",\r\n            color: \"#fff\",\r\n            fontSize: \"16px\",\r\n            padding: \"10px\",\r\n            fontWeight: \"bolder\",\r\n          },\r\n          searchFieldStyle: {\r\n            width: \"50%\",\r\n          },\r\n          filtering: false,\r\n          exportButton: false,\r\n          searchFieldAlignment: \"left\",\r\n          pageSizeOptions: [10, 20, 100],\r\n          pageSize: 10,\r\n          debounceInterval: 400,\r\n        }}\r\n        onChangePage={handleChangePage}\r\n        //localization={localization}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BiometricsList;\r\n","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\Home\\CheckedInPatients.js",["514","515","516","517","518","519","520","521","522","523","524","525","526","527","528","529","530","531","532","533","534","535","536","537","538","539","540","541","542","543","544","545","546","547","548","549","550","551","552"],"import React, {useState, useEffect, useCallback, useRef} from 'react'\r\nimport MaterialTable from 'material-table';\r\nimport axios from \"axios\";\r\nimport { url as baseUrl, token } from \"../../../../api\";\r\nimport { Link } from 'react-router-dom'\r\nimport { Card,CardBody,} from 'reactstrap';\r\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport 'react-widgets/dist/css/react-widgets.css';\r\nimport {FaEye, FaUserPlus} from \"react-icons/fa\";\r\nimport { MdDashboard, MdDeleteForever, MdModeEdit,MdPerson} from \"react-icons/md\";\r\nimport {Menu,MenuList,MenuButton,MenuItem,} from \"@reach/menu-button\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport { Label } from 'semantic-ui-react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport \"../patient.css\";\r\nimport SplitActionButton from '../SplitActionButton';\r\n\r\nimport { forwardRef } from 'react';\r\n//import { Button} from \"react-bootstrap\";\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Checkbox from '@mui/material/Checkbox';\r\n\r\n\r\n\r\n\r\nconst tableIcons = {\r\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n    SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        },\r\n        '& a':{\r\n            textDecoration:'none !important'\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n    },\r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    },\r\n}));\r\n\r\n\r\n\r\nconst CheckedInPatients = (props) => {\r\n    const tableRef = useRef(null);\r\n    const classes = useStyles();\r\n    const [patients, setPatients] = useState([]);\r\n    const [permissions, setPermissions] = useState(props.permissions);\r\n    const [loading, setLoading] = useState('');\r\n    const [modal, setModal] = useState(false);\r\n    const [patient, setPatient] = useState(false);\r\n    const [enablePPI, setEnablePPI] = useState(true);\r\n    const [searchParams,setSearchParams] = useState('*');\r\n    const [totalPages,setTotalPages] = useState(0);\r\n    const [totalRecords,setTotalRecords] = useState(0);\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(10);\r\n    const [currentPage,setCurrentPage] = useState(1);\r\n    const toggle = (id) => {\r\n        const patient = patients.find(obj => obj.id == id);\r\n        setPatient(patient);\r\n        setModal(!modal);\r\n    }\r\n\r\n\r\n    function actionItems(row){\r\n        return  [\r\n            {\r\n                name:'View',\r\n                type:'link',\r\n                icon:<FaEye  size=\"22\"/>,\r\n                to:{\r\n                    pathname: \"/register-patient\",\r\n                    state: { patientId : row.id, permissions:permissions  }\r\n                }\r\n            },\r\n            {...(permissions.includes('view_patient') || permissions.includes(\"all_permission\")&&\r\n                    {\r\n                        name:'Dashboard',\r\n                        type:'link',\r\n                        icon:<MdPerson size=\"20\" color='rgb(4, 196, 217)' />,\r\n                        to:{\r\n                            pathname: \"/patient-dashboard\",\r\n                            state: { patientObj: row, permissions:permissions  }\r\n                        }\r\n                    }\r\n                )},\r\n            {...(permissions.includes('edit_patient') || permissions.includes(\"all_permission\")&&\r\n                    {\r\n                        name:'Edit',\r\n                        type:'link',\r\n                        icon:<MdModeEdit size=\"20\" color='rgb(4, 196, 217)' />,\r\n                        to:{\r\n                            pathname: \"/register-patient\",\r\n                            state: { patientId : row.id, permissions:permissions  }\r\n                        }\r\n                    }\r\n                )},\r\n            {...(permissions.includes('delete_patient') || permissions.includes(\"all_permission\")&&\r\n                    {\r\n                        name:'Delete',\r\n                        type:'link',\r\n                        icon:<MdDeleteForever size=\"20\" color='rgb(4, 196, 217)'  />,\r\n                        to:{\r\n                            pathname: \"/#\",\r\n                            state: { patientObj: row, permissions:permissions  }\r\n                        }\r\n                    }\r\n                )}\r\n        ]\r\n    }\r\n    const handleRemoteData = query =>\r\n        new Promise((resolve, reject) => {\r\n            axios.get(`${baseUrl}patient/checked-in?pageSize=${query.pageSize}&pageNo=${query.page}&searchParam=${query.search}`, { headers: {\"Authorization\" : `Bearer ${token}`} })\r\n                .then(response => response)\r\n                .then(result => {\r\n                    resolve({\r\n                        data: result.data.records.map((row) => ({\r\n                            name: [row.firstName, row.otherName, row.surname].filter(Boolean).join(\", \"),\r\n                            id: getHospitalNumber(row.identifier),\r\n                            sex: row.sex.toLowerCase().charAt(0).toUpperCase() + row.sex.slice(1).toLowerCase(),\r\n                            dateOfBirth: row.dateOfBirth,\r\n                            age: (row.dateOfBirth === 0 ||\r\n                                row.dateOfBirth === undefined ||\r\n                                row.dateOfBirth === null ||\r\n                                row.dateOfBirth === \"\" )\r\n                                ? 0\r\n                                : calculate_age(row.dateOfBirth),\r\n                            actions:\r\n                                <div>\r\n                                    {permissions.includes('view_patient') || permissions.includes(\"all_permission\") ? (\r\n                                        <SplitActionButton actions={actionItems(row)} />\r\n                                    ):\"\"\r\n                                    }\r\n                                </div>\r\n                        })),\r\n                        page: query.page,\r\n                        totalCount: result.data.totalRecords\r\n                    });\r\n                });\r\n        })\r\n\r\n\r\n    const onDelete = async (id) => {\r\n        try {\r\n            if (id) {\r\n                const response = await axios.delete(`${baseUrl}patient/${id}`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n                window.location.reload();\r\n            }\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n\r\n    const onCancelDelete = () => {\r\n        setModal(false);\r\n    }\r\n\r\n    const calculate_age = dob => {\r\n\r\n        const today = new Date();\r\n        const dateParts = dob.split(\"-\");\r\n        const birthDate = new Date(dob); // create a date object directlyfrom`dob1`argument\r\n        let age_now = today.getFullYear() - birthDate.getFullYear();\r\n        const m = today.getMonth() - birthDate.getMonth();\r\n        if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n            age_now--;\r\n        }\r\n        if (age_now === 0) {\r\n            return m + \" month(s)\";\r\n        }\r\n        return age_now + \" year(s)\";\r\n    };\r\n\r\n    const getHospitalNumber = (identifier) => {\r\n        const hospitalNumber = identifier.identifier.find(obj => obj.type == 'HospitalNumber');\r\n        return hospitalNumber ? hospitalNumber.value : '';\r\n    };\r\n\r\n    const getAddress = (address) => {\r\n        const city = address && address.address && address.address.length > 0 ? address.address[0].city : null;\r\n        return city;\r\n    };\r\n\r\n    const getGender = (gender) => {\r\n        return gender.display;\r\n    };\r\n\r\n\r\n\r\n    const enablePPIColumns = () =>{\r\n        setEnablePPI(!enablePPI)\r\n    }\r\n    const PPISelect = () => <div>\r\n        {permissions.includes('view_patient') || permissions.includes(\"all_permission\") ? (\r\n            <FormGroup className=\" float-right mr-1\">\r\n                <FormControlLabel  control={\r\n                    <Checkbox\r\n                        onChange={enablePPIColumns}\r\n                        checked={!enablePPI}\r\n                        style={{color:'#014d88',fontWeight:'bold'}}\r\n                    />\r\n                } label=\"Show PII\" style={{color:'#014d88',fontWeight:'bolder'}} />\r\n            </FormGroup>\r\n        ):<h5 style={{color:'#3d4465',fontWeight:'bold'}}>Patients</h5>\r\n        }\r\n    </div>;\r\n\r\n\r\n    const handleChangePage = (page) => {\r\n        setCurrentPage(page + 1);\r\n    };\r\n    const localization = {\r\n        pagination: {\r\n            labelDisplayedRows: `Page: ${currentPage}`\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <ToastContainer autoClose={3000} hideProgressBar />\r\n            <MaterialTable\r\n                tableRef={tableRef}\r\n                /*onSearchChange={(e) => {\r\n                    handleSearchChange(e);\r\n                }}*/\r\n                icons={tableIcons}\r\n                title={<PPISelect/>}\r\n                columns={[\r\n                    {\r\n                        title: \"Name\",\r\n                        field: \"name\",\r\n                        filtering: false,\r\n                        hidden:enablePPI\r\n                    },\r\n                    { title: \"Hosp. Number\", field: \"id\" , filtering: false},\r\n                    { title: \"Sex\", field: \"sex\", filtering: false },\r\n                    { title: \"Date Of Birth\", field: \"dateOfBirth\", filtering: false },\r\n                    { title: \"Age\", field: \"age\", filtering: false },\r\n                    /*{ title: \"Address\", field: \"address\", filtering: false },*/\r\n                    /*{ title: \"Status\", field: \"status\", filtering: false },*/\r\n                    {title: \"Actions\", field: \"actions\", filtering: false },\r\n                ]}\r\n                isLoading={loading}\r\n                data={handleRemoteData}\r\n\r\n                options={{\r\n                    headerStyle: {\r\n                        backgroundColor: \"#014d88\",\r\n                        color: \"#fff\",\r\n                        fontSize:'16px',\r\n                        padding:'10px',\r\n                        fontWeight:'bolder'\r\n                    },\r\n                    searchFieldStyle: {\r\n                        width : '50%'\r\n                    },\r\n                    filtering: false,\r\n                    exportButton: false,\r\n                    searchFieldAlignment: 'left',\r\n                    pageSizeOptions:[10,20,100],\r\n                    pageSize:10,\r\n                    debounceInterval: 400,\r\n\r\n                }}\r\n                onChangePage={handleChangePage}\r\n                //localization={localization}\r\n\r\n            />\r\n            <Modal isOpen={modal} toggle={onCancelDelete}>\r\n                <ModalHeader toggle={onCancelDelete}>Delete Patient</ModalHeader>\r\n                <ModalBody>\r\n                    Are you sure to delete this record? { patient ? patient.surname +  ', ' + patient.firstname +  ' ' + patient.otherName : '' }\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"primary\" type=\"button\" onClick={(e) => onDelete(patient.id)}>Yes</Button>{' '}\r\n                    <Button color=\"secondary\" type=\"button\" onClick={(e) => onCancelDelete()}>No</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CheckedInPatients;\r\n\r\n\r\n","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\Home\\Biometrics.js",["553","554","555","556","557","558","559","560","561","562","563","564","565","566","567","568","569","570","571","572","573","574","575","576","577","578","579","580","581","582","583","584","585","586","587"],"import React, { useState, useEffect, useCallback, useRef } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport axios from \"axios\";\r\nimport { url as baseUrl, token } from \"../../../../api\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, CardBody } from \"reactstrap\";\r\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { FaEye, FaUserPlus } from \"react-icons/fa\";\r\nimport {\r\n  MdDashboard,\r\n  MdDeleteForever,\r\n  MdModeEdit,\r\n  MdPerson,\r\n} from \"react-icons/md\";\r\nimport { Menu, MenuList, MenuButton } from \"@reach/menu-button\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport { Label } from \"semantic-ui-react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport \"../patient.css\";\r\nimport SplitActionButton from \"../SplitActionButton\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport BiometricsList from \"./BiometricsList\";\r\nimport NotCaptured from \"./NotCaptured\";\r\n\r\nimport { forwardRef } from \"react\";\r\n//import { Button} from \"react-bootstrap\";\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport TablePagination from \"@mui/material/TablePagination\";\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n    \"& a\": {\r\n      textDecoration: \"none !important\",\r\n    },\r\n  },\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n}));\r\n\r\nconst Biometrics = (props) => {\r\n  const tableRef = useRef(null);\r\n  const classes = useStyles();\r\n  const [patients, setPatients] = useState([]);\r\n  const [permissions, setPermissions] = useState(props.permissions);\r\n  const [loading, setLoading] = useState(\"\");\r\n  const [modal, setModal] = useState(false);\r\n  const [patient, setPatient] = useState(false);\r\n  const [enablePPI, setEnablePPI] = useState(true);\r\n  const [searchParams, setSearchParams] = useState(\"*\");\r\n  const [totalPages, setTotalPages] = useState(0);\r\n  const [totalRecords, setTotalRecords] = useState(0);\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [status, setStatus] = useState(1);\r\n  const toggle = (id) => {\r\n    const patient = patients.find((obj) => obj.id == id);\r\n    setPatient(patient);\r\n    setModal(!modal);\r\n  };\r\n\r\n  function actionItems(row) {\r\n    return [\r\n      {\r\n        name: \"View\",\r\n        type: \"link\",\r\n        icon: <FaEye size=\"22\" />,\r\n        to: {\r\n          pathname: \"/patient-biometrics\",\r\n          state: { patientObj: row, permissions: permissions },\r\n        },\r\n      },\r\n      {\r\n        ...(permissions.includes(\"view_patient\") ||\r\n          (permissions.includes(\"all_permission\") && {\r\n            name: \"Dashboard\",\r\n            type: \"link\",\r\n            icon: <MdPerson size=\"20\" color=\"rgb(4, 196, 217)\" />,\r\n            to: {\r\n              pathname: \"/patient-biometrics\",\r\n              state: { patientObj: row, permissions: permissions },\r\n            },\r\n          })),\r\n      },\r\n      //            {...(permissions.includes('edit_patient') || permissions.includes(\"all_permission\")&&\r\n      //                    {\r\n      //                        name:'Edit',\r\n      //                        type:'link',\r\n      //                        icon:<MdModeEdit size=\"20\" color='rgb(4, 196, 217)' />,\r\n      //                        to:{\r\n      //                            pathname: \"/register-patient\",\r\n      //                            state: { patientId : row.id, permissions:permissions  }\r\n      //                        }\r\n      //                    }\r\n      //                )},\r\n      //            {...(permissions.includes('delete_patient') || permissions.includes(\"all_permission\")&&\r\n      //                    {\r\n      //                        name:'Delete',\r\n      //                        type:'link',\r\n      //                        icon:<MdDeleteForever size=\"20\" color='rgb(4, 196, 217)'  />,\r\n      //                        to:{\r\n      //                            pathname: \"/#\",\r\n      //                            state: { patientObj: row, permissions:permissions  }\r\n      //                        }\r\n      //                    }\r\n      //                )}\r\n    ];\r\n  }\r\n  const handleRemoteData = (query) =>\r\n    new Promise((resolve, reject) => {\r\n      axios\r\n        .get(\r\n          `${baseUrl}patient/getall-patients-with-biometric?pageSize=${query.pageSize}&pageNo=${query.page}&searchParam=${query.search}`,\r\n          { headers: { Authorization: `Bearer ${token}` } }\r\n        )\r\n        .then((response) => response)\r\n        .then((result) => {\r\n          resolve({\r\n            data: result.data.records.map((row) => ({\r\n              name: [row.firstName, row.otherName, row.surname]\r\n                .filter(Boolean)\r\n                .join(\", \"),\r\n              id: getHospitalNumber(row.identifier),\r\n              sex:\r\n                row.sex.toLowerCase().charAt(0).toUpperCase() +\r\n                row.sex.slice(1).toLowerCase(),\r\n              dateOfBirth: row.dateOfBirth,\r\n              age:\r\n                row.dateOfBirth === 0 ||\r\n                row.dateOfBirth === undefined ||\r\n                row.dateOfBirth === null ||\r\n                row.dateOfBirth === \"\"\r\n                  ? 0\r\n                  : calculate_age(row.dateOfBirth),\r\n              actions: (\r\n                <div>\r\n                  {permissions.includes(\"view_patient\") ||\r\n                  permissions.includes(\"all_permission\") ? (\r\n                    <SplitActionButton actions={actionItems(row)} />\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </div>\r\n              ),\r\n            })),\r\n            page: query.page,\r\n            totalCount: result.data.totalRecords,\r\n          });\r\n        });\r\n    });\r\n\r\n  const onDelete = async (id) => {\r\n    try {\r\n      if (id) {\r\n        const response = await axios.delete(`${baseUrl}patient/${id}`, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        });\r\n        window.location.reload();\r\n      }\r\n    } catch (e) {}\r\n  };\r\n\r\n  const onCancelDelete = () => {\r\n    setModal(false);\r\n  };\r\n\r\n  const calculate_age = (dob) => {\r\n    const today = new Date();\r\n    const dateParts = dob.split(\"-\");\r\n    const birthDate = new Date(dob); // create a date object directlyfrom`dob1`argument\r\n    let age_now = today.getFullYear() - birthDate.getFullYear();\r\n    const m = today.getMonth() - birthDate.getMonth();\r\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n      age_now--;\r\n    }\r\n    if (age_now === 0) {\r\n      return m + \" month(s)\";\r\n    }\r\n    return age_now + \" year(s)\";\r\n  };\r\n\r\n  const getHospitalNumber = (identifier) => {\r\n    const hospitalNumber = identifier.identifier.find(\r\n      (obj) => obj.type == \"HospitalNumber\"\r\n    );\r\n    return hospitalNumber ? hospitalNumber.value : \"\";\r\n  };\r\n\r\n  const getAddress = (address) => {\r\n    const city =\r\n      address && address.address && address.address.length > 0\r\n        ? address.address[0].city\r\n        : null;\r\n    return city;\r\n  };\r\n\r\n  const getGender = (gender) => {\r\n    return gender.display;\r\n  };\r\n\r\n  const enablePPIColumns = () => {\r\n    setEnablePPI(!enablePPI);\r\n  };\r\n  const PPISelect = () => (\r\n    <div>\r\n      {permissions.includes(\"view_patient\") ||\r\n      permissions.includes(\"all_permission\") ? (\r\n        <FormGroup className=\" float-right mr-1\">\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox\r\n                onChange={enablePPIColumns}\r\n                checked={!enablePPI}\r\n                style={{ color: \"#014d88\", fontWeight: \"bold\" }}\r\n              />\r\n            }\r\n            label=\"Show PII\"\r\n            style={{ color: \"#014d88\", fontWeight: \"bolder\" }}\r\n          />\r\n        </FormGroup>\r\n      ) : (\r\n        <h5 style={{ color: \"#3d4465\", fontWeight: \"bold\" }}>Patients</h5>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  const handleChangePage = (page) => {\r\n    setCurrentPage(page + 1);\r\n  };\r\n  const localization = {\r\n    pagination: {\r\n      labelDisplayedRows: `${currentPage} - 10 of 2022`,\r\n    },\r\n  };\r\n\r\n  const handleChangeStatus = (e) => {\r\n    let count = e.target.value;\r\n    if (count === \"1\") {\r\n      setStatus(1);\r\n    } else if (count === \"2\") {\r\n      setStatus(2);\r\n    } else if (count === \"3\") {\r\n      setStatus(3);\r\n    } else {\r\n      setStatus(1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <ToastContainer autoClose={3000} hideProgressBar />\r\n      <TextField\r\n        id=\"biometrics\"\r\n        select\r\n        label=\"Select\"\r\n        defaultValue=\"1\"\r\n        helperText=\"Select patient biometric status\"\r\n        onChange={(e) => handleChangeStatus(e)}\r\n      >\r\n        <MenuItem key=\"1\" value=\"1\">\r\n          With Biometrics\r\n        </MenuItem>\r\n        <MenuItem key=\"2\" value=\"2\">\r\n          Incomplete Biometrics\r\n        </MenuItem>\r\n        <MenuItem key=\"3\" value=\"3\">\r\n          No Biometrics Captured\r\n        </MenuItem>\r\n      </TextField>\r\n      {status === 1 ? (\r\n        <>\r\n          <h3>Patients with biometrics</h3>\r\n          <MaterialTable\r\n            tableRef={tableRef}\r\n            /*onSearchChange={(e) => {\r\n                    handleSearchChange(e);\r\n                }}*/\r\n            icons={tableIcons}\r\n            title={<PPISelect />}\r\n            columns={[\r\n              {\r\n                title: \"Name\",\r\n                field: \"name\",\r\n                filtering: false,\r\n                hidden: enablePPI,\r\n              },\r\n              { title: \"Hosp. Number\", field: \"id\", filtering: false },\r\n              { title: \"Sex\", field: \"sex\", filtering: false },\r\n              {\r\n                title: \"Date Of Birth\",\r\n                field: \"dateOfBirth\",\r\n                filtering: false,\r\n              },\r\n              { title: \"Age\", field: \"age\", filtering: false },\r\n              /*{ title: \"Address\", field: \"address\", filtering: false },*/\r\n              /*{ title: \"Status\", field: \"status\", filtering: false },*/\r\n              { title: \"Actions\", field: \"actions\", filtering: false },\r\n            ]}\r\n            isLoading={loading}\r\n            data={handleRemoteData}\r\n            options={{\r\n              headerStyle: {\r\n                backgroundColor: \"#014d88\",\r\n                color: \"#fff\",\r\n                fontSize: \"16px\",\r\n                padding: \"10px\",\r\n                fontWeight: \"bolder\",\r\n              },\r\n              searchFieldStyle: {\r\n                width: \"50%\",\r\n              },\r\n              filtering: false,\r\n              exportButton: false,\r\n              searchFieldAlignment: \"left\",\r\n              pageSizeOptions: [10, 20, 100],\r\n              pageSize: 10,\r\n              debounceInterval: 400,\r\n            }}\r\n            onChangePage={handleChangePage}\r\n            //localization={localization}\r\n          />\r\n        </>\r\n      ) : status === 2 ? (\r\n        <BiometricsList permissions={props.permissions} />\r\n      ) : status === 3 ? (\r\n        <NotCaptured permissions={props.permissions} />\r\n      ) : (\r\n        \"\"\r\n      )}\r\n\r\n      <Modal isOpen={modal} toggle={onCancelDelete}>\r\n        <ModalHeader toggle={onCancelDelete}>Delete Patient</ModalHeader>\r\n        <ModalBody>\r\n          Are you sure to delete this record?{\" \"}\r\n          {patient\r\n            ? patient.surname +\r\n              \", \" +\r\n              patient.firstname +\r\n              \" \" +\r\n              patient.otherName\r\n            : \"\"}\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button\r\n            color=\"primary\"\r\n            type=\"button\"\r\n            onClick={(e) => onDelete(patient.id)}\r\n          >\r\n            Yes\r\n          </Button>{\" \"}\r\n          <Button\r\n            color=\"secondary\"\r\n            type=\"button\"\r\n            onClick={(e) => onCancelDelete()}\r\n          >\r\n            No\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Biometrics;\r\n","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\ReCaptureBiometric.js",["588","589","590","591","592","593","594","595","596","597","598","599","600","601","602","603","604","605","606","607","608","609","610","611","612"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport { Row, Label, Col, FormGroup, Input, Button, Badge } from \"reactstrap\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport FingerprintIcon from \"@material-ui/icons/Fingerprint\";\r\nimport { Button2, Icon, List } from \"semantic-ui-react\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport RestartAltIcon from \"@mui/icons-material/RestartAlt\";\r\n\r\nimport axios from \"axios\";\r\nimport { token, url as baseUrl } from \"../../../api\";\r\n\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\n\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport { Alert, AlertTitle } from \"@material-ui/lab\";\r\nimport fingerprintimage from \"../images/fingerprintimage.png\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\n\r\nimport LinearProgress from \"@mui/material/LinearProgress\";\r\n\r\nimport _ from \"lodash\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    \"& .dropdown-toggle::after, .dropleft .dropdown-toggle::before, .dropright .dropdown-toggle::before, .dropup .dropdown-toggle::after\":\r\n      {\r\n        fontFamily: \"FontAwesome\",\r\n        border: \"0\",\r\n        verticalAlign: \"middle\",\r\n        marginLeft: \".25em\",\r\n        lineHeight: \"1\",\r\n      },\r\n    \"& .dropdown-menu .dropdown-item\": {\r\n      fontSize: \"14px\",\r\n      color: \"#014d88\",\r\n      padding: \"0.3rem 1.5rem\",\r\n      fontWeight: \"bold\",\r\n    },\r\n    \"& .mt-4\": {\r\n      marginTop: \"28px !important\",\r\n    },\r\n    \"& .form-control\": {\r\n      color: \"#992E62\",\r\n    },\r\n    \"& .form-control:focus\": {\r\n      color: \"#014d88\",\r\n    },\r\n    \"& .sharp \": {\r\n      \"min-width\": \"35px\",\r\n      padding: \"5px\",\r\n      height: \"35px\",\r\n      \"min-height\": \"35px\",\r\n    },\r\n  },\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  /*    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20,\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        \"& > *\": {\r\n            margin: theme.spacing(1),\r\n        },\r\n    },\r\n    input: {\r\n        display: \"none\",\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"12.8px\",\r\n    },*/\r\n}));\r\n\r\nlet checkUrl = \"\";\r\n\r\nfunction Biometrics(props) {\r\n  localStorage.setItem(\"patient_id\", JSON.stringify(props.patientId));\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n  const permissions =\r\n    history.location && history.location.state\r\n      ? history.location.state.permissions\r\n      : [];\r\n  const [biometricDevices, setbiometricDevices] = useState([]);\r\n  const [objValues, setObjValues] = useState({\r\n    biometricType: \"FINGERPRINT\",\r\n    patientId: props.patientId,\r\n    templateType: \"\",\r\n    device: \"SECUGEN\",\r\n    reason: \"\",\r\n    age: \"\",\r\n  });\r\n  const [fingerType, setFingerType] = useState([]);\r\n  const [devices, setDevices] = useState([]);\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [pageLoading, setPageLoading] = useState(false);\r\n  const [showCapture, setshowCapture] = React.useState(false);\r\n  const [tryAgain, setTryAgain] = React.useState(false);\r\n  const [success, setSuccess] = React.useState(false);\r\n  const [errors, setErrors] = useState({});\r\n  const [storedBiometrics, setStoredBiometrics] = useState([]);\r\n  // const [responseImage, setResponseImage] = useState(\"\")\r\n  const [capturedFingered, setCapturedFingered] = useState([]);\r\n  const [capturedFingeredObj, setCapturedFingeredObj] = useState([]);\r\n  const [recapturedFingered, setRecapturedFingered] = useState([]);\r\n  const [selectedFingers, setSelectedFingers] = useState([]);\r\n  const [imageQuality, setImageQuality] = useState(false);\r\n  const [isNewStatus, setIsNewStatus] = useState(true);\r\n\r\n  const calculate_age = (dob) => {\r\n    const today = new Date();\r\n    const dateParts = dob.split(\"-\");\r\n    const birthDate = new Date(dob); // create a date object directlyfrom`dob1`argument\r\n    let age_now = today.getFullYear() - birthDate.getFullYear();\r\n    // const m = today.getMonth() - birthDate.getMonth();\r\n    // if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n    //     age_now--;\r\n    // }\r\n    // if (age_now === 0) {\r\n    //     return m + \" month(s)\";\r\n    // }\r\n    return age_now;\r\n  };\r\n\r\n  const getPersonBiometrics = async () => {\r\n    const fingersCodeset = await axios.get(\r\n      `${baseUrl}application-codesets/v2/BIOMETRIC_CAPTURE_FINGERS`,\r\n      { headers: { Authorization: `Bearer ${token}` } }\r\n    );\r\n\r\n    axios\r\n      .get(`${baseUrl}biometrics/person/${props.patientId}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then(async (response) => {\r\n        if (response.data.length > 0) {\r\n          setStoredBiometrics(response.data);\r\n\r\n          setPageLoading(true);\r\n\r\n          let personCapturedFingers = _.uniq(\r\n            _.map(response.data, \"templateType\")\r\n          );\r\n\r\n          //console.log(personCapturedFingers);\r\n          //setSelectedFingers(personCapturedFingers);\r\n\r\n          let biometricItems = _.map(fingersCodeset.data, (item) => {\r\n            return _.extend({}, item, {\r\n              captured: false,\r\n            });\r\n          });\r\n\r\n          setFingerType(biometricItems);\r\n        } else {\r\n          let biometricItems = _.map(fingersCodeset.data, (item) => {\r\n            return _.extend({}, item, { captured: false });\r\n            //return item.captured = personCapturedFingers.includes(item.display)\r\n          });\r\n          setFingerType(biometricItems);\r\n        }\r\n      })\r\n      .catch(async (error) => {\r\n        console.log(\"getPersonBiometrics error\");\r\n        console.log(error);\r\n\r\n        let biometricItems = _.map(fingersCodeset.data, (item) => {\r\n          return _.extend({}, item, { captured: false });\r\n        });\r\n        setFingerType(biometricItems);\r\n        setPageLoading(true);\r\n      });\r\n  };\r\n\r\n  const clear_storelist = () => {\r\n    axios\r\n      .post(\r\n        `${baseUrl}biometrics/store-list/${props.patientId}`,\r\n        props.patientId,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        //console.log(\"cleared store\");\r\n      })\r\n      .catch((error) => {\r\n        //console.log(\"cleared store error\");\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const getRecaptureCount = () => {\r\n    axios\r\n      .get(`${baseUrl}biometrics/grouped/person/${props.patientId}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        //console.log(response.data);\r\n        setRecapturedFingered(response.data);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    clear_storelist();\r\n    getPersonBiometrics();\r\n    TemplateType();\r\n    getRecaptureCount();\r\n    //biometricFingers();\r\n  }, []);\r\n\r\n  //Get list of Finger index\r\n  // const TemplateType = () => {\r\n  //   axios\r\n  //     .get(`${baseUrl}application-codesets/v2/BIOMETRIC_CAPTURE_FINGERS`, {\r\n  //       headers: { Authorization: `Bearer ${token}` },\r\n  //     })\r\n  //     .then((response) => {\r\n  //       setFingerType(response.data);\r\n  //     })\r\n  //     .catch((error) => {});\r\n  // };\r\n  const TemplateType = () => {\r\n    axios\r\n      .get(`${baseUrl}modules/check?moduleName=biometric`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        if (response.data === true) {\r\n          axios\r\n            .get(`${baseUrl}biometrics/devices?active=true`, {\r\n              headers: { Authorization: `Bearer ${token}` },\r\n            })\r\n            .then((response) => {\r\n              //console.log(response.data.find((x) => x.active === true));\r\n              setDevices(response.data.find((x) => x.active === true));\r\n              setbiometricDevices(response.data);\r\n            })\r\n            .catch((error) => {\r\n              console.log(error);\r\n            });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n  // handle the input changes\r\n  const handleInputChange = (e) => {\r\n    setObjValues({\r\n      ...objValues,\r\n      [e.target.name]: e.target.value,\r\n      age: calculate_age(props.age),\r\n    });\r\n  };\r\n  //form validation\r\n  const validate = () => {\r\n    let temp = { ...errors };\r\n    temp.templateType = objValues.templateType ? \"\" : \"This field is required\";\r\n    //temp.device = objValues.device ? \"\" : \"This field is required\"\r\n    setErrors({\r\n      ...temp,\r\n    });\r\n    return Object.values(temp).every((x) => x === \"\");\r\n  };\r\n  //to capture  selected index finger\r\n  // const captureFinger = (e) => {\r\n  //   e.preventDefault();\r\n  //   setLoading(true);\r\n  //   setFingerType([]);\r\n  //   if (validate()) {\r\n  //     setFingerType([]);\r\n  //     window.setTimeout(() => {\r\n  //       setLoading(false);\r\n  //       const removeFingers = fingerType.filter(\r\n  //         (x) => x.display !== objValues.templateType\r\n  //       );\r\n  //       fingerType.splice(removeFingers, 1);\r\n  //       setFingerType([...fingerType]);\r\n  //       arrCaptureObj.push(objValues.templateType);\r\n  //       selectedFingers.archived = arrCaptureObj.length + 1;\r\n  //       selectedFingers.templateType = objValues.templateType;\r\n  //       setCapturedFingeredObj([...capturedFingeredObj, selectedFingers]);\r\n  //       toast.success(objValues.templateType + \"captured successful!\");\r\n  //     }, 5000);\r\n  //   }\r\n  // };\r\n\r\n  const captureFinger = (e) => {\r\n    e.preventDefault();\r\n    if (validate()) {\r\n      setLoading(true);\r\n\r\n      axios\r\n        .post(\r\n          `${devices.url}?reader=${\r\n            devices.name\r\n          }&isNew=${isNewStatus}&recapture=${true}`,\r\n          objValues,\r\n          {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          setLoading(false);\r\n\r\n          if (response.data.type === \"ERROR\") {\r\n            setLoading(false);\r\n            setTryAgain(true);\r\n            window.setTimeout(() => {\r\n              setTryAgain(false);\r\n            }, 5000);\r\n            toast.error(response.data.message.ERROR);\r\n            setIsNewStatus(false);\r\n          } else if (response.data.type === \"WARNING\") {\r\n            if (\r\n              response.data.imageQuality <= 60 &&\r\n              calculate_age(props.age) <= 6\r\n            ) {\r\n              toast.info(\r\n                \"Image quality captured is poor, Kindly give a reason for capture above.\",\r\n                { position: toast.POSITION.BOTTOM_CENTER, autoClose: 20000 }\r\n              );\r\n              setImageQuality(true);\r\n            }\r\n\r\n            const templateType = response.data.templateType;\r\n\r\n            setTryAgain(false);\r\n            setSuccess(true);\r\n\r\n            let biometricsEnrollments = response.data;\r\n            biometricsEnrollments.capturedBiometricsList = _.uniqBy(\r\n              biometricsEnrollments.capturedBiometricsList,\r\n              \"templateType\"\r\n            );\r\n\r\n            setCapturedFingered([...capturedFingered, biometricsEnrollments]);\r\n\r\n            _.find(fingerType, { display: templateType }).captured = true;\r\n\r\n            setFingerType([...fingerType]);\r\n\r\n            setObjValues({ ...objValues, templateType: \"\" });\r\n            setIsNewStatus(false);\r\n            toast.warning(response.data.message.WARNING);\r\n          } else if (response.data.type === \"SUCCESS\") {\r\n            if (\r\n              response.data.imageQuality <= 60 &&\r\n              calculate_age(props.age) <= 6\r\n            ) {\r\n              toast.info(\r\n                \"Image quality captured is poor, Kindly give a reason for capture above.\",\r\n                { position: toast.POSITION.BOTTOM_CENTER, autoClose: 20000 }\r\n              );\r\n              setImageQuality(true);\r\n            }\r\n            const templateType = response.data.templateType;\r\n            setTryAgain(false);\r\n            setSuccess(true);\r\n\r\n            let biometricsEnrollments = response.data;\r\n            biometricsEnrollments.capturedBiometricsList = _.uniqBy(\r\n              biometricsEnrollments.capturedBiometricsList,\r\n              \"templateType\"\r\n            );\r\n\r\n            setCapturedFingered([...capturedFingered, biometricsEnrollments]);\r\n\r\n            _.find(fingerType, { display: templateType }).captured = true;\r\n            setFingerType([...fingerType]);\r\n\r\n            setObjValues({ ...objValues, templateType: \"\" });\r\n            setIsNewStatus(false);\r\n          } else {\r\n            setLoading(false);\r\n            setTryAgain(true);\r\n            toast.error(\"Something went wrong capturing biometrics...\", {\r\n              position: toast.POSITION.BOTTOM_CENTER,\r\n            });\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          setLoading(false);\r\n        });\r\n    }\r\n  };\r\n\r\n  //Save Biometric capture\r\n  // const saveBiometrics = (e) => {\r\n  //   e.preventDefault();\r\n  //   setCapturedFingeredObj([]);\r\n  //   if (capturedFingeredObj.length >= 1) {\r\n  //     setSaveCapturedFingeredObj(capturedFingeredObj);\r\n  //   }\r\n  // };\r\n\r\n  const saveBiometrics = (e) => {\r\n    e.preventDefault();\r\n    if (capturedFingered.length >= 1) {\r\n      const capturedObj = capturedFingered[capturedFingered.length - 1];\r\n\r\n      capturedObj.capturedBiometricsList = _.uniqBy(\r\n        capturedObj.capturedBiometricsList,\r\n        \"templateType\"\r\n      );\r\n\r\n      //console.log(\"capturedObj\", capturedFingered);\r\n\r\n      axios\r\n        .post(`${baseUrl}biometrics/templates`, capturedObj, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((response) => {\r\n          console.log(\"saved\", response);\r\n          toast.success(\"Biometric recaptured successfully\", {\r\n            position: toast.POSITION.BOTTOM_CENTER,\r\n          });\r\n          setCapturedFingered([]);\r\n          getPersonBiometrics();\r\n          props.updatePatientBiometricStatus(true);\r\n          //console.log(\"capturedObj\", capturedFingered);\r\n        })\r\n        .catch((error) => {\r\n          toast.error(\"Something went wrong saving biometrics\", {\r\n            position: toast.POSITION.BOTTOM_CENTER,\r\n          });\r\n          console.log(error.message);\r\n        });\r\n    } else {\r\n      toast.error(\"You can't save less than 2 finger\", {\r\n        position: toast.POSITION.BOTTOM_CENTER,\r\n      });\r\n    }\r\n  };\r\n\r\n  const deleteTempBiometrics = (x) => {\r\n    axios\r\n      .delete(\r\n        `${baseUrl}biometrics?personId=${x.patientId}&templateType=${x.templateType}`,\r\n        {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        }\r\n      )\r\n      .then((resp) => {\r\n        console.log(resp);\r\n        let deletedRecord = capturedFingered.filter(\r\n          (data) => data.templateType !== x.templateType\r\n        );\r\n        setCapturedFingered(deletedRecord);\r\n        toast.info(x.templateType + \"captured removed successfully!\");\r\n        // toast.success(`finger deleted successfully`, {\r\n        //   position: toast.POSITION.BOTTOM_CENTER,\r\n        // });\r\n      })\r\n      .catch((error) => {\r\n        toast.error(\"Something went wrong\", {\r\n          position: toast.POSITION.BOTTOM_CENTER,\r\n        });\r\n        console.log(error);\r\n      });\r\n    // window.setTimeout(() => {\r\n    //   let deletedRecord = capturedFingered.filter(\r\n    //     (data) => data.templateType !== x.templateType\r\n    //   );\r\n    //   setCapturedFingered(deletedRecord);\r\n    //   toast.info(x.templateType + \"captured removed successfully!\");\r\n    // }, 1000);\r\n  };\r\n\r\n  const getFingerprintsQuality = (imageQuality) => {\r\n    if (imageQuality > 60 && imageQuality <= 75) {\r\n      return (\r\n        <Badge color=\"warning\" style={{ fontSize: \"12px\" }}>\r\n          {imageQuality + \"%\"}\r\n        </Badge>\r\n      );\r\n    } else if (imageQuality > 75) {\r\n      return (\r\n        <Badge color=\"success\" style={{ fontSize: \"12px\" }}>\r\n          {imageQuality + \"%\"}\r\n        </Badge>\r\n      );\r\n    } else {\r\n      return (\r\n        <Badge color=\"error\" style={{ fontSize: \"12px\" }}>\r\n          {imageQuality + \"%\"}\r\n        </Badge>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div>\r\n        {/* temporal update */}\r\n        {permissions.includes(\"capture_patient_biometrics\") ||\r\n        permissions.includes(\"all_permission\") ? (\r\n          <div\r\n            style={{\r\n              flex: \"10\",\r\n              padding: \"5px\",\r\n              marginLeft: \"5px\",\r\n              border: \"1px solid rgba(99, 99, 99, 0.2)\",\r\n              boxShadow: \"rgba(99, 99, 99, 0.2) 0px 2px 8px 0px\",\r\n            }}\r\n          >\r\n            <Row>\r\n              <ToastContainer />\r\n              <Col md={3}>\r\n                <FormGroup>\r\n                  <Label\r\n                    for=\"device\"\r\n                    style={{\r\n                      color: \"#014d88\",\r\n                      fontWeight: \"bold\",\r\n                      fontSize: \"14px\",\r\n                    }}\r\n                  >\r\n                    {\" \"}\r\n                    Device{\" \"}\r\n                  </Label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    name=\"device\"\r\n                    id=\"device\"\r\n                    //onChange={checkDevice}\r\n                    value={\"Secugen\"}\r\n                    required\r\n                    disabled\r\n                  ></Input>\r\n\r\n                  {errors.device !== \"\" ? (\r\n                    <span className={classes.error}>{errors.device}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </Col>\r\n\r\n              <Col md={3}>\r\n                <FormGroup>\r\n                  <Label\r\n                    for=\"device\"\r\n                    style={{\r\n                      color: \"#014d88\",\r\n                      fontWeight: \"bold\",\r\n                      fontSize: \"14px\",\r\n                    }}\r\n                  >\r\n                    Select Finger\r\n                  </Label>\r\n                  <Input\r\n                    type=\"select\"\r\n                    name=\"templateType\"\r\n                    id=\"templateType\"\r\n                    onChange={handleInputChange}\r\n                    value={objValues.templateType}\r\n                    required\r\n                  >\r\n                    <option value=\"\">Select Finger </option>\r\n\r\n                    {fingerType &&\r\n                      _.filter(fingerType, [\"captured\", false]).map((value) => (\r\n                        <option key={value.id} value={value.display}>\r\n                          {value.display}\r\n                        </option>\r\n                      ))}\r\n                  </Input>\r\n                  {errors.templateType !== \"\" ? (\r\n                    <span className={classes.error}>{errors.templateType}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </Col>\r\n\r\n              {!imageQuality ? (\r\n                \"\"\r\n              ) : (\r\n                <Col md={4}>\r\n                  <FormGroup>\r\n                    <Label\r\n                      for=\"device\"\r\n                      style={{\r\n                        color: \"#014d88\",\r\n                        fontWeight: \"bold\",\r\n                        fontSize: \"14px\",\r\n                      }}\r\n                    >\r\n                      {\" \"}\r\n                      Reason for capture{\" \"}\r\n                    </Label>\r\n                    <Input\r\n                      type=\"textarea\"\r\n                      name=\"reason\"\r\n                      id=\"reason\"\r\n                      onChange={handleInputChange}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n              )}\r\n\r\n              <Col md={2}>\r\n                {!loading ? (\r\n                  <>\r\n                    <MatButton\r\n                      type=\"button\"\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      onClick={captureFinger}\r\n                      className={\"mt-4\"}\r\n                      style={{ backgroundColor: \"#992E62\" }}\r\n                      startIcon={<FingerprintIcon />}\r\n                      disabled={loading}\r\n                    >\r\n                      Capture Finger\r\n                    </MatButton>\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <MatButton\r\n                      type=\"button\"\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      className={\"mt-4\"}\r\n                      style={{ backgroundColor: \"#992E62\" }}\r\n                      startIcon={<CircularProgress />}\r\n                    >\r\n                      Capturing...\r\n                    </MatButton>\r\n                  </>\r\n                )}\r\n              </Col>\r\n              <br />\r\n              <Col md={12}>\r\n                {loading ? (\r\n                  <>\r\n                    <b>Capturing finger...</b>\r\n                    <LinearProgress />\r\n                  </>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        <Row>\r\n          <Col>\r\n            <br />\r\n            <p>\r\n              {\" \"}\r\n              Patient Recapture Count : <b>{recapturedFingered.length}</b>\r\n            </p>\r\n            <hr />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          {capturedFingered.length >= 1 ? (\r\n            <>\r\n              <Col md={12} style={{ marginTop: \"10px\", paddingBottom: \"20px\" }}>\r\n                <List celled horizontal>\r\n                  {/* {console.log(capturedFingered)} */}\r\n                  {capturedFingered.map((x) => (\r\n                    <List.Item\r\n                      style={{\r\n                        width: \"200px\",\r\n                        height: \"200px\",\r\n                        border: \"1px dotted #014d88\",\r\n                        margin: \"5px\",\r\n                      }}\r\n                    >\r\n                      <List.Header\r\n                        style={{\r\n                          paddingLeft: \"0px\",\r\n                          height: \"0.5rem\",\r\n\r\n                          alignItems: \"right\",\r\n                        }}\r\n                      >\r\n                        {getFingerprintsQuality(x.imageQuality)}\r\n                        <span\r\n                          onClick={() => {\r\n                            deleteTempBiometrics(x);\r\n                          }}\r\n                        >\r\n                          <Icon\r\n                            name=\"cancel\"\r\n                            color=\"red\"\r\n                            style={{ float: \"right\" }}\r\n                          />{\" \"}\r\n                        </span>\r\n                      </List.Header>\r\n                      <List.Content\r\n                        style={{\r\n                          width: \"200px\",\r\n                          height: \"150px\",\r\n                          display: \"flex\",\r\n                          justifyContent: \"center\",\r\n                          alignItems: \"center\",\r\n                        }}\r\n                      >\r\n                        {\" \"}\r\n                        <FingerprintIcon\r\n                          style={{ color: \"#992E62\", fontSize: 150 }}\r\n                        />\r\n                        {/* <img\r\n                          src={`data:image/png;base64,${x.image}`}\r\n                          style={{ width: \"80px\", height: \"80px\" }}\r\n                          alt=\"\"\r\n                        /> */}\r\n                      </List.Content>\r\n                      <List.Content\r\n                        style={{\r\n                          width: \"200px\",\r\n                          height: \"30px\",\r\n                          display: \"flex\",\r\n                          justifyContent: \"center\",\r\n                          alignItems: \"center\",\r\n                          fontSize: \"16px\",\r\n                          color: \"#014d88\",\r\n                          fontWeight: \"bold\",\r\n                          fontFamily: '\"poppins\", sans-serif',\r\n                        }}\r\n                      >\r\n                        {x.templateType}\r\n                      </List.Content>\r\n                      <List.Content>\r\n                        <br />\r\n                        {x.imageQuality < 75 ? (\r\n                          <MatButton\r\n                            type=\"button\"\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            onClick={() => {\r\n                              deleteTempBiometrics(x);\r\n                            }}\r\n                            startIcon={<RestartAltIcon />}\r\n                          >\r\n                            Reset recapture\r\n                          </MatButton>\r\n                        ) : (\r\n                          \" \"\r\n                        )}\r\n                      </List.Content>\r\n                    </List.Item>\r\n                  ))}\r\n                </List>\r\n              </Col>\r\n              <br />\r\n              <br />\r\n              <br />\r\n              <br />\r\n              <br />\r\n              <br />\r\n              <Col md={12}>\r\n                <br />\r\n                {/* {storedBiometrics.length < 10 &&\r\n                storedBiometrics.length !== 0 ? (\r\n                  <MatButton\r\n                    type=\"button\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    //disabled={capturedFingered.length < 6 ? true : false}\r\n                    onClick={saveBiometrics}\r\n                    // className={classes.button}\r\n                    startIcon={<SaveIcon />}\r\n                  >\r\n                    Save Capture\r\n                  </MatButton>\r\n                ) : ( */}\r\n                <MatButton\r\n                  type=\"button\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  disabled={capturedFingered.length < 6 ? true : false}\r\n                  onClick={saveBiometrics}\r\n                  // className={classes.button}\r\n                  startIcon={<SaveIcon />}\r\n                >\r\n                  Save Capture\r\n                </MatButton>\r\n                {/* )} */}\r\n              </Col>\r\n              <br />\r\n            </>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </Row>\r\n      </div>\r\n      {/* <div style={{ display: \"flex\", width: \"100%\" }}>\r\n        <div\r\n          className=\"\"\r\n          style={{\r\n            padding: \"5px\",\r\n            flex: \"10\",\r\n            boxShadow: \"rgba(99, 99, 99, 0.2) 0px 2px 8px 0px\",\r\n            minHeight: \"400px\",\r\n          }}\r\n        >\r\n          {saveCapturedFingered.length > 0 ? (\r\n            <div style={{ display: \"flex\", width: \"100%\", flexWrap: \"wrap\" }}>\r\n              {saveCapturedFingered.map((biometric, index) => (\r\n                <div\r\n                  key={index}\r\n                  style={{ minHeight: \"120px\", padding: \"5px\", width: \"20%\" }}\r\n                >\r\n                  <div className=\"card \" style={{ borderRadius: \"6px\" }}>\r\n                    <div\r\n                      className=\"card-header align-items-start\"\r\n                      style={{ backgroundColor: \"#fff\" }}\r\n                    >\r\n                      <div>\r\n                        <h6 className=\"fs-18 font-w500 mb-3 user-name\">\r\n                          <Link\r\n                            to={\"#\"}\r\n                            style={{\r\n                              color: \"#014d88\",\r\n                              fontSize: \"14px\",\r\n                              fontFamily: `\"poppins\",sans-serif`,\r\n                            }}\r\n                          >\r\n                            {biometric.templateType}\r\n                          </Link>\r\n                        </h6>\r\n                        <div\r\n                          className=\"fs-9 text-nowrap\"\r\n                          style={{\r\n                            fontSize: \"10px\",\r\n                            color: \"#992E62\",\r\n                            fontWeight: \"bold\",\r\n                            fontFamily: `\"poppins\",sans-serif`,\r\n                          }}\r\n                        >\r\n                          <i\r\n                            className=\"fa fa-calendar-o me-3\"\r\n                            aria-hidden=\"true\"\r\n                          ></i>\r\n                          {moment(biometric.lastModifiedDate).format(\r\n                            \"YYYY-MM-DD HH:mm\"\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n\r\n                      <Dropdown className=\"dropdown ms-auto\">\r\n                        <Dropdown.Toggle\r\n                          as=\"button\"\r\n                          variant=\"\"\r\n                          drop=\"up\"\r\n                          className=\"btn sharp btn-primary \"\r\n                          id=\"tp-btn\"\r\n                          style={{\r\n                            backgroundColor: \"#014d88\",\r\n                            borderColor: \"#014d88\",\r\n                            borderRadius: \"5px\",\r\n                            marginRight: \"-18px\",\r\n                            marginTop: \"-10px\",\r\n                          }}\r\n                        >\r\n                          <svg\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\r\n                            width=\"18px\"\r\n                            height=\"18px\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            version=\"1.1\"\r\n                          >\r\n                            <g\r\n                              stroke=\"none\"\r\n                              strokeWidth=\"1\"\r\n                              fill=\"none\"\r\n                              fillRule=\"evenodd\"\r\n                            >\r\n                              <rect x=\"0\" y=\"0\" width=\"24\" height=\"24\" />\r\n                              <circle fill=\"#ffffff\" cx=\"12\" cy=\"5\" r=\"2\" />\r\n                              <circle fill=\"#ffffff\" cx=\"12\" cy=\"12\" r=\"2\" />\r\n                              <circle fill=\"#ffffff\" cx=\"12\" cy=\"19\" r=\"2\" />\r\n                            </g>\r\n                          </svg>\r\n                        </Dropdown.Toggle>\r\n                        <Dropdown.Menu\r\n                          alignRight={true}\r\n                          className=\"dropdown-menu-right\"\r\n                        >\r\n                          <Dropdown.Item\r\n                            style={{ color: \"red\" }}\r\n                            onClick={() =>\r\n                              deleteBiometric(\r\n                                biometric.id,\r\n                                biometric.templateType\r\n                              )\r\n                            }\r\n                          >\r\n                            <DeleteIcon /> Delete\r\n                          </Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                      </Dropdown>\r\n                    </div>\r\n                    <div className=\"card-body p-0 pb-2\">\r\n                      <ul className=\"list-group list-group-flush\">\r\n                        <li\r\n                          className=\"list-group-item\"\r\n                          style={{\r\n                            height: \"100px\",\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                          }}\r\n                        >\r\n                          <img\r\n                            src={fingerprintimage}\r\n                            alt=\"\"\r\n                            style={{ height: \"80px\" }}\r\n                          />\r\n                        </li>\r\n\r\n                        <li className=\"list-group-item\">\r\n                          <Badge\r\n                            variant=\"info badge-xs light\"\r\n                            className=\"card-link float-end\"\r\n                          >\r\n                            Version \r\n                          </Badge>\r\n                          <span className=\"mb-0 title\">\r\n                            Status {biometric.iso}\r\n                          </span>{\" \"}\r\n                          :\r\n                          <span className=\"text-black desc-text ms-2\">\r\n                            <Badge\r\n                              variant={\r\n                                biometric.iso === true\r\n                                  ? \"primary badge-xs\"\r\n                                  : \"danger badge-xs\"\r\n                              }\r\n                            >\r\n                              <i\r\n                                className=\"fa fa-check-square me-2 scale4\"\r\n                                aria-hidden=\"true\"\r\n                              ></i>{\" \"}\r\n                            </Badge>\r\n                          </span>\r\n                        </li>\r\n                      </ul>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <div className=\"flex-grow-8\">\r\n                <div className=\"flex-grow-8\">\r\n                  <Alert severity=\"info\">\r\n                    <AlertTitle style={{ height: \"400px\" }}>\r\n                      <strong>No biometrics captured</strong>\r\n                    </AlertTitle>\r\n                  </Alert>\r\n                </div>\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Biometrics;\r\n","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\PatientsCard.js",["613","614","615","616","617","618","619","620","621","622"],"import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { token, url as baseUrl } from \"../../../api\";\r\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {\r\n  Accordion,\r\n  AccordionDetails,\r\n  AccordionSummary,\r\n} from \"@material-ui/core\";\r\nimport { Col, Row } from \"reactstrap\";\r\nimport { Label } from \"semantic-ui-react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  icon: {\r\n    verticalAlign: \"bottom\",\r\n    height: 20,\r\n    width: 20,\r\n  },\r\n  details: {\r\n    alignItems: \"center\",\r\n  },\r\n  column: {\r\n    flexBasis: \"20.33%\",\r\n  },\r\n  helper: {\r\n    borderLeft: `2px solid ${theme.palette.divider}`,\r\n    padding: `${theme.spacing(1)}px ${theme.spacing(1) * 2}px`,\r\n  },\r\n  link: {\r\n    color: theme.palette.primary.main,\r\n    textDecoration: \"none\",\r\n    \"&:hover\": {\r\n      textDecoration: \"underline\",\r\n    },\r\n  },\r\n});\r\n\r\nfunction PatientsCard(props) {\r\n  const { classes } = props;\r\n  const patientObj = props.patientObj ? props.patientObj : {};\r\n  const permissions = props.permissions ? props.permissions : [];\r\n  const [modal, setModal] = useState(false); //Modal to collect sample\r\n  const [patientBiometricStatus, setPatientBiometricStatus] = useState(true);\r\n  const toggleModal = () => setModal(!modal);\r\n\r\n  const [biometricStatus, setBiometricStatus] = useState(true);\r\n  const [devices, setDevices] = useState([]);\r\n  useEffect(() => {\r\n    //setPatientBiometricStatus(props.patientBiometricStatus)\r\n    TemplateType();\r\n  }, []);\r\n  //Get list of KP\r\n  const TemplateType = () => {\r\n    axios\r\n      .get(`${baseUrl}modules/check?moduleName=biometric`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setBiometricStatus(response.data);\r\n        if (response.data === true) {\r\n          axios\r\n            .get(`${baseUrl}biometrics/devices`, {\r\n              headers: { Authorization: `Bearer ${token}` },\r\n            })\r\n            .then((response) => {\r\n              setDevices(response.data);\r\n            })\r\n            .catch((error) => {\r\n              console.log(error);\r\n            });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n  const getHospitalNumber = (identifier) => {\r\n    const hospitalNumber = identifier.identifier.find(\r\n      (obj) => obj.type == \"HospitalNumber\"\r\n    );\r\n    return hospitalNumber ? hospitalNumber.value : \"\";\r\n  };\r\n\r\n  const calculate_age = (dob) => {\r\n    const today = new Date();\r\n    const dateParts = dob.split(\"-\");\r\n    const birthDate = new Date(dob); // create a date object directlyfrom`dob1`argument\r\n    let age_now = today.getFullYear() - birthDate.getFullYear();\r\n    const m = today.getMonth() - birthDate.getMonth();\r\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n      age_now--;\r\n    }\r\n    if (age_now === 0) {\r\n      return m + \" month(s)\";\r\n    }\r\n    return age_now + \" year(s)\";\r\n  };\r\n\r\n  const getPhone = (contactPoint) => {\r\n    console.log(\"contact\", contactPoint);\r\n    const phoneContact = contactPoint?.contactPoint?.find(\r\n      (obj) => obj.type == \"phone\"\r\n    );\r\n    return phoneContact ? phoneContact.value : \"\";\r\n  };\r\n\r\n  const getAddress = (address) => {\r\n    const city =\r\n      address && address.address && address.address.length > 0\r\n        ? `${address.address[0].line[0]}, ${address.address[0].city}`\r\n        : null;\r\n    return city;\r\n  };\r\n\r\n  const handleBiometricCapture = (id) => {\r\n    let patientObjID = id;\r\n    setModal(!modal);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Accordion defaultExpanded>\r\n        <AccordionSummary>\r\n          <Row>\r\n            <Col md={11}>\r\n              <Row className={\"mt-1\"}>\r\n                <Col md={12} className={classes.root2}>\r\n                  <b style={{ fontSize: \"25px\", color: \"rgb(153, 46, 98)\" }}>\r\n                    {patientObj.surname + \", \" + patientObj.firstName}\r\n                  </b>\r\n                </Col>\r\n                <Col\r\n                  md={4}\r\n                  className={classes.root2}\r\n                  style={{ marginTop: \"10px\" }}\r\n                >\r\n                  <span style={{ color: \"#000\" }}>\r\n                    {\" \"}\r\n                    Hospital Number :{\" \"}\r\n                    <b style={{ color: \"#0B72AA\" }}>\r\n                      {getHospitalNumber(patientObj.identifier)}\r\n                    </b>\r\n                  </span>\r\n                </Col>\r\n\r\n                <Col\r\n                  md={4}\r\n                  className={classes.root2}\r\n                  style={{ marginTop: \"10px\" }}\r\n                >\r\n                  <span style={{ color: \"#000\" }}>\r\n                    Date Of Birth :{\" \"}\r\n                    <b style={{ color: \"#0B72AA\" }}>{patientObj.dateOfBirth}</b>\r\n                  </span>\r\n                </Col>\r\n                <Col\r\n                  md={4}\r\n                  className={classes.root2}\r\n                  style={{ marginTop: \"10px\" }}\r\n                >\r\n                  <span style={{ color: \"#000\" }}>\r\n                    {\" \"}\r\n                    Age :{\" \"}\r\n                    <b style={{ color: \"#0B72AA\" }}>\r\n                      {calculate_age(patientObj.dateOfBirth)}\r\n                    </b>\r\n                  </span>\r\n                </Col>\r\n                <Col md={4} style={{ marginTop: \"10px\" }}>\r\n                  <span style={{ color: \"#000\" }}>\r\n                    {\" \"}\r\n                    Sex :{\" \"}\r\n                    <b\r\n                      style={{\r\n                        color: \"#0B72AA\",\r\n                        fontFamily: `'poppins', sans-serif`,\r\n                        fontWeight: \"bolder\",\r\n                      }}\r\n                    >\r\n                      {patientObj.sex}\r\n                    </b>\r\n                  </span>\r\n                </Col>\r\n                <Col\r\n                  md={4}\r\n                  className={classes.root2}\r\n                  style={{ marginTop: \"10px\" }}\r\n                >\r\n                  <span style={{ color: \"#000\" }}>\r\n                    {\" \"}\r\n                    Phone Number :{\" \"}\r\n                    <b style={{ color: \"#0B72AA\" }}>\r\n                      {getPhone(patientObj?.contactPoint)}\r\n                    </b>\r\n                  </span>\r\n                </Col>\r\n                <Col\r\n                  md={4}\r\n                  className={classes.root2}\r\n                  style={{ marginTop: \"10px\" }}\r\n                >\r\n                  <span style={{ color: \"#000\" }}>\r\n                    {\" \"}\r\n                    Address :{\" \"}\r\n                    <b style={{ color: \"#0B72AA\" }}>\r\n                      {getAddress(patientObj.address)}{\" \"}\r\n                    </b>\r\n                  </span>\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n        </AccordionSummary>\r\n        <AccordionDetails className={classes.details}>\r\n          {biometricStatus === true ? (\r\n            <>\r\n              <div>\r\n                <Typography variant=\"caption\">\r\n                  <Label\r\n                    style={{ height: \"30px\", fontSize: \"14px\" }}\r\n                    color={patientBiometricStatus === true ? \"green\" : \"red\"}\r\n                    size={\"large\"}\r\n                  >\r\n                    Biometrics{\" \"}\r\n                    {patientBiometricStatus === true\r\n                      ? \"Captured\"\r\n                      : \"Not Captured\"}\r\n                  </Label>\r\n                </Typography>\r\n              </div>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <div>\r\n                <Typography variant=\"caption\">\r\n                  <Label\r\n                    color={\"red\"}\r\n                    style={{ height: \"30px\", fontSize: \"14px\" }}\r\n                  >\r\n                    Biometrics Module Not Install\r\n                  </Label>\r\n                </Typography>\r\n              </div>\r\n            </>\r\n          )}\r\n        </AccordionDetails>\r\n      </Accordion>\r\n      {/*\r\n            <CaptureBiometric  modalstatus={modal} togglestatus={toggleModal} patientId={patientObj.id} biometricDevices={devices} setPatientBiometricStatus={setPatientBiometricStatus} />\r\n*/}\r\n    </div>\r\n  );\r\n}\r\n\r\nPatientsCard.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(PatientsCard);\r\n","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\PersonDemographics\\index.js",["623","624","625","626","627","628","629","630","631"],"import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { token, url as baseUrl } from \"../../../../api\";\r\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {\r\n  Accordion,\r\n  AccordionDetails,\r\n  AccordionSummary,\r\n} from \"@material-ui/core\";\r\nimport { Col, Row } from \"reactstrap\";\r\nimport { Label } from \"semantic-ui-react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  icon: {\r\n    verticalAlign: \"bottom\",\r\n    height: 20,\r\n    width: 20,\r\n  },\r\n  details: {\r\n    alignItems: \"center\",\r\n  },\r\n  column: {\r\n    flexBasis: \"20.33%\",\r\n  },\r\n  helper: {\r\n    borderLeft: `2px solid ${theme.palette.divider}`,\r\n    padding: `${theme.spacing(1)}px ${theme.spacing(1) * 2}px`,\r\n  },\r\n  link: {\r\n    color: theme.palette.primary.main,\r\n    textDecoration: \"none\",\r\n    \"&:hover\": {\r\n      textDecoration: \"underline\",\r\n    },\r\n  },\r\n});\r\nfunction Index(props) {\r\n  const { classes } = props;\r\n  const patientObj = props.patientObj ? props.patientObj : {};\r\n  const permissions = props.permissions ? props.permissions : [];\r\n  const [modal, setModal] = useState(false); //Modal to collect sample\r\n  const [patientBiometricStatus, setPatientBiometricStatus] = useState(\r\n    props.patientBiometricStatus\r\n  );\r\n  const toggleModal = () => setModal(!modal);\r\n\r\n  const [biometricStatus, setBiometricStatus] = useState(false);\r\n  const [devices, setDevices] = useState([]);\r\n  useEffect(() => {\r\n    setPatientBiometricStatus(props.patientBiometricStatus);\r\n    TemplateType();\r\n  }, [props.patientBiometricStatus]);\r\n  //Get list of KP\r\n  const TemplateType = () => {\r\n    axios\r\n      .get(`${baseUrl}modules/check?moduleName=biometric`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setBiometricStatus(response.data);\r\n        if (response.data === true) {\r\n          axios\r\n            .get(`${baseUrl}biometrics/devices`, {\r\n              headers: { Authorization: `Bearer ${token}` },\r\n            })\r\n            .then((response) => {\r\n              setDevices(response.data);\r\n            })\r\n            .catch((error) => {\r\n              console.log(error);\r\n            });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n  const getHospitalNumber = (identifier) => {\r\n    const hospitalNumber = identifier.identifier.find(\r\n      (obj) => obj.type == \"HospitalNumber\"\r\n    );\r\n    return hospitalNumber ? hospitalNumber.value : \"\";\r\n  };\r\n\r\n  const calculate_age = (dob) => {\r\n    const today = new Date();\r\n    const dateParts = dob.split(\"-\");\r\n    const birthDate = new Date(dob); // create a date object directlyfrom`dob1`argument\r\n    let age_now = today.getFullYear() - birthDate.getFullYear();\r\n    const m = today.getMonth() - birthDate.getMonth();\r\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n      age_now--;\r\n    }\r\n    if (age_now === 0) {\r\n      return m + \" month(s)\";\r\n    }\r\n    return age_now + \" year(s)\";\r\n  };\r\n\r\n  const getPhone = (contactPoint) => {\r\n    const phoneContact = contactPoint?.contactPoint?.find(\r\n      (obj) => obj.type == \"phone\"\r\n    );\r\n    return phoneContact ? phoneContact.value : \"\";\r\n  };\r\n\r\n  const getAddress = (address) => {\r\n    const city =\r\n      address && address.address && address.address.length > 0\r\n        ? `${address.address[0].line[0]}, ${address.address[0].city}`\r\n        : null;\r\n    return city;\r\n  };\r\n\r\n  const handleBiometricCapture = (id) => {\r\n    let patientObjID = id;\r\n    setModal(!modal);\r\n  };\r\n  return (\r\n    <div className={classes.root}>\r\n      <Accordion defaultExpanded>\r\n        <AccordionSummary>\r\n          <Row>\r\n            <Col md={11}>\r\n              <Row className={\"mt-1\"}>\r\n                <Col md={12} className={classes.root2}>\r\n                  <b style={{ fontSize: \"25px\", color: \"rgb(153, 46, 98)\" }}>\r\n                    {patientObj.surname + \", \" + patientObj.firstName}\r\n                  </b>\r\n                </Col>\r\n                <Col\r\n                  md={4}\r\n                  className={classes.root2}\r\n                  style={{ marginTop: \"10px\" }}\r\n                >\r\n                  <span style={{ color: \"#000\" }}>\r\n                    {\" \"}\r\n                    Hospital Number :{\" \"}\r\n                    <b style={{ color: \"#0B72AA\" }}>\r\n                      {getHospitalNumber(patientObj.identifier)}\r\n                    </b>\r\n                  </span>\r\n                </Col>\r\n\r\n                <Col\r\n                  md={4}\r\n                  className={classes.root2}\r\n                  style={{ marginTop: \"10px\" }}\r\n                >\r\n                  <span style={{ color: \"#000\" }}>\r\n                    Date Of Birth :{\" \"}\r\n                    <b style={{ color: \"#0B72AA\" }}>{patientObj.dateOfBirth}</b>\r\n                  </span>\r\n                </Col>\r\n                <Col\r\n                  md={4}\r\n                  className={classes.root2}\r\n                  style={{ marginTop: \"10px\" }}\r\n                >\r\n                  <span style={{ color: \"#000\" }}>\r\n                    {\" \"}\r\n                    Age :{\" \"}\r\n                    <b style={{ color: \"#0B72AA\" }}>\r\n                      {calculate_age(patientObj.dateOfBirth)}\r\n                    </b>\r\n                  </span>\r\n                </Col>\r\n                <Col md={4} style={{ marginTop: \"10px\" }}>\r\n                  <span style={{ color: \"#000\" }}>\r\n                    {\" \"}\r\n                    Sex :{\" \"}\r\n                    <b\r\n                      style={{\r\n                        color: \"#0B72AA\",\r\n                        fontFamily: `'poppins', sans-serif`,\r\n                        fontWeight: \"bolder\",\r\n                      }}\r\n                    >\r\n                      {patientObj.sex}\r\n                    </b>\r\n                  </span>\r\n                </Col>\r\n                <Col\r\n                  md={4}\r\n                  className={classes.root2}\r\n                  style={{ marginTop: \"10px\" }}\r\n                >\r\n                  <span style={{ color: \"#000\" }}>\r\n                    {\" \"}\r\n                    Phone Number :{\" \"}\r\n                    <b style={{ color: \"#0B72AA\" }}>\r\n                      {getPhone(patientObj?.contactPoint)}\r\n                    </b>\r\n                  </span>\r\n                </Col>\r\n                <Col\r\n                  md={4}\r\n                  className={classes.root2}\r\n                  style={{ marginTop: \"10px\" }}\r\n                >\r\n                  <span style={{ color: \"#000\" }}>\r\n                    {\" \"}\r\n                    Address :{\" \"}\r\n                    <b style={{ color: \"#0B72AA\" }}>\r\n                      {getAddress(patientObj.address)}{\" \"}\r\n                    </b>\r\n                  </span>\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n        </AccordionSummary>\r\n        <AccordionDetails className={classes.details}>\r\n          {biometricStatus === true ? (\r\n            <>\r\n              <div>\r\n                <Typography variant=\"caption\">\r\n                  <Label\r\n                    style={{ height: \"30px\", fontSize: \"14px\" }}\r\n                    color={patientBiometricStatus === true ? \"green\" : \"red\"}\r\n                    size={\"large\"}\r\n                  >\r\n                    Biometrics{\" \"}\r\n                    {patientBiometricStatus === true\r\n                      ? \"Captured\"\r\n                      : \"Not Captured\"}\r\n                  </Label>\r\n                </Typography>\r\n              </div>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <div>\r\n                <Typography variant=\"caption\">\r\n                  <Label\r\n                    color={\"red\"}\r\n                    style={{ height: \"30px\", fontSize: \"14px\" }}\r\n                  >\r\n                    Biometrics Module Not Install\r\n                  </Label>\r\n                </Typography>\r\n              </div>\r\n            </>\r\n          )}\r\n        </AccordionDetails>\r\n      </Accordion>\r\n      {/*\r\n            <CaptureBiometric  modalstatus={modal} togglestatus={toggleModal} patientId={patientObj.id} biometricDevices={devices} setPatientBiometricStatus={setPatientBiometricStatus} />\r\n*/}\r\n    </div>\r\n  );\r\n}\r\n\r\nIndex.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(Index);\r\n","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\Home\\NotCaptured.js",["632","633","634","635","636","637","638","639","640","641","642","643","644","645","646","647","648","649","650"],"//List of patients without biometrics\r\nimport React, { forwardRef, useCallback, useEffect, useState } from \"react\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport MaterialTable from \"material-table\";\r\nimport SplitActionButton from \"../SplitActionButton\";\r\nimport { Modal, ModalBody, ModalFooter, ModalHeader } from \"reactstrap\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport axios from \"axios\";\r\nimport { token, url as baseUrl } from \"../../../../api\";\r\nimport { FaEye } from \"react-icons/fa\";\r\nimport { MdFingerprint } from \"react-icons/md\";\r\n\r\nimport { MdDeleteForever, MdModeEdit, MdPerson } from \"react-icons/md\";\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n    \"& a\": {\r\n      textDecoration: \"none !important\",\r\n    },\r\n  },\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n}));\r\n\r\nfunction NotCaptured(props) {\r\n  const classes = useStyles();\r\n  const [patients, setPatients] = useState([]);\r\n  const [permissions, setPermissions] = useState(props.permissions);\r\n  const [loading, setLoading] = useState(\"\");\r\n  const [patient, setPatient] = useState(false);\r\n  const [enablePPI, setEnablePPI] = useState(true);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n  //Get list of Finger index\r\n  const userPermission = () => {\r\n    axios\r\n      .get(`${baseUrl}account`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setPermissions(response.data.permissions);\r\n      })\r\n      .catch((error) => {});\r\n  };\r\n  const loadPatients = useCallback(async () => {\r\n    try {\r\n      await axios\r\n        .get(`${baseUrl}patient/getall-patients-with-no-biometric`, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((response) => {\r\n          if (response.data) {\r\n            setPatients(response.data);\r\n          }\r\n        });\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }, []);\r\n\r\n  function actionItems(row) {\r\n    return [\r\n      //   {\r\n      //     name: \"View\",\r\n      //     type: \"link\",\r\n      //     icon: <FaEye size=\"22\" />,\r\n      //     to: {\r\n      //       pathname: \"/patient-biometrics\",\r\n      //       state: { patientObj: row, permissions: permissions },\r\n      //     },\r\n      //   },\r\n      {\r\n        ...(permissions.includes(\"view_patient\") ||\r\n          (permissions.includes(\"all_permission\") && {\r\n            name: \"Capture\",\r\n            type: \"link\",\r\n            icon: <MdFingerprint size=\"22\" />,\r\n            to: {\r\n              pathname: \"/patient-dashboard\",\r\n              state: { patientObj: row, permissions: permissions },\r\n            },\r\n          })),\r\n      },\r\n    ];\r\n  }\r\n\r\n  const handleRemoteData = (query) =>\r\n    new Promise((resolve, reject) => {\r\n      axios\r\n        .get(\r\n          `${baseUrl}patient/getall-patients-with-no-biometric?pageSize=${query.pageSize}&pageNo=${query.page}&searchParam=${query.search}`,\r\n          { headers: { Authorization: `Bearer ${token}` } }\r\n        )\r\n        .then((response) => response)\r\n        .then((result) => {\r\n          resolve({\r\n            data: result.data.records.map((row) => ({\r\n              name: [row.firstName, row.otherName, row.surname]\r\n                .filter(Boolean)\r\n                .join(\", \"),\r\n              id: getHospitalNumber(row.identifier),\r\n              sex:\r\n                row.sex.toLowerCase().charAt(0).toUpperCase() +\r\n                row.sex.slice(1).toLowerCase(),\r\n              dateOfBirth: row.dateOfBirth,\r\n              age:\r\n                row.dateOfBirth === 0 ||\r\n                row.dateOfBirth === undefined ||\r\n                row.dateOfBirth === null ||\r\n                row.dateOfBirth === \"\"\r\n                  ? 0\r\n                  : calculate_age(row.dateOfBirth),\r\n              actions: (\r\n                <div>\r\n                  <SplitActionButton actions={actionItems(row)} />\r\n                </div>\r\n              ),\r\n            })),\r\n            page: query.page,\r\n            totalCount: result.data.totalRecords,\r\n          });\r\n        });\r\n    });\r\n  useEffect(() => {\r\n    userPermission();\r\n    loadPatients();\r\n  }, []);\r\n  const calculate_age = (dob) => {\r\n    const today = new Date();\r\n    const dateParts = dob.split(\"-\");\r\n    const birthDate = new Date(dob); // create a date object directlyfrom`dob1`argument\r\n    let age_now = today.getFullYear() - birthDate.getFullYear();\r\n    const m = today.getMonth() - birthDate.getMonth();\r\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n      age_now--;\r\n    }\r\n    if (age_now === 0) {\r\n      return m + \" month(s)\";\r\n    }\r\n    return age_now + \" year(s)\";\r\n  };\r\n  const getHospitalNumber = (identifier) => {\r\n    const hospitalNumber = identifier.identifier.find(\r\n      (obj) => obj.type == \"HospitalNumber\"\r\n    );\r\n    return hospitalNumber ? hospitalNumber.value : \"\";\r\n  };\r\n\r\n  const enablePPIColumns = () => {\r\n    setEnablePPI(!enablePPI);\r\n  };\r\n  const PPISelect = () => (\r\n    <div>\r\n      {permissions.includes(\"view_patient\") ||\r\n      permissions.includes(\"all_permission\") ? (\r\n        <FormGroup className=\" float-right mr-1\">\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox\r\n                onChange={enablePPIColumns}\r\n                checked={!enablePPI}\r\n                style={{ color: \"#014d88\", fontWeight: \"bold\" }}\r\n              />\r\n            }\r\n            label=\"Show PII\"\r\n            style={{ color: \"#014d88\", fontWeight: \"bolder\" }}\r\n          />\r\n        </FormGroup>\r\n      ) : (\r\n        <h5 style={{ color: \"#3d4465\", fontWeight: \"bold\" }}>Patients</h5>\r\n      )}\r\n    </div>\r\n  );\r\n  const handleChangePage = (page) => {\r\n    setCurrentPage(page + 1);\r\n  };\r\n  const localization = {\r\n    pagination: {\r\n      labelDisplayedRows: `Page: ${currentPage}`,\r\n    },\r\n  };\r\n  return (\r\n    <div>\r\n      {/*<ToastContainer autoClose={3000} hideProgressBar />*/}\r\n      <h3>Patients not captured</h3>\r\n      <MaterialTable\r\n        icons={tableIcons}\r\n        title={<PPISelect />}\r\n        columns={[\r\n          {\r\n            title: \"Name\",\r\n            field: \"name\",\r\n            filtering: false,\r\n            hidden: enablePPI,\r\n          },\r\n          { title: \"Hosp. Number\", field: \"id\", filtering: false },\r\n          { title: \"Sex\", field: \"sex\", filtering: false },\r\n          { title: \"Date Of Birth\", field: \"dateOfBirth\", filtering: false },\r\n          { title: \"Age\", field: \"age\", filtering: false },\r\n          { title: \"Actions\", field: \"actions\", filtering: false },\r\n        ]}\r\n        isLoading={loading}\r\n        data={handleRemoteData}\r\n        options={{\r\n          headerStyle: {\r\n            backgroundColor: \"#014d88\",\r\n            color: \"#fff\",\r\n            fontSize: \"16px\",\r\n            padding: \"10px\",\r\n            fontWeight: \"bolder\",\r\n          },\r\n          searchFieldStyle: {\r\n            width: \"50%\",\r\n          },\r\n          filtering: false,\r\n          exportButton: false,\r\n          searchFieldAlignment: \"left\",\r\n          pageSizeOptions: [10, 20, 100],\r\n          pageSize: 10,\r\n          debounceInterval: 400,\r\n        }}\r\n        onChangePage={handleChangePage}\r\n        //localization={localization}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NotCaptured;\r\n","C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\Recapture.js",["651","652","653","654","655","656","657","658","659","660","661","662","663","664","665","666","667","668","669","670","671","672","673","674","675"],"C:\\Users\\USER\\Data.fi\\patient-module\\src\\main\\webapp\\components\\PatientBiometrics.js",["676","677","678","679","680","681","682","683","684","685","686","687","688","689","690","691","692","693","694","695","696","697","698","699","700","701","702","703","704","705","706","707"],"import React, { useState, useEffect } from \"react\";\r\nimport _ from \"lodash\";\r\nimport axios from \"axios\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport { Icon, List } from \"semantic-ui-react\";\r\nimport FingerprintIcon from \"@material-ui/icons/Fingerprint\";\r\nimport SaveIcon from \"@mui/icons-material/Save\";\r\nimport leftFinger1 from \"../images/fingers/left_hand_6.png\";\r\nimport leftFinger2 from \"../images/fingers/left_hand_7.png\";\r\nimport leftFinger3 from \"../images/fingers/left_hand_8.png\";\r\nimport leftFinger4 from \"../images/fingers/left_hand_9.png\";\r\nimport leftFinger5 from \"../images/fingers/left_hand_10.png\";\r\nimport rightFinger1 from \"../images/fingers/right_hand_1.png\";\r\nimport rightFinger2 from \"../images/fingers/right_hand_2.png\";\r\nimport rightFinger3 from \"../images/fingers/right_hand_3.png\";\r\nimport rightFinger4 from \"../images/fingers/right_hand_4.png\";\r\nimport rightFinger5 from \"../images/fingers/right_hand_5.png\";\r\nimport { token, url as baseUrl } from \"../../../api\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport {\r\n  CardTitle,\r\n  Row,\r\n  Label,\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  FormGroup,\r\n  CardHeader,\r\n  Input,\r\n  Badge,\r\n  CardSubtitle,\r\n} from \"reactstrap\";\r\n\r\nconst PatientBiometrics = (props) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [devices, setDevices] = useState([]);\r\n  const [biometricDevices, setbiometricDevices] = useState([]);\r\n  const [isNewStatus, setIsNewStatus] = useState(true);\r\n  const [tryAgain, setTryAgain] = useState(false);\r\n  const [success, setSuccess] = useState(false);\r\n  const [errors, setErrors] = useState({});\r\n  const [imageQuality, setImageQuality] = useState(false);\r\n  const [objValues, setObjValues] = useState({\r\n    biometricType: \"FINGERPRINT\",\r\n    patientId: props.patientId,\r\n    templateType: \"\",\r\n    device: \"\",\r\n    reason: \"\",\r\n    age: \"\",\r\n  });\r\n  const [leftFinger1Value, setLeftFinger1Value] = useState({});\r\n  const [leftFinger2Value, setLeftFinger2Value] = useState({});\r\n  const [leftFinger3Value, setLeftFinger3Value] = useState({});\r\n  const [leftFinger4Value, setLeftFinger4Value] = useState({});\r\n  const [leftFinger5Value, setLeftFinger5Value] = useState({});\r\n\r\n  useEffect(() => {\r\n    TemplateType();\r\n  }, []);\r\n\r\n  const TemplateType = () => {\r\n    axios\r\n      .get(`${baseUrl}modules/check?moduleName=biometric`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        if (response.data === true) {\r\n          axios\r\n            .get(`${baseUrl}biometrics/devices?active=true`, {\r\n              headers: { Authorization: `Bearer ${token}` },\r\n            })\r\n            .then((response) => {\r\n              setDevices(response.data.find((x) => x.active === true));\r\n              setbiometricDevices(response.data);\r\n            })\r\n            .catch((error) => {\r\n              console.log(error);\r\n            });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n\r\n  const calculate_age = (dob) => {\r\n    const today = new Date();\r\n    const dateParts = dob.split(\"-\");\r\n    const birthDate = new Date(dob); // create a date object directlyfrom`dob1`argument\r\n    let age_now = today.getFullYear() - birthDate.getFullYear();\r\n    const m = today.getMonth() - birthDate.getMonth();\r\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n      age_now--;\r\n    }\r\n    if (age_now === 0) {\r\n      return m + \" month(s)\";\r\n    }\r\n    return age_now;\r\n  };\r\n\r\n  const getFingerprintsQuality = (imageQuality) => {\r\n    if (imageQuality > 60 && imageQuality <= 75) {\r\n      return (\r\n        <Badge color=\"warning\" style={{ fontSize: \"14px\" }}>\r\n          {imageQuality + \"%\"}\r\n        </Badge>\r\n      );\r\n    } else if (imageQuality > 75) {\r\n      return (\r\n        <Badge color=\"success\" style={{ fontSize: \"14px\" }}>\r\n          {imageQuality + \"%\"}\r\n        </Badge>\r\n      );\r\n    } else {\r\n      return (\r\n        <Badge color=\"error\" style={{ fontSize: \"14px\" }}>\r\n          {imageQuality + \"%\"}\r\n        </Badge>\r\n      );\r\n    }\r\n  };\r\n\r\n  const captureFinger = (e, templateType) => {\r\n    e.preventDefault();\r\n\r\n    let objValues = {\r\n      biometricType: \"FINGERPRINT\",\r\n      patientId: \"000101\",\r\n      templateType: templateType,\r\n      device: \"\",\r\n      reason: \"\",\r\n      age: \"\",\r\n    };\r\n\r\n    setLoading(true);\r\n\r\n    axios\r\n      .post(\r\n        `${devices.url}?reader=${devices.name}&isNew=${isNewStatus}`,\r\n        objValues,\r\n        {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        setLoading(false);\r\n        console.log(response);\r\n\r\n        if (response.data.type === \"ERROR\") {\r\n          setLoading(false);\r\n          setTryAgain(true);\r\n\r\n          // window.setTimeout(() => {\r\n          //   setTryAgain(false);\r\n          // }, 5000);\r\n\r\n          toast.error(response.data.message.ERROR);\r\n          setIsNewStatus(false);\r\n        } else if (response.data.type === \"SUCCESS\") {\r\n          const templateType = response.data.templateType;\r\n          console.log(templateType);\r\n          if (templateType === \"Left Thumb\") {\r\n            setLeftFinger1Value(response.data);\r\n          } else if (templateType === \"Left Index Finger\") {\r\n            setLeftFinger2Value(response.data);\r\n          } else if (templateType === \"Left Middle Finger\") {\r\n            setLeftFinger3Value(response.data);\r\n          } else if (templateType === \"Left Ring Finger\") {\r\n            setLeftFinger4Value(response.data);\r\n          } else if (templateType === \"Left Little Finger\") {\r\n            setLeftFinger5Value(response.data);\r\n          }\r\n          setTryAgain(false);\r\n          setSuccess(true);\r\n\r\n          // window.setTimeout(() => {\r\n          //   setSuccess(false);\r\n          //   setLoading(false);\r\n          // }, 5000);\r\n\r\n          setObjValues({ ...objValues, templateType: \"\" });\r\n          setIsNewStatus(false);\r\n        } else {\r\n          setLoading(false);\r\n          setTryAgain(true);\r\n          toast.error(\"Something went wrong capturing biometrics...\", {\r\n            position: toast.POSITION.BOTTOM_CENTER,\r\n          });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Card>\r\n        <CardHeader>\r\n          Biometrics Capture & Recapture{\" \"}\r\n          <p\r\n            style={{\r\n              color: \"#014d88\",\r\n              fontSize: \"14px\",\r\n            }}\r\n          >\r\n            <b>Device: </b> {devices.type}\r\n          </p>\r\n          <MatButton\r\n            className=\" float-right mr-1\"\r\n            variant=\"contained\"\r\n            startIcon={<SaveIcon />}\r\n            style={{\r\n              backgroundColor: \"#014d88\",\r\n              color: \"#fff\",\r\n              height: \"35px\",\r\n              float: \"right\",\r\n              //marginBottom: \"40px\",\r\n            }}\r\n            onClick={\"\"}\r\n          >\r\n            <span style={{ textTransform: \"capitalize\" }}>\r\n              Save Captured Finger Prints\r\n            </span>\r\n          </MatButton>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <Row>\r\n            <Col>\r\n              <Card>\r\n                <CardBody>\r\n                  {\r\n                    _.isEmpty(leftFinger1Value) ? (\r\n                      \"\"\r\n                    ) : (\r\n                      <CardTitle>\r\n                        {getFingerprintsQuality(leftFinger1Value.imageQuality)}{\" \"}\r\n                        <span\r\n                          onClick={() => {\r\n                            \"\";\r\n                            // deleteTempBiometrics(x);\r\n                          }}\r\n                        >\r\n                          <Icon\r\n                            name=\"cancel\"\r\n                            color=\"red\"\r\n                            style={{ float: \"right\" }}\r\n                          />{\" \"}\r\n                        </span>\r\n                      </CardTitle>\r\n                    )\r\n                    // <CardSubtitle></CardSubtitle>\r\n                  }\r\n                  <center>\r\n                    {_.isEmpty(leftFinger1Value) ? (\r\n                      <img src={leftFinger1} width={150} height={180} />\r\n                    ) : (\r\n                      <img\r\n                        src={`data:image/bmp;base64,${leftFinger1Value.image}`}\r\n                        width={150}\r\n                        height={180}\r\n                      />\r\n                    )}\r\n                  </center>\r\n                  <center>\r\n                    <MatButton\r\n                      type=\"button\"\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      onClick={(event) => captureFinger(event, \"Left Thumb\")}\r\n                      className={\"mt-4\"}\r\n                      style={{ backgroundColor: \"#992E62\" }}\r\n                      startIcon={<FingerprintIcon />}\r\n                    >\r\n                      Capture Finger\r\n                    </MatButton>\r\n                  </center>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n            <Col>\r\n              <Card>\r\n                <CardBody>\r\n                  {_.isEmpty(leftFinger2Value) ? (\r\n                    \"\"\r\n                  ) : (\r\n                    <CardTitle>\r\n                      {getFingerprintsQuality(80)}{\" \"}\r\n                      <span\r\n                        onClick={() => {\r\n                          \"\";\r\n                          // deleteTempBiometrics(x);\r\n                        }}\r\n                      >\r\n                        <Icon\r\n                          name=\"cancel\"\r\n                          color=\"red\"\r\n                          style={{ float: \"right\" }}\r\n                        />{\" \"}\r\n                      </span>\r\n                    </CardTitle>\r\n                  )}\r\n                  <center>\r\n                    {_.isEmpty(leftFinger2Value) ? (\r\n                      <img src={leftFinger2} width={150} height={180} />\r\n                    ) : (\r\n                      <img\r\n                        src={`data:image/bmp;base64,${leftFinger2Value.image}`}\r\n                        width={150}\r\n                        height={180}\r\n                      />\r\n                    )}\r\n                  </center>\r\n                  <center>\r\n                    <MatButton\r\n                      type=\"button\"\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      onClick={(event) =>\r\n                        captureFinger(event, \"Left Index Finger\")\r\n                      }\r\n                      className={\"mt-4\"}\r\n                      style={{ backgroundColor: \"#992E62\" }}\r\n                      startIcon={<FingerprintIcon />}\r\n                    >\r\n                      Capture Finger\r\n                    </MatButton>\r\n                  </center>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n            <Col>\r\n              <Card>\r\n                <CardBody>\r\n                  {_.isEmpty(leftFinger3Value) ? (\r\n                    \"\"\r\n                  ) : (\r\n                    <CardTitle>\r\n                      {getFingerprintsQuality(80)}{\" \"}\r\n                      <span\r\n                        onClick={() => {\r\n                          \"\";\r\n                          // deleteTempBiometrics(x);\r\n                        }}\r\n                      >\r\n                        <Icon\r\n                          name=\"cancel\"\r\n                          color=\"red\"\r\n                          style={{ float: \"right\" }}\r\n                        />{\" \"}\r\n                      </span>\r\n                    </CardTitle>\r\n                  )}\r\n                  <center>\r\n                    {_.isEmpty(leftFinger3Value) ? (\r\n                      <img src={leftFinger3} width={150} height={180} />\r\n                    ) : (\r\n                      <img\r\n                        src={`data:image/bmp;base64,${leftFinger3Value.image}`}\r\n                        width={150}\r\n                        height={180}\r\n                      />\r\n                    )}\r\n                  </center>\r\n                  <center>\r\n                    <MatButton\r\n                      type=\"button\"\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      onClick={(event) =>\r\n                        captureFinger(event, \"Left Middle Finger\")\r\n                      }\r\n                      className={\"mt-4\"}\r\n                      style={{ backgroundColor: \"#992E62\" }}\r\n                      startIcon={<FingerprintIcon />}\r\n                    >\r\n                      Capture Finger\r\n                    </MatButton>\r\n                  </center>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n            <Col>\r\n              <Card>\r\n                <CardBody>\r\n                  {_.isEmpty(leftFinger4Value) ? (\r\n                    \"\"\r\n                  ) : (\r\n                    <CardTitle>\r\n                      {getFingerprintsQuality(80)}{\" \"}\r\n                      <span\r\n                        onClick={() => {\r\n                          \"\";\r\n                          // deleteTempBiometrics(x);\r\n                        }}\r\n                      >\r\n                        <Icon\r\n                          name=\"cancel\"\r\n                          color=\"red\"\r\n                          style={{ float: \"right\" }}\r\n                        />{\" \"}\r\n                      </span>\r\n                    </CardTitle>\r\n                  )}\r\n                  <center>\r\n                    {_.isEmpty(leftFinger4Value) ? (\r\n                      <img src={leftFinger4} width={150} height={180} />\r\n                    ) : (\r\n                      <img\r\n                        src={`data:image/bmp;base64,${leftFinger4Value.image}`}\r\n                        width={150}\r\n                        height={180}\r\n                      />\r\n                    )}\r\n                  </center>\r\n                  <center>\r\n                    <MatButton\r\n                      type=\"button\"\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      onClick={(event) =>\r\n                        captureFinger(event, \"Left Ring Finger\")\r\n                      }\r\n                      className={\"mt-4\"}\r\n                      style={{ backgroundColor: \"#992E62\" }}\r\n                      startIcon={<FingerprintIcon />}\r\n                    >\r\n                      Capture Finger\r\n                    </MatButton>\r\n                  </center>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n            <Col>\r\n              <Card>\r\n                <CardBody>\r\n                  {_.isEmpty(leftFinger5Value) ? (\r\n                    \"\"\r\n                  ) : (\r\n                    <CardTitle>\r\n                      {getFingerprintsQuality(80)}{\" \"}\r\n                      <span\r\n                        onClick={() => {\r\n                          \"\";\r\n                          // deleteTempBiometrics(x);\r\n                        }}\r\n                      >\r\n                        <Icon\r\n                          name=\"cancel\"\r\n                          color=\"red\"\r\n                          style={{ float: \"right\" }}\r\n                        />{\" \"}\r\n                      </span>\r\n                    </CardTitle>\r\n                  )}\r\n                  <center>\r\n                    {_.isEmpty(leftFinger5Value) ? (\r\n                      <img src={leftFinger5} width={150} height={180} />\r\n                    ) : (\r\n                      <img\r\n                        src={`data:image/bmp;base64,${leftFinger5Value.image}`}\r\n                        width={150}\r\n                        height={180}\r\n                      />\r\n                    )}\r\n                  </center>\r\n                  <center>\r\n                    <MatButton\r\n                      type=\"button\"\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      onClick={(event) =>\r\n                        captureFinger(event, \"Left Little Finger\")\r\n                      }\r\n                      className={\"mt-4\"}\r\n                      style={{ backgroundColor: \"#992E62\" }}\r\n                      startIcon={<FingerprintIcon />}\r\n                    >\r\n                      Capture Finger\r\n                    </MatButton>\r\n                  </center>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <br />\r\n          <Row></Row>\r\n        </CardBody>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PatientBiometrics;\r\n",{"ruleId":"708","replacedBy":"709"},{"ruleId":"710","replacedBy":"711"},{"ruleId":"712","severity":1,"message":"713","line":1,"column":17,"nodeType":"714","messageId":"715","endLine":1,"endColumn":28},{"ruleId":"712","severity":1,"message":"716","line":1,"column":30,"nodeType":"714","messageId":"715","endLine":1,"endColumn":39},{"ruleId":"712","severity":1,"message":"717","line":1,"column":41,"nodeType":"714","messageId":"715","endLine":1,"endColumn":49},{"ruleId":"712","severity":1,"message":"718","line":5,"column":8,"nodeType":"714","messageId":"715","endLine":5,"endColumn":24},{"ruleId":"712","severity":1,"message":"719","line":14,"column":8,"nodeType":"714","messageId":"715","endLine":14,"endColumn":19},{"ruleId":"712","severity":1,"message":"720","line":2,"column":8,"nodeType":"714","messageId":"715","endLine":2,"endColumn":17},{"ruleId":"712","severity":1,"message":"721","line":3,"column":21,"nodeType":"714","messageId":"715","endLine":3,"endColumn":31},{"ruleId":"712","severity":1,"message":"722","line":5,"column":8,"nodeType":"714","messageId":"715","endLine":5,"endColumn":17},{"ruleId":"712","severity":1,"message":"723","line":7,"column":10,"nodeType":"714","messageId":"715","endLine":7,"endColumn":13},{"ruleId":"712","severity":1,"message":"724","line":8,"column":10,"nodeType":"714","messageId":"715","endLine":8,"endColumn":14},{"ruleId":"712","severity":1,"message":"725","line":8,"column":23,"nodeType":"714","messageId":"715","endLine":8,"endColumn":30},{"ruleId":"712","severity":1,"message":"726","line":8,"column":32,"nodeType":"714","messageId":"715","endLine":8,"endColumn":36},{"ruleId":"712","severity":1,"message":"727","line":12,"column":10,"nodeType":"714","messageId":"715","endLine":12,"endColumn":18},{"ruleId":"712","severity":1,"message":"728","line":13,"column":8,"nodeType":"714","messageId":"715","endLine":13,"endColumn":11},{"ruleId":"712","severity":1,"message":"729","line":14,"column":41,"nodeType":"714","messageId":"715","endLine":14,"endColumn":52},{"ruleId":"712","severity":1,"message":"730","line":16,"column":8,"nodeType":"714","messageId":"715","endLine":16,"endColumn":24},{"ruleId":"712","severity":1,"message":"731","line":17,"column":8,"nodeType":"714","messageId":"715","endLine":17,"endColumn":16},{"ruleId":"712","severity":1,"message":"732","line":21,"column":9,"nodeType":"714","messageId":"715","endLine":21,"endColumn":19},{"ruleId":"712","severity":1,"message":"733","line":22,"column":36,"nodeType":"714","messageId":"715","endLine":22,"endColumn":47},{"ruleId":"712","severity":1,"message":"734","line":22,"column":83,"nodeType":"714","messageId":"715","endLine":22,"endColumn":93},{"ruleId":"712","severity":1,"message":"735","line":26,"column":8,"nodeType":"714","messageId":"715","endLine":26,"endColumn":20},{"ruleId":"712","severity":1,"message":"736","line":40,"column":10,"nodeType":"714","messageId":"715","endLine":40,"endColumn":24},{"ruleId":"712","severity":1,"message":"737","line":41,"column":8,"nodeType":"714","messageId":"715","endLine":41,"endColumn":13},{"ruleId":"712","severity":1,"message":"738","line":43,"column":7,"nodeType":"714","messageId":"715","endLine":43,"endColumn":11},{"ruleId":"712","severity":1,"message":"739","line":44,"column":7,"nodeType":"714","messageId":"715","endLine":44,"endColumn":18},{"ruleId":"712","severity":1,"message":"740","line":124,"column":7,"nodeType":"714","messageId":"715","endLine":124,"endColumn":25},{"ruleId":"712","severity":1,"message":"741","line":148,"column":7,"nodeType":"714","messageId":"715","endLine":148,"endColumn":19},{"ruleId":"712","severity":1,"message":"742","line":156,"column":11,"nodeType":"714","messageId":"715","endLine":156,"endColumn":21},{"ruleId":"712","severity":1,"message":"743","line":157,"column":21,"nodeType":"714","messageId":"715","endLine":157,"endColumn":31},{"ruleId":"712","severity":1,"message":"744","line":162,"column":12,"nodeType":"714","messageId":"715","endLine":162,"endColumn":17},{"ruleId":"712","severity":1,"message":"745","line":162,"column":19,"nodeType":"714","messageId":"715","endLine":162,"endColumn":27},{"ruleId":"712","severity":1,"message":"746","line":165,"column":13,"nodeType":"714","messageId":"715","endLine":165,"endColumn":25},{"ruleId":"712","severity":1,"message":"747","line":165,"column":27,"nodeType":"714","messageId":"715","endLine":165,"endColumn":34},{"ruleId":"712","severity":1,"message":"748","line":176,"column":12,"nodeType":"714","messageId":"715","endLine":176,"endColumn":23},{"ruleId":"712","severity":1,"message":"749","line":176,"column":25,"nodeType":"714","messageId":"715","endLine":176,"endColumn":39},{"ruleId":"712","severity":1,"message":"750","line":180,"column":24,"nodeType":"714","messageId":"715","endLine":180,"endColumn":37},{"ruleId":"751","severity":1,"message":"752","line":217,"column":39,"nodeType":"753","messageId":"754","endLine":217,"endColumn":41},{"ruleId":"755","severity":1,"message":"756","line":231,"column":8,"nodeType":"757","endLine":231,"endColumn":10,"suggestions":"758"},{"ruleId":"712","severity":1,"message":"759","line":265,"column":9,"nodeType":"714","messageId":"715","endLine":265,"endColumn":23},{"ruleId":"712","severity":1,"message":"760","line":270,"column":11,"nodeType":"714","messageId":"715","endLine":270,"endColumn":23},{"ruleId":"712","severity":1,"message":"761","line":278,"column":11,"nodeType":"714","messageId":"715","endLine":278,"endColumn":18},{"ruleId":"762","severity":1,"message":"763","line":378,"column":78,"nodeType":"764","messageId":"765","endLine":378,"endColumn":80},{"ruleId":"762","severity":1,"message":"763","line":378,"column":107,"nodeType":"764","messageId":"765","endLine":378,"endColumn":109},{"ruleId":"762","severity":1,"message":"766","line":378,"column":107,"nodeType":"764","messageId":"765","endLine":378,"endColumn":109},{"ruleId":"762","severity":1,"message":"766","line":378,"column":150,"nodeType":"764","messageId":"765","endLine":378,"endColumn":152},{"ruleId":"712","severity":1,"message":"767","line":405,"column":11,"nodeType":"714","messageId":"715","endLine":405,"endColumn":19},{"ruleId":"712","severity":1,"message":"768","line":413,"column":11,"nodeType":"714","messageId":"715","endLine":413,"endColumn":19},{"ruleId":"769","severity":1,"message":"770","line":418,"column":69,"nodeType":"771","messageId":"772","endLine":418,"endColumn":71},{"ruleId":"712","severity":1,"message":"773","line":450,"column":11,"nodeType":"714","messageId":"715","endLine":450,"endColumn":18},{"ruleId":"751","severity":1,"message":"752","line":465,"column":92,"nodeType":"753","messageId":"754","endLine":465,"endColumn":94},{"ruleId":"712","severity":1,"message":"774","line":36,"column":10,"nodeType":"714","messageId":"715","endLine":36,"endColumn":20},{"ruleId":"712","severity":1,"message":"775","line":142,"column":19,"nodeType":"714","messageId":"715","endLine":142,"endColumn":31},{"ruleId":"712","severity":1,"message":"776","line":143,"column":9,"nodeType":"714","messageId":"715","endLine":143,"endColumn":21},{"ruleId":"712","severity":1,"message":"777","line":144,"column":9,"nodeType":"714","messageId":"715","endLine":144,"endColumn":28},{"ruleId":"712","severity":1,"message":"778","line":145,"column":9,"nodeType":"714","messageId":"715","endLine":145,"endColumn":32},{"ruleId":"712","severity":1,"message":"779","line":146,"column":9,"nodeType":"714","messageId":"715","endLine":146,"endColumn":21},{"ruleId":"712","severity":1,"message":"745","line":147,"column":17,"nodeType":"714","messageId":"715","endLine":147,"endColumn":25},{"ruleId":"712","severity":1,"message":"780","line":150,"column":18,"nodeType":"714","messageId":"715","endLine":150,"endColumn":27},{"ruleId":"712","severity":1,"message":"781","line":157,"column":18,"nodeType":"714","messageId":"715","endLine":157,"endColumn":27},{"ruleId":"712","severity":1,"message":"782","line":161,"column":10,"nodeType":"714","messageId":"715","endLine":161,"endColumn":17},{"ruleId":"712","severity":1,"message":"783","line":161,"column":19,"nodeType":"714","messageId":"715","endLine":161,"endColumn":29},{"ruleId":"769","severity":1,"message":"770","line":195,"column":23,"nodeType":"771","messageId":"772","endLine":195,"endColumn":25},{"ruleId":"769","severity":1,"message":"784","line":213,"column":13,"nodeType":"771","messageId":"772","endLine":213,"endColumn":15},{"ruleId":"785","severity":1,"message":"786","line":214,"column":31,"nodeType":"787","messageId":"788","endLine":214,"endColumn":35},{"ruleId":"712","severity":1,"message":"789","line":224,"column":11,"nodeType":"714","messageId":"715","endLine":224,"endColumn":20},{"ruleId":"769","severity":1,"message":"770","line":253,"column":27,"nodeType":"771","messageId":"772","endLine":253,"endColumn":29},{"ruleId":"769","severity":1,"message":"770","line":256,"column":60,"nodeType":"771","messageId":"772","endLine":256,"endColumn":62},{"ruleId":"769","severity":1,"message":"770","line":259,"column":27,"nodeType":"771","messageId":"772","endLine":259,"endColumn":29},{"ruleId":"769","severity":1,"message":"770","line":262,"column":60,"nodeType":"771","messageId":"772","endLine":262,"endColumn":62},{"ruleId":"712","severity":1,"message":"790","line":268,"column":13,"nodeType":"714","messageId":"715","endLine":268,"endColumn":19},{"ruleId":"755","severity":1,"message":"791","line":312,"column":6,"nodeType":"757","endLine":312,"endColumn":8,"suggestions":"792"},{"ruleId":"712","severity":1,"message":"793","line":370,"column":11,"nodeType":"714","messageId":"715","endLine":370,"endColumn":23},{"ruleId":"769","severity":1,"message":"770","line":496,"column":52,"nodeType":"771","messageId":"772","endLine":496,"endColumn":54},{"ruleId":"712","severity":1,"message":"794","line":526,"column":17,"nodeType":"714","messageId":"715","endLine":526,"endColumn":25},{"ruleId":"712","severity":1,"message":"794","line":532,"column":17,"nodeType":"714","messageId":"715","endLine":532,"endColumn":25},{"ruleId":"769","severity":1,"message":"770","line":698,"column":24,"nodeType":"771","messageId":"772","endLine":698,"endColumn":26},{"ruleId":"769","severity":1,"message":"770","line":700,"column":31,"nodeType":"771","messageId":"772","endLine":700,"endColumn":33},{"ruleId":"755","severity":1,"message":"795","line":730,"column":6,"nodeType":"757","endLine":738,"endColumn":4,"suggestions":"796"},{"ruleId":"712","severity":1,"message":"797","line":740,"column":7,"nodeType":"714","messageId":"715","endLine":740,"endColumn":17},{"ruleId":"769","severity":1,"message":"784","line":899,"column":48,"nodeType":"771","messageId":"772","endLine":899,"endColumn":50},{"ruleId":"769","severity":1,"message":"770","line":996,"column":55,"nodeType":"771","messageId":"772","endLine":996,"endColumn":57},{"ruleId":"712","severity":1,"message":"798","line":4,"column":8,"nodeType":"714","messageId":"715","endLine":4,"endColumn":17},{"ruleId":"712","severity":1,"message":"799","line":8,"column":10,"nodeType":"714","messageId":"715","endLine":8,"endColumn":25},{"ruleId":"712","severity":1,"message":"800","line":21,"column":8,"nodeType":"714","messageId":"715","endLine":21,"endColumn":16},{"ruleId":"712","severity":1,"message":"801","line":22,"column":8,"nodeType":"714","messageId":"715","endLine":22,"endColumn":15},{"ruleId":"712","severity":1,"message":"802","line":23,"column":8,"nodeType":"714","messageId":"715","endLine":23,"endColumn":18},{"ruleId":"712","severity":1,"message":"774","line":36,"column":10,"nodeType":"714","messageId":"715","endLine":36,"endColumn":20},{"ruleId":"712","severity":1,"message":"803","line":142,"column":10,"nodeType":"714","messageId":"715","endLine":142,"endColumn":18},{"ruleId":"712","severity":1,"message":"775","line":143,"column":19,"nodeType":"714","messageId":"715","endLine":143,"endColumn":31},{"ruleId":"712","severity":1,"message":"776","line":144,"column":9,"nodeType":"714","messageId":"715","endLine":144,"endColumn":21},{"ruleId":"712","severity":1,"message":"777","line":145,"column":9,"nodeType":"714","messageId":"715","endLine":145,"endColumn":28},{"ruleId":"712","severity":1,"message":"778","line":146,"column":9,"nodeType":"714","messageId":"715","endLine":146,"endColumn":32},{"ruleId":"712","severity":1,"message":"779","line":147,"column":9,"nodeType":"714","messageId":"715","endLine":147,"endColumn":21},{"ruleId":"712","severity":1,"message":"745","line":148,"column":17,"nodeType":"714","messageId":"715","endLine":148,"endColumn":25},{"ruleId":"712","severity":1,"message":"780","line":151,"column":18,"nodeType":"714","messageId":"715","endLine":151,"endColumn":27},{"ruleId":"712","severity":1,"message":"781","line":158,"column":18,"nodeType":"714","messageId":"715","endLine":158,"endColumn":27},{"ruleId":"712","severity":1,"message":"782","line":162,"column":10,"nodeType":"714","messageId":"715","endLine":162,"endColumn":17},{"ruleId":"712","severity":1,"message":"783","line":162,"column":19,"nodeType":"714","messageId":"715","endLine":162,"endColumn":29},{"ruleId":"769","severity":1,"message":"770","line":197,"column":23,"nodeType":"771","messageId":"772","endLine":197,"endColumn":25},{"ruleId":"769","severity":1,"message":"784","line":215,"column":13,"nodeType":"771","messageId":"772","endLine":215,"endColumn":15},{"ruleId":"785","severity":1,"message":"786","line":216,"column":31,"nodeType":"787","messageId":"788","endLine":216,"endColumn":35},{"ruleId":"712","severity":1,"message":"789","line":226,"column":11,"nodeType":"714","messageId":"715","endLine":226,"endColumn":20},{"ruleId":"769","severity":1,"message":"770","line":259,"column":27,"nodeType":"771","messageId":"772","endLine":259,"endColumn":29},{"ruleId":"769","severity":1,"message":"770","line":262,"column":60,"nodeType":"771","messageId":"772","endLine":262,"endColumn":62},{"ruleId":"769","severity":1,"message":"770","line":265,"column":27,"nodeType":"771","messageId":"772","endLine":265,"endColumn":29},{"ruleId":"769","severity":1,"message":"770","line":268,"column":60,"nodeType":"771","messageId":"772","endLine":268,"endColumn":62},{"ruleId":"712","severity":1,"message":"790","line":274,"column":13,"nodeType":"714","messageId":"715","endLine":274,"endColumn":19},{"ruleId":"755","severity":1,"message":"791","line":318,"column":6,"nodeType":"757","endLine":318,"endColumn":8,"suggestions":"804"},{"ruleId":"712","severity":1,"message":"805","line":319,"column":9,"nodeType":"714","messageId":"715","endLine":319,"endColumn":26},{"ruleId":"712","severity":1,"message":"806","line":370,"column":9,"nodeType":"714","messageId":"715","endLine":370,"endColumn":31},{"ruleId":"712","severity":1,"message":"793","line":376,"column":11,"nodeType":"714","messageId":"715","endLine":376,"endColumn":23},{"ruleId":"712","severity":1,"message":"807","line":430,"column":9,"nodeType":"714","messageId":"715","endLine":430,"endColumn":37},{"ruleId":"769","severity":1,"message":"770","line":496,"column":52,"nodeType":"771","messageId":"772","endLine":496,"endColumn":54},{"ruleId":"712","severity":1,"message":"794","line":520,"column":17,"nodeType":"714","messageId":"715","endLine":520,"endColumn":25},{"ruleId":"712","severity":1,"message":"794","line":526,"column":17,"nodeType":"714","messageId":"715","endLine":526,"endColumn":25},{"ruleId":"712","severity":1,"message":"808","line":543,"column":9,"nodeType":"714","messageId":"715","endLine":543,"endColumn":27},{"ruleId":"712","severity":1,"message":"809","line":565,"column":9,"nodeType":"714","messageId":"715","endLine":565,"endColumn":29},{"ruleId":"769","severity":1,"message":"770","line":690,"column":24,"nodeType":"771","messageId":"772","endLine":690,"endColumn":26},{"ruleId":"769","severity":1,"message":"770","line":692,"column":31,"nodeType":"771","messageId":"772","endLine":692,"endColumn":33},{"ruleId":"755","severity":1,"message":"810","line":721,"column":6,"nodeType":"757","endLine":729,"endColumn":4,"suggestions":"811"},{"ruleId":"712","severity":1,"message":"797","line":731,"column":7,"nodeType":"714","messageId":"715","endLine":731,"endColumn":17},{"ruleId":"712","severity":1,"message":"812","line":741,"column":5,"nodeType":"714","messageId":"715","endLine":741,"endColumn":12},{"ruleId":"712","severity":1,"message":"813","line":748,"column":5,"nodeType":"714","messageId":"715","endLine":748,"endColumn":22},{"ruleId":"712","severity":1,"message":"814","line":761,"column":5,"nodeType":"714","messageId":"715","endLine":761,"endColumn":18},{"ruleId":"712","severity":1,"message":"815","line":768,"column":5,"nodeType":"714","messageId":"715","endLine":768,"endColumn":19},{"ruleId":"751","severity":1,"message":"752","line":814,"column":59,"nodeType":"753","messageId":"754","endLine":814,"endColumn":61},{"ruleId":"712","severity":1,"message":"816","line":824,"column":9,"nodeType":"714","messageId":"715","endLine":824,"endColumn":21},{"ruleId":"769","severity":1,"message":"784","line":909,"column":48,"nodeType":"771","messageId":"772","endLine":909,"endColumn":50},{"ruleId":"769","severity":1,"message":"770","line":1005,"column":55,"nodeType":"771","messageId":"772","endLine":1005,"endColumn":57},{"ruleId":"817","severity":1,"message":"818","line":1728,"column":78,"nodeType":"787","messageId":"819","endLine":1730,"endColumn":35},{"ruleId":"712","severity":1,"message":"713","line":1,"column":17,"nodeType":"714","messageId":"715","endLine":1,"endColumn":28},{"ruleId":"712","severity":1,"message":"820","line":5,"column":10,"nodeType":"714","messageId":"715","endLine":5,"endColumn":17},{"ruleId":"712","severity":1,"message":"821","line":7,"column":3,"nodeType":"714","messageId":"715","endLine":7,"endColumn":9},{"ruleId":"712","severity":1,"message":"733","line":10,"column":3,"nodeType":"714","messageId":"715","endLine":10,"endColumn":14},{"ruleId":"712","severity":1,"message":"822","line":11,"column":3,"nodeType":"714","messageId":"715","endLine":11,"endColumn":7},{"ruleId":"712","severity":1,"message":"823","line":12,"column":3,"nodeType":"714","messageId":"715","endLine":12,"endColumn":11},{"ruleId":"712","severity":1,"message":"824","line":13,"column":3,"nodeType":"714","messageId":"715","endLine":13,"endColumn":8},{"ruleId":"712","severity":1,"message":"825","line":14,"column":3,"nodeType":"714","messageId":"715","endLine":14,"endColumn":12},{"ruleId":"712","severity":1,"message":"826","line":21,"column":8,"nodeType":"714","messageId":"715","endLine":21,"endColumn":23},{"ruleId":"712","severity":1,"message":"827","line":22,"column":8,"nodeType":"714","messageId":"715","endLine":22,"endColumn":26},{"ruleId":"712","severity":1,"message":"828","line":25,"column":8,"nodeType":"714","messageId":"715","endLine":25,"endColumn":21},{"ruleId":"712","severity":1,"message":"829","line":26,"column":8,"nodeType":"714","messageId":"715","endLine":26,"endColumn":18},{"ruleId":"712","severity":1,"message":"830","line":27,"column":8,"nodeType":"714","messageId":"715","endLine":27,"endColumn":26},{"ruleId":"712","severity":1,"message":"831","line":29,"column":8,"nodeType":"714","messageId":"715","endLine":29,"endColumn":14},{"ruleId":"712","severity":1,"message":"832","line":30,"column":8,"nodeType":"714","messageId":"715","endLine":30,"endColumn":12},{"ruleId":"712","severity":1,"message":"742","line":112,"column":9,"nodeType":"714","messageId":"715","endLine":112,"endColumn":19},{"ruleId":"712","severity":1,"message":"833","line":114,"column":10,"nodeType":"714","messageId":"715","endLine":114,"endColumn":17},{"ruleId":"712","severity":1,"message":"743","line":114,"column":19,"nodeType":"714","messageId":"715","endLine":114,"endColumn":29},{"ruleId":"712","severity":1,"message":"834","line":125,"column":10,"nodeType":"714","messageId":"715","endLine":125,"endColumn":32},{"ruleId":"712","severity":1,"message":"835","line":128,"column":10,"nodeType":"714","messageId":"715","endLine":128,"endColumn":35},{"ruleId":"712","severity":1,"message":"836","line":130,"column":10,"nodeType":"714","messageId":"715","endLine":130,"endColumn":23},{"ruleId":"712","severity":1,"message":"837","line":130,"column":25,"nodeType":"714","messageId":"715","endLine":130,"endColumn":41},{"ruleId":"712","severity":1,"message":"838","line":131,"column":10,"nodeType":"714","messageId":"715","endLine":131,"endColumn":23},{"ruleId":"712","severity":1,"message":"839","line":131,"column":25,"nodeType":"714","messageId":"715","endLine":131,"endColumn":41},{"ruleId":"712","severity":1,"message":"840","line":11,"column":8,"nodeType":"714","messageId":"715","endLine":11,"endColumn":25},{"ruleId":"712","severity":1,"message":"841","line":66,"column":20,"nodeType":"714","messageId":"715","endLine":66,"endColumn":31},{"ruleId":"712","severity":1,"message":"833","line":68,"column":10,"nodeType":"714","messageId":"715","endLine":68,"endColumn":17},{"ruleId":"712","severity":1,"message":"743","line":68,"column":19,"nodeType":"714","messageId":"715","endLine":68,"endColumn":29},{"ruleId":"712","severity":1,"message":"842","line":70,"column":10,"nodeType":"714","messageId":"715","endLine":70,"endColumn":17},{"ruleId":"712","severity":1,"message":"843","line":72,"column":9,"nodeType":"714","messageId":"715","endLine":72,"endColumn":15},{"ruleId":"769","severity":1,"message":"770","line":73,"column":51,"nodeType":"771","messageId":"772","endLine":73,"endColumn":53},{"ruleId":"712","severity":1,"message":"844","line":91,"column":9,"nodeType":"714","messageId":"715","endLine":91,"endColumn":25},{"ruleId":"712","severity":1,"message":"820","line":3,"column":9,"nodeType":"714","messageId":"715","endLine":3,"endColumn":16},{"ruleId":"712","severity":1,"message":"821","line":4,"column":9,"nodeType":"714","messageId":"715","endLine":4,"endColumn":15},{"ruleId":"712","severity":1,"message":"733","line":4,"column":36,"nodeType":"714","messageId":"715","endLine":4,"endColumn":47},{"ruleId":"712","severity":1,"message":"822","line":4,"column":49,"nodeType":"714","messageId":"715","endLine":4,"endColumn":53},{"ruleId":"712","severity":1,"message":"823","line":4,"column":55,"nodeType":"714","messageId":"715","endLine":4,"endColumn":63},{"ruleId":"712","severity":1,"message":"824","line":4,"column":65,"nodeType":"714","messageId":"715","endLine":4,"endColumn":70},{"ruleId":"712","severity":1,"message":"825","line":4,"column":72,"nodeType":"714","messageId":"715","endLine":4,"endColumn":81},{"ruleId":"712","severity":1,"message":"845","line":8,"column":8,"nodeType":"714","messageId":"715","endLine":8,"endColumn":19},{"ruleId":"712","severity":1,"message":"826","line":9,"column":8,"nodeType":"714","messageId":"715","endLine":9,"endColumn":23},{"ruleId":"712","severity":1,"message":"742","line":98,"column":11,"nodeType":"714","messageId":"715","endLine":98,"endColumn":21},{"ruleId":"712","severity":1,"message":"743","line":99,"column":21,"nodeType":"714","messageId":"715","endLine":99,"endColumn":31},{"ruleId":"712","severity":1,"message":"834","line":105,"column":12,"nodeType":"714","messageId":"715","endLine":105,"endColumn":34},{"ruleId":"712","severity":1,"message":"838","line":109,"column":12,"nodeType":"714","messageId":"715","endLine":109,"endColumn":25},{"ruleId":"762","severity":1,"message":"763","line":169,"column":70,"nodeType":"764","messageId":"765","endLine":169,"endColumn":72},{"ruleId":"762","severity":1,"message":"763","line":169,"column":99,"nodeType":"764","messageId":"765","endLine":169,"endColumn":101},{"ruleId":"762","severity":1,"message":"766","line":169,"column":99,"nodeType":"764","messageId":"765","endLine":169,"endColumn":101},{"ruleId":"762","severity":1,"message":"766","line":169,"column":142,"nodeType":"764","messageId":"765","endLine":169,"endColumn":144},{"ruleId":"751","severity":1,"message":"752","line":201,"column":39,"nodeType":"753","messageId":"754","endLine":201,"endColumn":41},{"ruleId":"755","severity":1,"message":"756","line":215,"column":8,"nodeType":"757","endLine":215,"endColumn":10,"suggestions":"846"},{"ruleId":"755","severity":1,"message":"847","line":220,"column":8,"nodeType":"757","endLine":220,"endColumn":10,"suggestions":"848"},{"ruleId":"712","severity":1,"message":"849","line":4,"column":20,"nodeType":"714","messageId":"715","endLine":4,"endColumn":36},{"ruleId":"712","severity":1,"message":"850","line":6,"column":8,"nodeType":"714","messageId":"715","endLine":6,"endColumn":15},{"ruleId":"712","severity":1,"message":"821","line":7,"column":9,"nodeType":"714","messageId":"715","endLine":7,"endColumn":15},{"ruleId":"712","severity":1,"message":"851","line":9,"column":19,"nodeType":"714","messageId":"715","endLine":9,"endColumn":24},{"ruleId":"712","severity":1,"message":"852","line":10,"column":8,"nodeType":"714","messageId":"715","endLine":10,"endColumn":24},{"ruleId":"712","severity":1,"message":"853","line":57,"column":11,"nodeType":"714","messageId":"715","endLine":57,"endColumn":22},{"ruleId":"712","severity":1,"message":"854","line":60,"column":12,"nodeType":"714","messageId":"715","endLine":60,"endColumn":19},{"ruleId":"769","severity":1,"message":"770","line":95,"column":75,"nodeType":"771","messageId":"772","endLine":95,"endColumn":77},{"ruleId":"712","severity":1,"message":"789","line":101,"column":15,"nodeType":"714","messageId":"715","endLine":101,"endColumn":24},{"ruleId":"769","severity":1,"message":"770","line":115,"column":77,"nodeType":"771","messageId":"772","endLine":115,"endColumn":79},{"ruleId":"712","severity":1,"message":"855","line":126,"column":13,"nodeType":"714","messageId":"715","endLine":126,"endColumn":25},{"ruleId":"712","severity":1,"message":"856","line":1,"column":38,"nodeType":"714","messageId":"715","endLine":1,"endColumn":44},{"ruleId":"712","severity":1,"message":"851","line":3,"column":3,"nodeType":"714","messageId":"715","endLine":3,"endColumn":8},{"ruleId":"712","severity":1,"message":"857","line":4,"column":3,"nodeType":"714","messageId":"715","endLine":4,"endColumn":14},{"ruleId":"712","severity":1,"message":"858","line":5,"column":3,"nodeType":"714","messageId":"715","endLine":5,"endColumn":12},{"ruleId":"712","severity":1,"message":"859","line":6,"column":3,"nodeType":"714","messageId":"715","endLine":6,"endColumn":7},{"ruleId":"712","severity":1,"message":"860","line":9,"column":3,"nodeType":"714","messageId":"715","endLine":9,"endColumn":7},{"ruleId":"712","severity":1,"message":"861","line":10,"column":3,"nodeType":"714","messageId":"715","endLine":10,"endColumn":11},{"ruleId":"712","severity":1,"message":"862","line":13,"column":3,"nodeType":"714","messageId":"715","endLine":13,"endColumn":13},{"ruleId":"712","severity":1,"message":"863","line":19,"column":8,"nodeType":"714","messageId":"715","endLine":19,"endColumn":14},{"ruleId":"712","severity":1,"message":"864","line":25,"column":10,"nodeType":"714","messageId":"715","endLine":25,"endColumn":17},{"ruleId":"712","severity":1,"message":"865","line":27,"column":8,"nodeType":"714","messageId":"715","endLine":27,"endColumn":19},{"ruleId":"712","severity":1,"message":"866","line":32,"column":17,"nodeType":"714","messageId":"715","endLine":32,"endColumn":20},{"ruleId":"712","severity":1,"message":"867","line":33,"column":10,"nodeType":"714","messageId":"715","endLine":33,"endColumn":16},{"ruleId":"712","severity":1,"message":"868","line":33,"column":18,"nodeType":"714","messageId":"715","endLine":33,"endColumn":24},{"ruleId":"712","severity":1,"message":"869","line":33,"column":26,"nodeType":"714","messageId":"715","endLine":33,"endColumn":31},{"ruleId":"712","severity":1,"message":"725","line":33,"column":33,"nodeType":"714","messageId":"715","endLine":33,"endColumn":40},{"ruleId":"712","severity":1,"message":"728","line":35,"column":8,"nodeType":"714","messageId":"715","endLine":35,"endColumn":11},{"ruleId":"712","severity":1,"message":"870","line":36,"column":8,"nodeType":"714","messageId":"715","endLine":36,"endColumn":24},{"ruleId":"712","severity":1,"message":"821","line":37,"column":8,"nodeType":"714","messageId":"715","endLine":37,"endColumn":14},{"ruleId":"712","severity":1,"message":"871","line":38,"column":8,"nodeType":"714","messageId":"715","endLine":38,"endColumn":11},{"ruleId":"712","severity":1,"message":"872","line":39,"column":8,"nodeType":"714","messageId":"715","endLine":39,"endColumn":17},{"ruleId":"712","severity":1,"message":"734","line":42,"column":8,"nodeType":"714","messageId":"715","endLine":42,"endColumn":18},{"ruleId":"712","severity":1,"message":"873","line":51,"column":8,"nodeType":"714","messageId":"715","endLine":51,"endColumn":19},{"ruleId":"712","severity":1,"message":"874","line":147,"column":10,"nodeType":"714","messageId":"715","endLine":147,"endColumn":21},{"ruleId":"712","severity":1,"message":"875","line":148,"column":10,"nodeType":"714","messageId":"715","endLine":148,"endColumn":18},{"ruleId":"712","severity":1,"message":"876","line":154,"column":10,"nodeType":"714","messageId":"715","endLine":154,"endColumn":25},{"ruleId":"712","severity":1,"message":"789","line":160,"column":11,"nodeType":"714","messageId":"715","endLine":160,"endColumn":20},{"ruleId":"712","severity":1,"message":"877","line":173,"column":9,"nodeType":"714","messageId":"715","endLine":173,"endColumn":17},{"ruleId":"755","severity":1,"message":"878","line":248,"column":6,"nodeType":"757","endLine":248,"endColumn":8,"suggestions":"879"},{"ruleId":"712","severity":1,"message":"880","line":277,"column":9,"nodeType":"714","messageId":"715","endLine":277,"endColumn":25},{"ruleId":"712","severity":1,"message":"881","line":289,"column":9,"nodeType":"714","messageId":"715","endLine":289,"endColumn":20},{"ruleId":"712","severity":1,"message":"882","line":6,"column":10,"nodeType":"714","messageId":"715","endLine":6,"endColumn":15},{"ruleId":"712","severity":1,"message":"883","line":7,"column":8,"nodeType":"714","messageId":"715","endLine":7,"endColumn":25},{"ruleId":"712","severity":1,"message":"884","line":30,"column":8,"nodeType":"714","messageId":"715","endLine":30,"endColumn":17},{"ruleId":"712","severity":1,"message":"730","line":31,"column":8,"nodeType":"714","messageId":"715","endLine":31,"endColumn":24},{"ruleId":"712","severity":1,"message":"731","line":32,"column":8,"nodeType":"714","messageId":"715","endLine":32,"endColumn":16},{"ruleId":"712","severity":1,"message":"885","line":33,"column":8,"nodeType":"714","messageId":"715","endLine":33,"endColumn":23},{"ruleId":"712","severity":1,"message":"743","line":70,"column":19,"nodeType":"714","messageId":"715","endLine":70,"endColumn":29},{"ruleId":"712","severity":1,"message":"886","line":71,"column":10,"nodeType":"714","messageId":"715","endLine":71,"endColumn":20},{"ruleId":"712","severity":1,"message":"887","line":71,"column":22,"nodeType":"714","messageId":"715","endLine":71,"endColumn":35},{"ruleId":"712","severity":1,"message":"888","line":73,"column":10,"nodeType":"714","messageId":"715","endLine":73,"endColumn":21},{"ruleId":"755","severity":1,"message":"889","line":89,"column":6,"nodeType":"757","endLine":89,"endColumn":8,"suggestions":"890"},{"ruleId":"712","severity":1,"message":"891","line":4,"column":8,"nodeType":"714","messageId":"715","endLine":4,"endColumn":25},{"ruleId":"712","severity":1,"message":"892","line":11,"column":8,"nodeType":"714","messageId":"715","endLine":11,"endColumn":22},{"ruleId":"712","severity":1,"message":"893","line":12,"column":8,"nodeType":"714","messageId":"715","endLine":12,"endColumn":20},{"ruleId":"712","severity":1,"message":"894","line":13,"column":8,"nodeType":"714","messageId":"715","endLine":13,"endColumn":20},{"ruleId":"712","severity":1,"message":"895","line":14,"column":8,"nodeType":"714","messageId":"715","endLine":14,"endColumn":18},{"ruleId":"712","severity":1,"message":"882","line":16,"column":9,"nodeType":"714","messageId":"715","endLine":16,"endColumn":14},{"ruleId":"712","severity":1,"message":"896","line":30,"column":27,"nodeType":"714","messageId":"715","endLine":30,"endColumn":43},{"ruleId":"712","severity":1,"message":"897","line":36,"column":11,"nodeType":"714","messageId":"715","endLine":36,"endColumn":30},{"ruleId":"712","severity":1,"message":"821","line":2,"column":10,"nodeType":"714","messageId":"715","endLine":2,"endColumn":16},{"ruleId":"712","severity":1,"message":"898","line":3,"column":10,"nodeType":"714","messageId":"715","endLine":3,"endColumn":18},{"ruleId":"712","severity":1,"message":"899","line":6,"column":16,"nodeType":"714","messageId":"715","endLine":6,"endColumn":26},{"ruleId":"712","severity":1,"message":"900","line":3,"column":8,"nodeType":"714","messageId":"715","endLine":3,"endColumn":19},{"ruleId":"712","severity":1,"message":"901","line":9,"column":9,"nodeType":"714","messageId":"715","endLine":9,"endColumn":13},{"ruleId":"712","severity":1,"message":"821","line":10,"column":8,"nodeType":"714","messageId":"715","endLine":10,"endColumn":14},{"ruleId":"712","severity":1,"message":"774","line":11,"column":9,"nodeType":"714","messageId":"715","endLine":11,"endColumn":19},{"ruleId":"712","severity":1,"message":"742","line":102,"column":11,"nodeType":"714","messageId":"715","endLine":102,"endColumn":21},{"ruleId":"712","severity":1,"message":"833","line":103,"column":12,"nodeType":"714","messageId":"715","endLine":103,"endColumn":19},{"ruleId":"712","severity":1,"message":"743","line":103,"column":21,"nodeType":"714","messageId":"715","endLine":103,"endColumn":31},{"ruleId":"712","severity":1,"message":"744","line":108,"column":12,"nodeType":"714","messageId":"715","endLine":108,"endColumn":17},{"ruleId":"712","severity":1,"message":"745","line":108,"column":19,"nodeType":"714","messageId":"715","endLine":108,"endColumn":27},{"ruleId":"712","severity":1,"message":"746","line":112,"column":13,"nodeType":"714","messageId":"715","endLine":112,"endColumn":25},{"ruleId":"712","severity":1,"message":"747","line":112,"column":27,"nodeType":"714","messageId":"715","endLine":112,"endColumn":34},{"ruleId":"712","severity":1,"message":"834","line":120,"column":12,"nodeType":"714","messageId":"715","endLine":120,"endColumn":34},{"ruleId":"712","severity":1,"message":"902","line":120,"column":36,"nodeType":"714","messageId":"715","endLine":120,"endColumn":61},{"ruleId":"712","severity":1,"message":"835","line":121,"column":12,"nodeType":"714","messageId":"715","endLine":121,"endColumn":37},{"ruleId":"712","severity":1,"message":"903","line":121,"column":38,"nodeType":"714","messageId":"715","endLine":121,"endColumn":66},{"ruleId":"712","severity":1,"message":"748","line":123,"column":12,"nodeType":"714","messageId":"715","endLine":123,"endColumn":23},{"ruleId":"712","severity":1,"message":"749","line":123,"column":25,"nodeType":"714","messageId":"715","endLine":123,"endColumn":39},{"ruleId":"712","severity":1,"message":"750","line":127,"column":24,"nodeType":"714","messageId":"715","endLine":127,"endColumn":37},{"ruleId":"751","severity":1,"message":"752","line":160,"column":39,"nodeType":"753","messageId":"754","endLine":160,"endColumn":41},{"ruleId":"755","severity":1,"message":"756","line":174,"column":8,"nodeType":"757","endLine":174,"endColumn":10,"suggestions":"904"},{"ruleId":"712","severity":1,"message":"759","line":177,"column":9,"nodeType":"714","messageId":"715","endLine":177,"endColumn":23},{"ruleId":"712","severity":1,"message":"760","line":182,"column":11,"nodeType":"714","messageId":"715","endLine":182,"endColumn":23},{"ruleId":"712","severity":1,"message":"767","line":201,"column":11,"nodeType":"714","messageId":"715","endLine":201,"endColumn":19},{"ruleId":"712","severity":1,"message":"768","line":204,"column":11,"nodeType":"714","messageId":"715","endLine":204,"endColumn":19},{"ruleId":"769","severity":1,"message":"770","line":209,"column":69,"nodeType":"771","messageId":"772","endLine":209,"endColumn":71},{"ruleId":"712","severity":1,"message":"773","line":241,"column":11,"nodeType":"714","messageId":"715","endLine":241,"endColumn":18},{"ruleId":"751","severity":1,"message":"752","line":255,"column":92,"nodeType":"753","messageId":"754","endLine":255,"endColumn":94},{"ruleId":"712","severity":1,"message":"713","line":1,"column":28,"nodeType":"714","messageId":"715","endLine":1,"endColumn":39},{"ruleId":"712","severity":1,"message":"716","line":1,"column":41,"nodeType":"714","messageId":"715","endLine":1,"endColumn":50},{"ruleId":"712","severity":1,"message":"905","line":8,"column":38,"nodeType":"714","messageId":"715","endLine":8,"endColumn":46},{"ruleId":"712","severity":1,"message":"841","line":103,"column":22,"nodeType":"714","messageId":"715","endLine":103,"endColumn":33},{"ruleId":"712","severity":1,"message":"906","line":104,"column":25,"nodeType":"714","messageId":"715","endLine":104,"endColumn":39},{"ruleId":"712","severity":1,"message":"743","line":105,"column":21,"nodeType":"714","messageId":"715","endLine":105,"endColumn":31},{"ruleId":"712","severity":1,"message":"907","line":109,"column":12,"nodeType":"714","messageId":"715","endLine":109,"endColumn":24},{"ruleId":"712","severity":1,"message":"908","line":109,"column":25,"nodeType":"714","messageId":"715","endLine":109,"endColumn":40},{"ruleId":"712","severity":1,"message":"909","line":110,"column":12,"nodeType":"714","messageId":"715","endLine":110,"endColumn":22},{"ruleId":"712","severity":1,"message":"910","line":110,"column":23,"nodeType":"714","messageId":"715","endLine":110,"endColumn":36},{"ruleId":"712","severity":1,"message":"911","line":111,"column":12,"nodeType":"714","messageId":"715","endLine":111,"endColumn":24},{"ruleId":"712","severity":1,"message":"912","line":111,"column":25,"nodeType":"714","messageId":"715","endLine":111,"endColumn":40},{"ruleId":"712","severity":1,"message":"913","line":112,"column":12,"nodeType":"714","messageId":"715","endLine":112,"endColumn":16},{"ruleId":"712","severity":1,"message":"914","line":112,"column":18,"nodeType":"714","messageId":"715","endLine":112,"endColumn":25},{"ruleId":"712","severity":1,"message":"915","line":113,"column":12,"nodeType":"714","messageId":"715","endLine":113,"endColumn":23},{"ruleId":"712","severity":1,"message":"916","line":113,"column":25,"nodeType":"714","messageId":"715","endLine":113,"endColumn":39},{"ruleId":"712","severity":1,"message":"843","line":115,"column":11,"nodeType":"714","messageId":"715","endLine":115,"endColumn":17},{"ruleId":"769","severity":1,"message":"770","line":116,"column":53,"nodeType":"771","messageId":"772","endLine":116,"endColumn":55},{"ruleId":"762","severity":1,"message":"766","line":153,"column":55,"nodeType":"764","messageId":"765","endLine":153,"endColumn":57},{"ruleId":"762","severity":1,"message":"766","line":153,"column":96,"nodeType":"764","messageId":"765","endLine":153,"endColumn":98},{"ruleId":"762","severity":1,"message":"766","line":164,"column":58,"nodeType":"764","messageId":"765","endLine":164,"endColumn":60},{"ruleId":"762","severity":1,"message":"766","line":164,"column":99,"nodeType":"764","messageId":"765","endLine":164,"endColumn":101},{"ruleId":"769","severity":1,"message":"770","line":196,"column":49,"nodeType":"771","messageId":"772","endLine":196,"endColumn":51},{"ruleId":"712","severity":1,"message":"794","line":222,"column":23,"nodeType":"714","messageId":"715","endLine":222,"endColumn":31},{"ruleId":"712","severity":1,"message":"789","line":237,"column":15,"nodeType":"714","messageId":"715","endLine":237,"endColumn":24},{"ruleId":"769","severity":1,"message":"770","line":251,"column":75,"nodeType":"771","messageId":"772","endLine":251,"endColumn":77},{"ruleId":"712","severity":1,"message":"917","line":255,"column":11,"nodeType":"714","messageId":"715","endLine":255,"endColumn":21},{"ruleId":"712","severity":1,"message":"918","line":260,"column":11,"nodeType":"714","messageId":"715","endLine":260,"endColumn":20},{"ruleId":"712","severity":1,"message":"919","line":288,"column":11,"nodeType":"714","messageId":"715","endLine":288,"endColumn":23},{"ruleId":"712","severity":1,"message":"716","line":1,"column":27,"nodeType":"714","messageId":"715","endLine":1,"endColumn":36},{"ruleId":"712","severity":1,"message":"713","line":1,"column":38,"nodeType":"714","messageId":"715","endLine":1,"endColumn":49},{"ruleId":"712","severity":1,"message":"901","line":5,"column":10,"nodeType":"714","messageId":"715","endLine":5,"endColumn":14},{"ruleId":"712","severity":1,"message":"860","line":6,"column":10,"nodeType":"714","messageId":"715","endLine":6,"endColumn":14},{"ruleId":"712","severity":1,"message":"861","line":6,"column":16,"nodeType":"714","messageId":"715","endLine":6,"endColumn":24},{"ruleId":"712","severity":1,"message":"774","line":11,"column":17,"nodeType":"714","messageId":"715","endLine":11,"endColumn":27},{"ruleId":"712","severity":1,"message":"920","line":13,"column":3,"nodeType":"714","messageId":"715","endLine":13,"endColumn":14},{"ruleId":"712","severity":1,"message":"921","line":18,"column":10,"nodeType":"714","messageId":"715","endLine":18,"endColumn":14},{"ruleId":"712","severity":1,"message":"922","line":18,"column":16,"nodeType":"714","messageId":"715","endLine":18,"endColumn":24},{"ruleId":"712","severity":1,"message":"923","line":18,"column":26,"nodeType":"714","messageId":"715","endLine":18,"endColumn":36},{"ruleId":"712","severity":1,"message":"823","line":18,"column":38,"nodeType":"714","messageId":"715","endLine":18,"endColumn":46},{"ruleId":"712","severity":1,"message":"924","line":21,"column":10,"nodeType":"714","messageId":"715","endLine":21,"endColumn":15},{"ruleId":"712","severity":1,"message":"885","line":46,"column":8,"nodeType":"714","messageId":"715","endLine":46,"endColumn":23},{"ruleId":"712","severity":1,"message":"925","line":123,"column":10,"nodeType":"714","messageId":"715","endLine":123,"endColumn":18},{"ruleId":"712","severity":1,"message":"841","line":123,"column":20,"nodeType":"714","messageId":"715","endLine":123,"endColumn":31},{"ruleId":"712","severity":1,"message":"906","line":124,"column":23,"nodeType":"714","messageId":"715","endLine":124,"endColumn":37},{"ruleId":"712","severity":1,"message":"743","line":125,"column":19,"nodeType":"714","messageId":"715","endLine":125,"endColumn":29},{"ruleId":"712","severity":1,"message":"926","line":127,"column":19,"nodeType":"714","messageId":"715","endLine":127,"endColumn":29},{"ruleId":"712","severity":1,"message":"907","line":129,"column":10,"nodeType":"714","messageId":"715","endLine":129,"endColumn":22},{"ruleId":"712","severity":1,"message":"908","line":129,"column":24,"nodeType":"714","messageId":"715","endLine":129,"endColumn":39},{"ruleId":"712","severity":1,"message":"909","line":130,"column":10,"nodeType":"714","messageId":"715","endLine":130,"endColumn":20},{"ruleId":"712","severity":1,"message":"910","line":130,"column":22,"nodeType":"714","messageId":"715","endLine":130,"endColumn":35},{"ruleId":"712","severity":1,"message":"911","line":131,"column":10,"nodeType":"714","messageId":"715","endLine":131,"endColumn":22},{"ruleId":"712","severity":1,"message":"912","line":131,"column":24,"nodeType":"714","messageId":"715","endLine":131,"endColumn":39},{"ruleId":"712","severity":1,"message":"913","line":132,"column":10,"nodeType":"714","messageId":"715","endLine":132,"endColumn":14},{"ruleId":"712","severity":1,"message":"914","line":132,"column":16,"nodeType":"714","messageId":"715","endLine":132,"endColumn":23},{"ruleId":"712","severity":1,"message":"915","line":133,"column":10,"nodeType":"714","messageId":"715","endLine":133,"endColumn":21},{"ruleId":"712","severity":1,"message":"916","line":133,"column":23,"nodeType":"714","messageId":"715","endLine":133,"endColumn":37},{"ruleId":"712","severity":1,"message":"767","line":272,"column":9,"nodeType":"714","messageId":"715","endLine":272,"endColumn":17},{"ruleId":"712","severity":1,"message":"794","line":275,"column":15,"nodeType":"714","messageId":"715","endLine":275,"endColumn":23},{"ruleId":"712","severity":1,"message":"789","line":289,"column":11,"nodeType":"714","messageId":"715","endLine":289,"endColumn":20},{"ruleId":"769","severity":1,"message":"770","line":308,"column":25,"nodeType":"771","messageId":"772","endLine":308,"endColumn":27},{"ruleId":"712","severity":1,"message":"917","line":313,"column":9,"nodeType":"714","messageId":"715","endLine":313,"endColumn":19},{"ruleId":"712","severity":1,"message":"918","line":321,"column":9,"nodeType":"714","messageId":"715","endLine":321,"endColumn":18},{"ruleId":"712","severity":1,"message":"919","line":354,"column":9,"nodeType":"714","messageId":"715","endLine":354,"endColumn":21},{"ruleId":"712","severity":1,"message":"856","line":1,"column":38,"nodeType":"714","messageId":"715","endLine":1,"endColumn":44},{"ruleId":"712","severity":1,"message":"862","line":13,"column":3,"nodeType":"714","messageId":"715","endLine":13,"endColumn":13},{"ruleId":"712","severity":1,"message":"863","line":18,"column":8,"nodeType":"714","messageId":"715","endLine":18,"endColumn":14},{"ruleId":"712","severity":1,"message":"864","line":24,"column":10,"nodeType":"714","messageId":"715","endLine":24,"endColumn":17},{"ruleId":"712","severity":1,"message":"726","line":24,"column":19,"nodeType":"714","messageId":"715","endLine":24,"endColumn":23},{"ruleId":"712","severity":1,"message":"865","line":26,"column":8,"nodeType":"714","messageId":"715","endLine":26,"endColumn":19},{"ruleId":"712","severity":1,"message":"867","line":31,"column":10,"nodeType":"714","messageId":"715","endLine":31,"endColumn":16},{"ruleId":"712","severity":1,"message":"868","line":31,"column":18,"nodeType":"714","messageId":"715","endLine":31,"endColumn":24},{"ruleId":"712","severity":1,"message":"869","line":31,"column":26,"nodeType":"714","messageId":"715","endLine":31,"endColumn":31},{"ruleId":"712","severity":1,"message":"725","line":31,"column":33,"nodeType":"714","messageId":"715","endLine":31,"endColumn":40},{"ruleId":"712","severity":1,"message":"821","line":35,"column":8,"nodeType":"714","messageId":"715","endLine":35,"endColumn":14},{"ruleId":"712","severity":1,"message":"854","line":99,"column":10,"nodeType":"714","messageId":"715","endLine":99,"endColumn":17},{"ruleId":"712","severity":1,"message":"927","line":99,"column":19,"nodeType":"714","messageId":"715","endLine":99,"endColumn":29},{"ruleId":"755","severity":1,"message":"928","line":122,"column":6,"nodeType":"757","endLine":122,"endColumn":8,"suggestions":"929"},{"ruleId":"712","severity":1,"message":"881","line":136,"column":9,"nodeType":"714","messageId":"715","endLine":136,"endColumn":20},{"ruleId":"769","severity":1,"message":"770","line":168,"column":47,"nodeType":"771","messageId":"772","endLine":168,"endColumn":49},{"ruleId":"712","severity":1,"message":"930","line":3,"column":10,"nodeType":"714","messageId":"715","endLine":3,"endColumn":24},{"ruleId":"712","severity":1,"message":"851","line":6,"column":10,"nodeType":"714","messageId":"715","endLine":6,"endColumn":15},{"ruleId":"712","severity":1,"message":"858","line":6,"column":17,"nodeType":"714","messageId":"715","endLine":6,"endColumn":26},{"ruleId":"712","severity":1,"message":"729","line":6,"column":28,"nodeType":"714","messageId":"715","endLine":6,"endColumn":39},{"ruleId":"712","severity":1,"message":"857","line":6,"column":41,"nodeType":"714","messageId":"715","endLine":6,"endColumn":52},{"ruleId":"712","severity":1,"message":"821","line":7,"column":8,"nodeType":"714","messageId":"715","endLine":7,"endColumn":14},{"ruleId":"712","severity":1,"message":"882","line":29,"column":10,"nodeType":"714","messageId":"715","endLine":29,"endColumn":15},{"ruleId":"712","severity":1,"message":"931","line":31,"column":3,"nodeType":"714","messageId":"715","endLine":31,"endColumn":18},{"ruleId":"712","severity":1,"message":"932","line":32,"column":3,"nodeType":"714","messageId":"715","endLine":32,"endColumn":13},{"ruleId":"712","severity":1,"message":"905","line":33,"column":3,"nodeType":"714","messageId":"715","endLine":33,"endColumn":11},{"ruleId":"712","severity":1,"message":"933","line":108,"column":9,"nodeType":"714","messageId":"715","endLine":108,"endColumn":16},{"ruleId":"712","severity":1,"message":"925","line":109,"column":10,"nodeType":"714","messageId":"715","endLine":109,"endColumn":18},{"ruleId":"712","severity":1,"message":"743","line":111,"column":19,"nodeType":"714","messageId":"715","endLine":111,"endColumn":29},{"ruleId":"712","severity":1,"message":"842","line":112,"column":10,"nodeType":"714","messageId":"715","endLine":112,"endColumn":17},{"ruleId":"712","severity":1,"message":"926","line":112,"column":19,"nodeType":"714","messageId":"715","endLine":112,"endColumn":29},{"ruleId":"755","severity":1,"message":"934","line":205,"column":6,"nodeType":"757","endLine":205,"endColumn":8,"suggestions":"935"},{"ruleId":"712","severity":1,"message":"789","line":208,"column":11,"nodeType":"714","messageId":"715","endLine":208,"endColumn":20},{"ruleId":"769","severity":1,"message":"770","line":222,"column":25,"nodeType":"771","messageId":"772","endLine":222,"endColumn":27},{"ruleId":"712","severity":1,"message":"919","line":255,"column":9,"nodeType":"714","messageId":"715","endLine":255,"endColumn":21},{"ruleId":"712","severity":1,"message":"716","line":1,"column":26,"nodeType":"714","messageId":"715","endLine":1,"endColumn":35},{"ruleId":"712","severity":1,"message":"713","line":1,"column":37,"nodeType":"714","messageId":"715","endLine":1,"endColumn":48},{"ruleId":"712","severity":1,"message":"901","line":5,"column":10,"nodeType":"714","messageId":"715","endLine":5,"endColumn":14},{"ruleId":"712","severity":1,"message":"860","line":6,"column":10,"nodeType":"714","messageId":"715","endLine":6,"endColumn":14},{"ruleId":"712","severity":1,"message":"861","line":6,"column":15,"nodeType":"714","messageId":"715","endLine":6,"endColumn":23},{"ruleId":"712","severity":1,"message":"774","line":11,"column":16,"nodeType":"714","messageId":"715","endLine":11,"endColumn":26},{"ruleId":"712","severity":1,"message":"920","line":12,"column":10,"nodeType":"714","messageId":"715","endLine":12,"endColumn":21},{"ruleId":"712","severity":1,"message":"921","line":13,"column":9,"nodeType":"714","messageId":"715","endLine":13,"endColumn":13},{"ruleId":"712","severity":1,"message":"922","line":13,"column":14,"nodeType":"714","messageId":"715","endLine":13,"endColumn":22},{"ruleId":"712","severity":1,"message":"923","line":13,"column":23,"nodeType":"714","messageId":"715","endLine":13,"endColumn":33},{"ruleId":"712","severity":1,"message":"823","line":13,"column":34,"nodeType":"714","messageId":"715","endLine":13,"endColumn":42},{"ruleId":"712","severity":1,"message":"924","line":16,"column":10,"nodeType":"714","messageId":"715","endLine":16,"endColumn":15},{"ruleId":"712","severity":1,"message":"841","line":117,"column":22,"nodeType":"714","messageId":"715","endLine":117,"endColumn":33},{"ruleId":"712","severity":1,"message":"906","line":118,"column":25,"nodeType":"714","messageId":"715","endLine":118,"endColumn":39},{"ruleId":"712","severity":1,"message":"743","line":119,"column":21,"nodeType":"714","messageId":"715","endLine":119,"endColumn":31},{"ruleId":"712","severity":1,"message":"907","line":123,"column":12,"nodeType":"714","messageId":"715","endLine":123,"endColumn":24},{"ruleId":"712","severity":1,"message":"908","line":123,"column":25,"nodeType":"714","messageId":"715","endLine":123,"endColumn":40},{"ruleId":"712","severity":1,"message":"909","line":124,"column":12,"nodeType":"714","messageId":"715","endLine":124,"endColumn":22},{"ruleId":"712","severity":1,"message":"910","line":124,"column":23,"nodeType":"714","messageId":"715","endLine":124,"endColumn":36},{"ruleId":"712","severity":1,"message":"911","line":125,"column":12,"nodeType":"714","messageId":"715","endLine":125,"endColumn":24},{"ruleId":"712","severity":1,"message":"912","line":125,"column":25,"nodeType":"714","messageId":"715","endLine":125,"endColumn":40},{"ruleId":"712","severity":1,"message":"913","line":126,"column":12,"nodeType":"714","messageId":"715","endLine":126,"endColumn":16},{"ruleId":"712","severity":1,"message":"914","line":126,"column":18,"nodeType":"714","messageId":"715","endLine":126,"endColumn":25},{"ruleId":"712","severity":1,"message":"915","line":127,"column":12,"nodeType":"714","messageId":"715","endLine":127,"endColumn":23},{"ruleId":"712","severity":1,"message":"916","line":127,"column":25,"nodeType":"714","messageId":"715","endLine":127,"endColumn":39},{"ruleId":"712","severity":1,"message":"843","line":129,"column":11,"nodeType":"714","messageId":"715","endLine":129,"endColumn":17},{"ruleId":"769","severity":1,"message":"770","line":130,"column":53,"nodeType":"771","messageId":"772","endLine":130,"endColumn":55},{"ruleId":"762","severity":1,"message":"766","line":147,"column":55,"nodeType":"764","messageId":"765","endLine":147,"endColumn":57},{"ruleId":"762","severity":1,"message":"766","line":147,"column":96,"nodeType":"764","messageId":"765","endLine":147,"endColumn":98},{"ruleId":"762","severity":1,"message":"766","line":158,"column":55,"nodeType":"764","messageId":"765","endLine":158,"endColumn":57},{"ruleId":"762","severity":1,"message":"766","line":158,"column":96,"nodeType":"764","messageId":"765","endLine":158,"endColumn":98},{"ruleId":"762","severity":1,"message":"766","line":169,"column":57,"nodeType":"764","messageId":"765","endLine":169,"endColumn":59},{"ruleId":"762","severity":1,"message":"766","line":169,"column":98,"nodeType":"764","messageId":"765","endLine":169,"endColumn":100},{"ruleId":"712","severity":1,"message":"794","line":217,"column":23,"nodeType":"714","messageId":"715","endLine":217,"endColumn":31},{"ruleId":"712","severity":1,"message":"789","line":232,"column":15,"nodeType":"714","messageId":"715","endLine":232,"endColumn":24},{"ruleId":"769","severity":1,"message":"770","line":246,"column":75,"nodeType":"771","messageId":"772","endLine":246,"endColumn":77},{"ruleId":"712","severity":1,"message":"917","line":250,"column":11,"nodeType":"714","messageId":"715","endLine":250,"endColumn":21},{"ruleId":"712","severity":1,"message":"918","line":255,"column":11,"nodeType":"714","messageId":"715","endLine":255,"endColumn":20},{"ruleId":"712","severity":1,"message":"919","line":283,"column":11,"nodeType":"714","messageId":"715","endLine":283,"endColumn":23},{"ruleId":"712","severity":1,"message":"716","line":1,"column":27,"nodeType":"714","messageId":"715","endLine":1,"endColumn":36},{"ruleId":"712","severity":1,"message":"713","line":1,"column":38,"nodeType":"714","messageId":"715","endLine":1,"endColumn":49},{"ruleId":"712","severity":1,"message":"901","line":5,"column":10,"nodeType":"714","messageId":"715","endLine":5,"endColumn":14},{"ruleId":"712","severity":1,"message":"860","line":6,"column":10,"nodeType":"714","messageId":"715","endLine":6,"endColumn":14},{"ruleId":"712","severity":1,"message":"861","line":6,"column":16,"nodeType":"714","messageId":"715","endLine":6,"endColumn":24},{"ruleId":"712","severity":1,"message":"774","line":11,"column":17,"nodeType":"714","messageId":"715","endLine":11,"endColumn":27},{"ruleId":"712","severity":1,"message":"920","line":13,"column":3,"nodeType":"714","messageId":"715","endLine":13,"endColumn":14},{"ruleId":"712","severity":1,"message":"931","line":14,"column":3,"nodeType":"714","messageId":"715","endLine":14,"endColumn":18},{"ruleId":"712","severity":1,"message":"932","line":15,"column":3,"nodeType":"714","messageId":"715","endLine":15,"endColumn":13},{"ruleId":"712","severity":1,"message":"921","line":18,"column":10,"nodeType":"714","messageId":"715","endLine":18,"endColumn":14},{"ruleId":"712","severity":1,"message":"922","line":18,"column":16,"nodeType":"714","messageId":"715","endLine":18,"endColumn":24},{"ruleId":"712","severity":1,"message":"923","line":18,"column":26,"nodeType":"714","messageId":"715","endLine":18,"endColumn":36},{"ruleId":"712","severity":1,"message":"924","line":21,"column":10,"nodeType":"714","messageId":"715","endLine":21,"endColumn":15},{"ruleId":"712","severity":1,"message":"885","line":50,"column":8,"nodeType":"714","messageId":"715","endLine":50,"endColumn":23},{"ruleId":"712","severity":1,"message":"841","line":125,"column":20,"nodeType":"714","messageId":"715","endLine":125,"endColumn":31},{"ruleId":"712","severity":1,"message":"906","line":126,"column":23,"nodeType":"714","messageId":"715","endLine":126,"endColumn":37},{"ruleId":"712","severity":1,"message":"743","line":127,"column":19,"nodeType":"714","messageId":"715","endLine":127,"endColumn":29},{"ruleId":"712","severity":1,"message":"907","line":131,"column":10,"nodeType":"714","messageId":"715","endLine":131,"endColumn":22},{"ruleId":"712","severity":1,"message":"908","line":131,"column":24,"nodeType":"714","messageId":"715","endLine":131,"endColumn":39},{"ruleId":"712","severity":1,"message":"909","line":132,"column":10,"nodeType":"714","messageId":"715","endLine":132,"endColumn":20},{"ruleId":"712","severity":1,"message":"910","line":132,"column":22,"nodeType":"714","messageId":"715","endLine":132,"endColumn":35},{"ruleId":"712","severity":1,"message":"911","line":133,"column":10,"nodeType":"714","messageId":"715","endLine":133,"endColumn":22},{"ruleId":"712","severity":1,"message":"912","line":133,"column":24,"nodeType":"714","messageId":"715","endLine":133,"endColumn":39},{"ruleId":"712","severity":1,"message":"913","line":134,"column":10,"nodeType":"714","messageId":"715","endLine":134,"endColumn":14},{"ruleId":"712","severity":1,"message":"914","line":134,"column":16,"nodeType":"714","messageId":"715","endLine":134,"endColumn":23},{"ruleId":"712","severity":1,"message":"915","line":135,"column":10,"nodeType":"714","messageId":"715","endLine":135,"endColumn":21},{"ruleId":"712","severity":1,"message":"916","line":135,"column":23,"nodeType":"714","messageId":"715","endLine":135,"endColumn":37},{"ruleId":"712","severity":1,"message":"843","line":138,"column":9,"nodeType":"714","messageId":"715","endLine":138,"endColumn":15},{"ruleId":"769","severity":1,"message":"770","line":139,"column":51,"nodeType":"771","messageId":"772","endLine":139,"endColumn":53},{"ruleId":"712","severity":1,"message":"794","line":237,"column":15,"nodeType":"714","messageId":"715","endLine":237,"endColumn":23},{"ruleId":"712","severity":1,"message":"789","line":251,"column":11,"nodeType":"714","messageId":"715","endLine":251,"endColumn":20},{"ruleId":"769","severity":1,"message":"770","line":266,"column":25,"nodeType":"771","messageId":"772","endLine":266,"endColumn":27},{"ruleId":"712","severity":1,"message":"917","line":271,"column":9,"nodeType":"714","messageId":"715","endLine":271,"endColumn":19},{"ruleId":"712","severity":1,"message":"918","line":279,"column":9,"nodeType":"714","messageId":"715","endLine":279,"endColumn":18},{"ruleId":"712","severity":1,"message":"919","line":312,"column":9,"nodeType":"714","messageId":"715","endLine":312,"endColumn":21},{"ruleId":"712","severity":1,"message":"856","line":1,"column":38,"nodeType":"714","messageId":"715","endLine":1,"endColumn":44},{"ruleId":"712","severity":1,"message":"821","line":2,"column":45,"nodeType":"714","messageId":"715","endLine":2,"endColumn":51},{"ruleId":"712","severity":1,"message":"864","line":11,"column":10,"nodeType":"714","messageId":"715","endLine":11,"endColumn":17},{"ruleId":"712","severity":1,"message":"901","line":20,"column":10,"nodeType":"714","messageId":"715","endLine":20,"endColumn":14},{"ruleId":"712","severity":1,"message":"831","line":21,"column":8,"nodeType":"714","messageId":"715","endLine":21,"endColumn":14},{"ruleId":"712","severity":1,"message":"898","line":22,"column":10,"nodeType":"714","messageId":"715","endLine":22,"endColumn":18},{"ruleId":"712","severity":1,"message":"936","line":23,"column":10,"nodeType":"714","messageId":"715","endLine":23,"endColumn":15},{"ruleId":"712","severity":1,"message":"937","line":23,"column":17,"nodeType":"714","messageId":"715","endLine":23,"endColumn":27},{"ruleId":"712","severity":1,"message":"938","line":24,"column":8,"nodeType":"714","messageId":"715","endLine":24,"endColumn":24},{"ruleId":"712","severity":1,"message":"939","line":25,"column":8,"nodeType":"714","messageId":"715","endLine":25,"endColumn":18},{"ruleId":"712","severity":1,"message":"940","line":101,"column":5,"nodeType":"714","messageId":"715","endLine":101,"endColumn":13},{"ruleId":"712","severity":1,"message":"941","line":111,"column":10,"nodeType":"714","messageId":"715","endLine":111,"endColumn":26},{"ruleId":"712","severity":1,"message":"942","line":123,"column":10,"nodeType":"714","messageId":"715","endLine":123,"endColumn":21},{"ruleId":"712","severity":1,"message":"874","line":124,"column":10,"nodeType":"714","messageId":"715","endLine":124,"endColumn":21},{"ruleId":"712","severity":1,"message":"943","line":124,"column":23,"nodeType":"714","messageId":"715","endLine":124,"endColumn":37},{"ruleId":"712","severity":1,"message":"875","line":125,"column":10,"nodeType":"714","messageId":"715","endLine":125,"endColumn":18},{"ruleId":"712","severity":1,"message":"944","line":126,"column":10,"nodeType":"714","messageId":"715","endLine":126,"endColumn":17},{"ruleId":"712","severity":1,"message":"945","line":128,"column":10,"nodeType":"714","messageId":"715","endLine":128,"endColumn":26},{"ruleId":"712","severity":1,"message":"946","line":131,"column":10,"nodeType":"714","messageId":"715","endLine":131,"endColumn":29},{"ruleId":"712","severity":1,"message":"947","line":131,"column":31,"nodeType":"714","messageId":"715","endLine":131,"endColumn":53},{"ruleId":"712","severity":1,"message":"876","line":133,"column":10,"nodeType":"714","messageId":"715","endLine":133,"endColumn":25},{"ruleId":"712","severity":1,"message":"948","line":133,"column":27,"nodeType":"714","messageId":"715","endLine":133,"endColumn":45},{"ruleId":"712","severity":1,"message":"789","line":139,"column":11,"nodeType":"714","messageId":"715","endLine":139,"endColumn":20},{"ruleId":"712","severity":1,"message":"949","line":168,"column":15,"nodeType":"714","messageId":"715","endLine":168,"endColumn":36},{"ruleId":"755","severity":1,"message":"950","line":235,"column":6,"nodeType":"757","endLine":235,"endColumn":8,"suggestions":"951"},{"ruleId":"712","severity":1,"message":"952","line":4,"column":8,"nodeType":"714","messageId":"715","endLine":4,"endColumn":19},{"ruleId":"712","severity":1,"message":"953","line":54,"column":9,"nodeType":"714","messageId":"715","endLine":54,"endColumn":20},{"ruleId":"712","severity":1,"message":"902","line":56,"column":34,"nodeType":"714","messageId":"715","endLine":56,"endColumn":59},{"ruleId":"712","severity":1,"message":"853","line":57,"column":9,"nodeType":"714","messageId":"715","endLine":57,"endColumn":20},{"ruleId":"712","severity":1,"message":"854","line":60,"column":10,"nodeType":"714","messageId":"715","endLine":60,"endColumn":17},{"ruleId":"769","severity":1,"message":"770","line":92,"column":25,"nodeType":"771","messageId":"772","endLine":92,"endColumn":27},{"ruleId":"712","severity":1,"message":"789","line":99,"column":11,"nodeType":"714","messageId":"715","endLine":99,"endColumn":20},{"ruleId":"769","severity":1,"message":"770","line":115,"column":25,"nodeType":"771","messageId":"772","endLine":115,"endColumn":27},{"ruleId":"712","severity":1,"message":"954","line":128,"column":9,"nodeType":"714","messageId":"715","endLine":128,"endColumn":31},{"ruleId":"712","severity":1,"message":"855","line":129,"column":9,"nodeType":"714","messageId":"715","endLine":129,"endColumn":21},{"ruleId":"712","severity":1,"message":"952","line":4,"column":8,"nodeType":"714","messageId":"715","endLine":4,"endColumn":19},{"ruleId":"712","severity":1,"message":"953","line":53,"column":9,"nodeType":"714","messageId":"715","endLine":53,"endColumn":20},{"ruleId":"712","severity":1,"message":"853","line":58,"column":9,"nodeType":"714","messageId":"715","endLine":58,"endColumn":20},{"ruleId":"712","severity":1,"message":"854","line":61,"column":10,"nodeType":"714","messageId":"715","endLine":61,"endColumn":17},{"ruleId":"769","severity":1,"message":"770","line":93,"column":25,"nodeType":"771","messageId":"772","endLine":93,"endColumn":27},{"ruleId":"712","severity":1,"message":"789","line":100,"column":11,"nodeType":"714","messageId":"715","endLine":100,"endColumn":20},{"ruleId":"769","severity":1,"message":"770","line":115,"column":25,"nodeType":"771","messageId":"772","endLine":115,"endColumn":27},{"ruleId":"712","severity":1,"message":"954","line":128,"column":9,"nodeType":"714","messageId":"715","endLine":128,"endColumn":31},{"ruleId":"712","severity":1,"message":"855","line":129,"column":9,"nodeType":"714","messageId":"715","endLine":129,"endColumn":21},{"ruleId":"712","severity":1,"message":"930","line":3,"column":10,"nodeType":"714","messageId":"715","endLine":3,"endColumn":24},{"ruleId":"712","severity":1,"message":"851","line":6,"column":10,"nodeType":"714","messageId":"715","endLine":6,"endColumn":15},{"ruleId":"712","severity":1,"message":"858","line":6,"column":17,"nodeType":"714","messageId":"715","endLine":6,"endColumn":26},{"ruleId":"712","severity":1,"message":"729","line":6,"column":28,"nodeType":"714","messageId":"715","endLine":6,"endColumn":39},{"ruleId":"712","severity":1,"message":"857","line":6,"column":41,"nodeType":"714","messageId":"715","endLine":6,"endColumn":52},{"ruleId":"712","severity":1,"message":"821","line":7,"column":8,"nodeType":"714","messageId":"715","endLine":7,"endColumn":14},{"ruleId":"712","severity":1,"message":"882","line":29,"column":10,"nodeType":"714","messageId":"715","endLine":29,"endColumn":15},{"ruleId":"712","severity":1,"message":"931","line":32,"column":10,"nodeType":"714","messageId":"715","endLine":32,"endColumn":25},{"ruleId":"712","severity":1,"message":"932","line":32,"column":27,"nodeType":"714","messageId":"715","endLine":32,"endColumn":37},{"ruleId":"712","severity":1,"message":"905","line":32,"column":39,"nodeType":"714","messageId":"715","endLine":32,"endColumn":47},{"ruleId":"712","severity":1,"message":"933","line":105,"column":9,"nodeType":"714","messageId":"715","endLine":105,"endColumn":16},{"ruleId":"712","severity":1,"message":"925","line":106,"column":10,"nodeType":"714","messageId":"715","endLine":106,"endColumn":18},{"ruleId":"712","severity":1,"message":"743","line":108,"column":19,"nodeType":"714","messageId":"715","endLine":108,"endColumn":29},{"ruleId":"712","severity":1,"message":"842","line":109,"column":10,"nodeType":"714","messageId":"715","endLine":109,"endColumn":17},{"ruleId":"712","severity":1,"message":"926","line":109,"column":19,"nodeType":"714","messageId":"715","endLine":109,"endColumn":29},{"ruleId":"755","severity":1,"message":"934","line":206,"column":6,"nodeType":"757","endLine":206,"endColumn":8,"suggestions":"955"},{"ruleId":"712","severity":1,"message":"789","line":209,"column":11,"nodeType":"714","messageId":"715","endLine":209,"endColumn":20},{"ruleId":"769","severity":1,"message":"770","line":223,"column":25,"nodeType":"771","messageId":"772","endLine":223,"endColumn":27},{"ruleId":"712","severity":1,"message":"919","line":256,"column":9,"nodeType":"714","messageId":"715","endLine":256,"endColumn":21},{"ruleId":"712","severity":1,"message":"856","line":1,"column":38,"nodeType":"714","messageId":"715","endLine":1,"endColumn":44},{"ruleId":"712","severity":1,"message":"821","line":3,"column":3,"nodeType":"714","messageId":"715","endLine":3,"endColumn":9},{"ruleId":"712","severity":1,"message":"858","line":6,"column":3,"nodeType":"714","messageId":"715","endLine":6,"endColumn":12},{"ruleId":"712","severity":1,"message":"864","line":22,"column":10,"nodeType":"714","messageId":"715","endLine":22,"endColumn":17},{"ruleId":"712","severity":1,"message":"901","line":31,"column":10,"nodeType":"714","messageId":"715","endLine":31,"endColumn":14},{"ruleId":"712","severity":1,"message":"831","line":32,"column":8,"nodeType":"714","messageId":"715","endLine":32,"endColumn":14},{"ruleId":"712","severity":1,"message":"898","line":33,"column":10,"nodeType":"714","messageId":"715","endLine":33,"endColumn":18},{"ruleId":"712","severity":1,"message":"936","line":34,"column":10,"nodeType":"714","messageId":"715","endLine":34,"endColumn":15},{"ruleId":"712","severity":1,"message":"937","line":34,"column":17,"nodeType":"714","messageId":"715","endLine":34,"endColumn":27},{"ruleId":"712","severity":1,"message":"938","line":35,"column":8,"nodeType":"714","messageId":"715","endLine":35,"endColumn":24},{"ruleId":"712","severity":1,"message":"939","line":36,"column":8,"nodeType":"714","messageId":"715","endLine":36,"endColumn":18},{"ruleId":"712","severity":1,"message":"941","line":90,"column":10,"nodeType":"714","messageId":"715","endLine":90,"endColumn":26},{"ruleId":"712","severity":1,"message":"942","line":102,"column":10,"nodeType":"714","messageId":"715","endLine":102,"endColumn":21},{"ruleId":"712","severity":1,"message":"874","line":103,"column":10,"nodeType":"714","messageId":"715","endLine":103,"endColumn":21},{"ruleId":"712","severity":1,"message":"943","line":103,"column":23,"nodeType":"714","messageId":"715","endLine":103,"endColumn":37},{"ruleId":"712","severity":1,"message":"875","line":104,"column":10,"nodeType":"714","messageId":"715","endLine":104,"endColumn":18},{"ruleId":"712","severity":1,"message":"944","line":105,"column":10,"nodeType":"714","messageId":"715","endLine":105,"endColumn":17},{"ruleId":"712","severity":1,"message":"945","line":107,"column":10,"nodeType":"714","messageId":"715","endLine":107,"endColumn":26},{"ruleId":"712","severity":1,"message":"946","line":110,"column":10,"nodeType":"714","messageId":"715","endLine":110,"endColumn":29},{"ruleId":"712","severity":1,"message":"947","line":110,"column":31,"nodeType":"714","messageId":"715","endLine":110,"endColumn":53},{"ruleId":"712","severity":1,"message":"876","line":112,"column":10,"nodeType":"714","messageId":"715","endLine":112,"endColumn":25},{"ruleId":"712","severity":1,"message":"948","line":112,"column":27,"nodeType":"714","messageId":"715","endLine":112,"endColumn":45},{"ruleId":"712","severity":1,"message":"789","line":119,"column":11,"nodeType":"714","messageId":"715","endLine":119,"endColumn":20},{"ruleId":"712","severity":1,"message":"949","line":142,"column":15,"nodeType":"714","messageId":"715","endLine":142,"endColumn":36},{"ruleId":"755","severity":1,"message":"950","line":208,"column":6,"nodeType":"757","endLine":208,"endColumn":8,"suggestions":"956"},{"ruleId":"712","severity":1,"message":"957","line":5,"column":16,"nodeType":"714","messageId":"715","endLine":5,"endColumn":20},{"ruleId":"712","severity":1,"message":"958","line":13,"column":8,"nodeType":"714","messageId":"715","endLine":13,"endColumn":20},{"ruleId":"712","severity":1,"message":"959","line":14,"column":8,"nodeType":"714","messageId":"715","endLine":14,"endColumn":20},{"ruleId":"712","severity":1,"message":"960","line":15,"column":8,"nodeType":"714","messageId":"715","endLine":15,"endColumn":20},{"ruleId":"712","severity":1,"message":"961","line":16,"column":8,"nodeType":"714","messageId":"715","endLine":16,"endColumn":20},{"ruleId":"712","severity":1,"message":"962","line":17,"column":8,"nodeType":"714","messageId":"715","endLine":17,"endColumn":20},{"ruleId":"712","severity":1,"message":"930","line":19,"column":10,"nodeType":"714","messageId":"715","endLine":19,"endColumn":24},{"ruleId":"712","severity":1,"message":"924","line":23,"column":3,"nodeType":"714","messageId":"715","endLine":23,"endColumn":8},{"ruleId":"712","severity":1,"message":"884","line":27,"column":3,"nodeType":"714","messageId":"715","endLine":27,"endColumn":12},{"ruleId":"712","severity":1,"message":"963","line":29,"column":3,"nodeType":"714","messageId":"715","endLine":29,"endColumn":8},{"ruleId":"712","severity":1,"message":"964","line":31,"column":3,"nodeType":"714","messageId":"715","endLine":31,"endColumn":15},{"ruleId":"712","severity":1,"message":"833","line":35,"column":10,"nodeType":"714","messageId":"715","endLine":35,"endColumn":17},{"ruleId":"712","severity":1,"message":"941","line":37,"column":10,"nodeType":"714","messageId":"715","endLine":37,"endColumn":26},{"ruleId":"712","severity":1,"message":"875","line":39,"column":10,"nodeType":"714","messageId":"715","endLine":39,"endColumn":18},{"ruleId":"712","severity":1,"message":"944","line":40,"column":10,"nodeType":"714","messageId":"715","endLine":40,"endColumn":17},{"ruleId":"712","severity":1,"message":"965","line":41,"column":10,"nodeType":"714","messageId":"715","endLine":41,"endColumn":16},{"ruleId":"712","severity":1,"message":"966","line":41,"column":18,"nodeType":"714","messageId":"715","endLine":41,"endColumn":27},{"ruleId":"712","severity":1,"message":"967","line":42,"column":10,"nodeType":"714","messageId":"715","endLine":42,"endColumn":22},{"ruleId":"712","severity":1,"message":"968","line":42,"column":24,"nodeType":"714","messageId":"715","endLine":42,"endColumn":39},{"ruleId":"712","severity":1,"message":"969","line":43,"column":10,"nodeType":"714","messageId":"715","endLine":43,"endColumn":19},{"ruleId":"712","severity":1,"message":"970","line":86,"column":9,"nodeType":"714","messageId":"715","endLine":86,"endColumn":22},{"ruleId":"712","severity":1,"message":"789","line":88,"column":11,"nodeType":"714","messageId":"715","endLine":88,"endColumn":20},{"ruleId":"971","severity":1,"message":"972","line":256,"column":23,"nodeType":"973","endLine":256,"endColumn":73},{"ruleId":"971","severity":1,"message":"972","line":258,"column":23,"nodeType":"973","endLine":262,"endColumn":25},{"ruleId":"971","severity":1,"message":"972","line":305,"column":23,"nodeType":"973","endLine":305,"endColumn":73},{"ruleId":"971","severity":1,"message":"972","line":307,"column":23,"nodeType":"973","endLine":311,"endColumn":25},{"ruleId":"971","severity":1,"message":"972","line":356,"column":23,"nodeType":"973","endLine":356,"endColumn":73},{"ruleId":"971","severity":1,"message":"972","line":358,"column":23,"nodeType":"973","endLine":362,"endColumn":25},{"ruleId":"971","severity":1,"message":"972","line":407,"column":23,"nodeType":"973","endLine":407,"endColumn":73},{"ruleId":"971","severity":1,"message":"972","line":409,"column":23,"nodeType":"973","endLine":413,"endColumn":25},{"ruleId":"971","severity":1,"message":"972","line":458,"column":23,"nodeType":"973","endLine":458,"endColumn":73},{"ruleId":"971","severity":1,"message":"972","line":460,"column":23,"nodeType":"973","endLine":464,"endColumn":25},"no-native-reassign",["974"],"no-negated-in-lhs",["975"],"no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useState' is defined but never used.","'PatientDashboard' is defined but never used.","'DualListBox' is defined but never used.","'PropTypes' is defined but never used.","'withStyles' is defined but never used.","'ButtonMui' is defined but never used.","'Col' is defined but never used.","'Step' is defined but never used.","'Segment' is defined but never used.","'Icon' is defined but never used.","'DataGrid' is defined but never used.","'Box' is defined but never used.","'ModalFooter' is defined but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'Controller' is defined but never used.","'FormControl' is defined but never used.","'Typography' is defined but never used.","'Autocomplete' is defined but never used.","'DateTimePicker' is defined but never used.","'Stack' is defined but never used.","'icon' is assigned a value but never used.","'checkedIcon' is assigned a value but never used.","'appointmentColumns' is assigned a value but never used.","'appointments' is assigned a value but never used.","'userDetail' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'today' is assigned a value but never used.","'setToday' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","'control' is assigned a value but never used.","'checkOutObj' is assigned a value but never used.","'setCheckOutObj' is assigned a value but never used.","'setCheckInObj' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'patientObj.id'. Either include it or remove the dependency array.","ArrayExpression",["976"],"'visitTypesRows' is assigned a value but never used.","'onChangeDate' is assigned a value but never used.","'columns' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","'onDelete' is assigned a value but never used.","'onSubmit' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'onError' is assigned a value but never used.","'FaUserPlus' is defined but never used.","'isSubmitting' is assigned a value but never used.","'watchPnumber' is assigned a value but never used.","'watchAltPhonenumber' is assigned a value but never used.","'watchContactPhoneNumber' is assigned a value but never used.","'watchShowAge' is assigned a value but never used.","'setMinDOB' is assigned a value but never used.","'setSaving' is assigned a value but never used.","'genders' is assigned a value but never used.","'setGenders' is assigned a value but never used.","Expected '!==' and instead saw '!='.","valid-typeof","Invalid typeof comparison value.","Literal","invalidValue","'dateParts' is assigned a value but never used.","'gender' is assigned a value but never used.","React Hook useCallback has missing dependencies: 'patientId' and 'setValue'. Either include them or remove the dependency array.",["977"],"'contactEmail' is assigned a value but never used.","'response' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'statesList'. Either include it or remove the dependency array.",["978"],"'genderRows' is assigned a value but never used.","'MatButton' is defined but never used.","'FontAwesomeIcon' is defined but never used.","'SaveIcon' is defined but never used.","'AddIcon' is defined but never used.","'CancelIcon' is defined but never used.","'disValue' is assigned a value but never used.",["979"],"'handleAddRelative' is assigned a value but never used.","'handleSaveRelationship' is assigned a value but never used.","'handleCancelSaveRelationship' is assigned a value but never used.","'handleEditRelative' is assigned a value but never used.","'handleDeleteRelative' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'districtValue'. Either include it or remove the dependency array.",["980"],"'sexRows' is assigned a value but never used.","'maritalStatusRows' is assigned a value but never used.","'educationRows' is assigned a value but never used.","'occupationRows' is assigned a value but never used.","'handleCancel' is assigned a value but never used.","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","putCommentInBraces","'useForm' is defined but never used.","'Button' is defined but never used.","'Grid' is defined but never used.","'MenuItem' is defined but never used.","'Paper' is defined but never used.","'TextField' is defined but never used.","'ClientDashboard' is defined but never used.","'PersonDemographics' is defined but never used.","'MaterialTable' is defined but never used.","'Biometrics' is defined but never used.","'ReCaptureBiometric' is defined but never used.","'moment' is defined but never used.","'Swal' is defined but never used.","'loading' is assigned a value but never used.","'patientBiometricStatus' is assigned a value but never used.","'biometricsModuleInstalled' is assigned a value but never used.","'patientVisits' is assigned a value but never used.","'setPatientVisits' is assigned a value but never used.","'checkinStatus' is assigned a value but never used.","'setCheckinStatus' is assigned a value but never used.","'PatientBiometrics' is defined but never used.","'setPatients' is assigned a value but never used.","'patient' is assigned a value but never used.","'toggle' is assigned a value but never used.","'enablePPIColumns' is assigned a value but never used.","'PatientCard' is defined but never used.",["981"],"React Hook useEffect has a missing dependency: 'loadPatientVisits'. Either include it or remove the dependency array.",["982"],"'AccordionActions' is defined but never used.","'Divider' is defined but never used.","'Modal' is defined but never used.","'CaptureBiometric' is defined but never used.","'toggleModal' is assigned a value but never used.","'devices' is assigned a value but never used.","'patientObjID' is assigned a value but never used.","'useRef' is defined but never used.","'ModalHeader' is defined but never used.","'ModalBody' is defined but never used.","'Form' is defined but never used.","'Card' is defined but never used.","'CardBody' is defined but never used.","'CardHeader' is defined but never used.","'Select' is defined but never used.","'Button2' is defined but never used.","'ThumbUpIcon' is defined but never used.","'red' is defined but never used.","'Dimmer' is defined but never used.","'Loader' is defined but never used.","'Image' is defined but never used.","'CircularProgress' is defined but never used.","'Fab' is defined but never used.","'CheckIcon' is defined but never used.","'UpgradeIcon' is defined but never used.","'showCapture' is assigned a value but never used.","'tryAgain' is assigned a value but never used.","'selectedFingers' is assigned a value but never used.","'buttonSx' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'clear_storelist' and 'getPersonBiometrics'. Either include them or remove the dependency array.",["983"],"'biometricFingers' is assigned a value but never used.","'checkDevice' is assigned a value but never used.","'FaEye' is defined but never used.","'SplitActionButton' is defined but never used.","'FormGroup' is defined but never used.","'TablePagination' is defined but never used.","'recaptures' is assigned a value but never used.","'setRecaptures' is assigned a value but never used.","'currentPage' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getRecaptureCount'. Either include it or remove the dependency array.",["984"],"'ArrowDropDownIcon' is defined but never used.","'VisibilityIcon' is defined but never used.","'ListItemText' is defined but never used.","'ListItemIcon' is defined but never used.","'ContentCut' is defined but never used.","'setSelectedIndex' is assigned a value but never used.","'handleMenuItemClick' is assigned a value but never used.","'Dropdown' is defined but never used.","'useHistory' is defined but never used.","'PatientList' is defined but never used.","'Link' is defined but never used.","'setPatientBiometricStatus' is assigned a value but never used.","'setBiometricsModuleInstalled' is assigned a value but never used.",["985"],"'MdPerson' is defined but never used.","'setPermissions' is assigned a value but never used.","'searchParams' is assigned a value but never used.","'setSearchParams' is assigned a value but never used.","'totalPages' is assigned a value but never used.","'setTotalPages' is assigned a value but never used.","'totalRecords' is assigned a value but never used.","'setTotalRecords' is assigned a value but never used.","'page' is assigned a value but never used.","'setPage' is assigned a value but never used.","'rowsPerPage' is assigned a value but never used.","'setRowsPerPage' is assigned a value but never used.","'getAddress' is assigned a value but never used.","'getGender' is assigned a value but never used.","'localization' is assigned a value but never used.","'MdDashboard' is defined but never used.","'Menu' is defined but never used.","'MenuList' is defined but never used.","'MenuButton' is defined but never used.","'Label' is defined but never used.","'patients' is assigned a value but never used.","'setPatient' is assigned a value but never used.","'setDevices' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'objValues.device'. Either include it or remove the dependency array.",["986"],"'ToastContainer' is defined but never used.","'MdDeleteForever' is defined but never used.","'MdModeEdit' is defined but never used.","'classes' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadPatients'. Either include it or remove the dependency array.",["987"],"'Alert' is defined but never used.","'AlertTitle' is defined but never used.","'fingerprintimage' is defined but never used.","'DeleteIcon' is defined but never used.","'checkUrl' is assigned a value but never used.","'biometricDevices' is assigned a value but never used.","'pageLoading' is assigned a value but never used.","'setshowCapture' is assigned a value but never used.","'success' is assigned a value but never used.","'storedBiometrics' is assigned a value but never used.","'capturedFingeredObj' is assigned a value but never used.","'setCapturedFingeredObj' is assigned a value but never used.","'setSelectedFingers' is assigned a value but never used.","'personCapturedFingers' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'clear_storelist', 'getPersonBiometrics', and 'getRecaptureCount'. Either include them or remove the dependency array.",["988"],"'Breadcrumbs' is defined but never used.","'permissions' is assigned a value but never used.","'handleBiometricCapture' is assigned a value but never used.",["989"],["990"],"'List' is defined but never used.","'rightFinger1' is defined but never used.","'rightFinger2' is defined but never used.","'rightFinger3' is defined but never used.","'rightFinger4' is defined but never used.","'rightFinger5' is defined but never used.","'Input' is defined but never used.","'CardSubtitle' is defined but never used.","'errors' is assigned a value but never used.","'setErrors' is assigned a value but never used.","'imageQuality' is assigned a value but never used.","'setImageQuality' is assigned a value but never used.","'objValues' is assigned a value but never used.","'calculate_age' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"991","fix":"992"},{"desc":"993","fix":"994"},{"desc":"995","fix":"996"},{"desc":"993","fix":"997"},{"desc":"998","fix":"999"},{"desc":"991","fix":"1000"},{"desc":"1001","fix":"1002"},{"desc":"1003","fix":"1004"},{"desc":"1005","fix":"1006"},{"desc":"991","fix":"1007"},{"desc":"1008","fix":"1009"},{"desc":"1010","fix":"1011"},{"desc":"1012","fix":"1013"},{"desc":"1010","fix":"1014"},{"desc":"1012","fix":"1015"},"Update the dependencies array to be: [patientObj.id]",{"range":"1016","text":"1017"},"Update the dependencies array to be: [patientId, setValue]",{"range":"1018","text":"1019"},"Update the dependencies array to be: [loadSexes, loadMaritalStatus, loadEducation, loadOccupation, loadRelationships, loadTopLevelCountry, getPatient, statesList]",{"range":"1020","text":"1021"},{"range":"1022","text":"1019"},"Update the dependencies array to be: [loadSexes, loadMaritalStatus, loadEducation, loadOccupation, loadRelationships, loadTopLevelCountry, getPatient, districtValue]",{"range":"1023","text":"1024"},{"range":"1025","text":"1017"},"Update the dependencies array to be: [loadPatientVisits]",{"range":"1026","text":"1027"},"Update the dependencies array to be: [clear_storelist, getPersonBiometrics]",{"range":"1028","text":"1029"},"Update the dependencies array to be: [getRecaptureCount]",{"range":"1030","text":"1031"},{"range":"1032","text":"1017"},"Update the dependencies array to be: [objValues.device]",{"range":"1033","text":"1034"},"Update the dependencies array to be: [loadPatients]",{"range":"1035","text":"1036"},"Update the dependencies array to be: [clear_storelist, getPersonBiometrics, getRecaptureCount]",{"range":"1037","text":"1038"},{"range":"1039","text":"1036"},{"range":"1040","text":"1038"},[8242,8244],"[patientObj.id]",[11446,11448],"[patientId, setValue]",[24258,24412],"[loadSexes, loadMaritalStatus, loadEducation, loadOccupation, loadRelationships, loadTopLevelCountry, getPatient, statesList]",[11626,11628],[23915,24069],"[loadSexes, loadMaritalStatus, loadEducation, loadOccupation, loadRelationships, loadTopLevelCountry, getPatient, districtValue]",[8250,8252],[8355,8357],"[loadPatientVisits]",[7696,7698],"[clear_storelist, getPersonBiometrics]",[4074,4076],"[getRecaptureCount]",[6462,6464],[3483,3485],"[objValues.device]",[7000,7002],"[loadPatients]",[7336,7338],"[clear_storelist, getPersonBiometrics, getRecaptureCount]",[7106,7108],[6458,6460]]