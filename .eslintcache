<<<<<<<<< Temporary merge branch 1
[{"C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\patient-module\\src\\index.js":"1","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\patient-module\\src\\App.js":"2","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\patient-module\\src\\main\\webapp\\components\\Dashboard.js":"3","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\patient-module\\src\\api.js":"4","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\patient-module\\src\\main\\webapp\\components\\SplitActionButton.js":"5","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\patient-module\\src\\main\\webapp\\components\\PatientDashboard.js":"6","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\patient-module\\src\\main\\webapp\\components\\RegisterPatient.js":"7","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\patient-module\\src\\main\\webapp\\components\\Add-Patient-Vitals.js":"8","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\patient-module\\src\\main\\webapp\\components\\PatientVitals.js":"9","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\patient-module\\src\\main\\webapp\\components\\Biometrics.js":"10","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\patient-module\\src\\main\\webapp\\components\\PatientCard.js":"11","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\patient-module\\src\\main\\webapp\\components\\CaptureBiometric.js":"12"},{"size":495,"mtime":1655459183241,"results":"13","hashOfConfig":"14"},{"size":1904,"mtime":1660988245140,"results":"15","hashOfConfig":"14"},{"size":13483,"mtime":1660588618513,"results":"16","hashOfConfig":"14"},{"size":434,"mtime":1662647148904,"results":"17","hashOfConfig":"14"},{"size":4786,"mtime":1659600500523,"results":"18","hashOfConfig":"14"},{"size":33307,"mtime":1661320838547,"results":"19","hashOfConfig":"14"},{"size":82062,"mtime":1661143394576,"results":"20","hashOfConfig":"14"},{"size":13104,"mtime":1659600500519,"results":"21","hashOfConfig":"22"},{"size":2644,"mtime":1655459183392,"results":"23","hashOfConfig":"22"},{"size":40609,"mtime":1660656393844,"results":"24","hashOfConfig":"14"},{"size":10654,"mtime":1660643643779,"results":"25","hashOfConfig":"14"},{"size":20592,"mtime":1659629837142,"results":"26","hashOfConfig":"14"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1tgq6yc",{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":42,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"zwma02",{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},"C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\patient-module\\src\\index.js",[],"C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\patient-module\\src\\App.js",["59","60","61","62"],"import React, {useCallback, useEffect, useState} from \"react\";\r\nimport {\r\n  MemoryRouter as Router,\r\n  Switch,\r\n  Route,\r\n} from \"react-router-dom\";\r\nimport RegisterPatient from './main/webapp/components/RegisterPatient';\r\nimport PatientDashboard from './main/webapp/components/PatientDashboard';\r\nimport Dashboard from './main/webapp/components/Dashboard';\r\n/*import PatientVitals from './main/webapp/components/PatientVitals';\r\nimport AddPatientVitals from './main/webapp/components/Add-Patient-Vitals';*/\r\nimport { ToastContainer} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport './main/webapp/css/style.css'\r\nimport DualListBox from \"react-dual-listbox\";\r\nimport 'react-dual-listbox/lib/react-dual-listbox.css';\r\n\r\nexport default function App() {\r\n  return (\r\n\r\n    <Router>\r\n      <div>\r\n      <ToastContainer />\r\n{/*          <Switch> looks through its children <Route>s and\r\n            renders the first one that matches the current URL.*/}\r\n        <Switch>\r\n\r\n          <Route path=\"/register-patient\">\r\n            <RegisterPatientPage />\r\n          </Route>\r\n          <Route path=\"/patient-dashboard\">\r\n            <PatientDashboardPage />\r\n          </Route>\r\n          <Route path=\"/patient-vitals\">\r\n              <Dashboard />\r\n            {/*<PatientVitalsPage />*/}\r\n          </Route>\r\n          <Route path=\"/add-patient-vital\">\r\n              <Dashboard />\r\n            {/*<AddPatientVitalsPage />*/}\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Dashboard />\r\n          </Route>\r\n          \r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nfunction PatientDashboardPage() {\r\n  return <PatientDashboard />;\r\n}\r\nfunction RegisterPatientPage() {\r\n  return <RegisterPatient />;\r\n}\r\n/*\r\nfunction PatientVitalsPage() {\r\n  return <PatientVitals />\r\n}\r\nfunction AddPatientVitalsPage() {\r\n  return <AddPatientVitals />\r\n}\r\n*/\r\n\r\n\r\n","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\patient-module\\src\\main\\webapp\\components\\Dashboard.js",["63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82"],"import React, {useState, useEffect, useCallback} from 'react'\r\nimport MaterialTable from 'material-table';\r\nimport axios from \"axios\";\r\nimport { url as baseUrl, token } from \"../../../api\";\r\nimport { Link } from 'react-router-dom'\r\nimport { Card,CardBody,} from 'reactstrap';\r\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport 'react-widgets/dist/css/react-widgets.css';\r\nimport {FaEye, FaUserPlus} from \"react-icons/fa\";\r\nimport { MdDashboard, MdDeleteForever, MdModeEdit,MdPerson} from \"react-icons/md\";\r\nimport {Menu,MenuList,MenuButton,MenuItem,} from \"@reach/menu-button\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport { Label } from 'semantic-ui-react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport \"./patient.css\";\r\nimport SplitActionButton from './SplitActionButton';\r\n\r\nimport { forwardRef } from 'react';\r\n//import { Button} from \"react-bootstrap\";\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\n\r\nconst tableIcons = {\r\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\nCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\nClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\nDetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\nExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\nFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\nFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\nLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\nNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nPreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\nResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\nSortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\nThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\nViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        },\r\n        '& a':{\r\n            textDecoration:'none !important'\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n    },\r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    },\r\n}));\r\n\r\n\r\n\r\nconst PatientList = (props) => {\r\n    const classes = useStyles();\r\n    const [patients, setPatients] = useState([]);\r\n    const [permissions, setPermissions] = useState([]);\r\n    const [loading, setLoading] = useState('');\r\n    const [modal, setModal] = useState(false);\r\n    const [patient, setPatient] = useState(false);\r\n    const toggle = (id) => {\r\n        const patient = patients.find(obj => obj.id == id);\r\n        setPatient(patient);\r\n        setModal(!modal);\r\n    }\r\n    useEffect(() => {\r\n        userPermission();\r\n      }, []);\r\n    //Get list of Finger index\r\n    const userPermission =()=>{\r\n        axios\r\n           .get(`${baseUrl}account`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {\r\n                setPermissions(response.data.permissions);\r\n\r\n           })\r\n           .catch((error) => {\r\n           });\r\n\r\n     }\r\n    const loadPatients = useCallback(async () => {\r\n        try {\r\n            const response = await axios.get(`${baseUrl}patient`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            setPatients(response.data);\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }, []);\r\n\r\n    const onDelete = async (id) => {\r\n        try {\r\n            if (id) {\r\n                const response = await axios.delete(`${baseUrl}patient/${id}`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n                window.location.reload();\r\n            }\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n\r\n    const onCancelDelete = () => {\r\n        setModal(false);\r\n    }\r\n\r\n    const calculate_age = dob => {\r\n        const today = new Date();\r\n        const dateParts = dob.split(\"-\");\r\n        const birthDate = new Date(dob); // create a date object directlyfrom`dob1`argument\r\n        let age_now = today.getFullYear() - birthDate.getFullYear();\r\n        const m = today.getMonth() - birthDate.getMonth();\r\n        if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n            age_now--;\r\n        }\r\n        if (age_now === 0) {\r\n            return m + \" month(s)\";\r\n        }\r\n        return age_now + \" year(s)\";\r\n    };\r\n\r\n    const getHospitalNumber = (identifier) => {\r\n        const hospitalNumber = identifier.identifier.find(obj => obj.type == 'HospitalNumber');\r\n        return hospitalNumber ? hospitalNumber.value : '';\r\n    };\r\n\r\n    const getAddress = (address) => {\r\n        const city = address && address.address && address.address.length > 0 ? address.address[0].city : null;\r\n        return city;\r\n    };\r\n\r\n    const getGender = (gender) => {\r\n        return gender.display;\r\n    };\r\n\r\n    useEffect(() => {\r\n        loadPatients();\r\n    }, [loadPatients]);\r\n    function actionItems(row){\r\n       return  [\r\n           {\r\n               name:'View',\r\n               type:'link',\r\n               icon:<FaEye  size=\"22\"/>,\r\n               to:{\r\n                   pathname: \"/register-patient\",\r\n                   state: { patientId : row.id, permissions:permissions  }\r\n               }\r\n           },\r\n           {...(permissions.includes('view_patient') || permissions.includes(\"all_permission\")&&\r\n                   {\r\n                       name:'Dashboard',\r\n                       type:'link',\r\n                       icon:<MdPerson size=\"20\" color='rgb(4, 196, 217)' />,\r\n                       to:{\r\n                           pathname: \"/patient-dashboard\",\r\n                           state: { patientObj: row, permissions:permissions  }\r\n                       }\r\n                   }\r\n           )},\r\n           {...(permissions.includes('edit_patient') || permissions.includes(\"all_permission\")&&\r\n                   {\r\n                       name:'Edit',\r\n                       type:'link',\r\n                       icon:<MdModeEdit size=\"20\" color='rgb(4, 196, 217)' />,\r\n                       to:{\r\n                           pathname: \"/register-patient\",\r\n                           state: { patientId : row.id, permissions:permissions  }\r\n                       }\r\n                   }\r\n               )},\r\n           {...(permissions.includes('delete_patient') || permissions.includes(\"all_permission\")&&\r\n                   {\r\n                       name:'Delete',\r\n                       type:'link',\r\n                       icon:<MdDeleteForever size=\"20\" color='rgb(4, 196, 217)'  />,\r\n                       to:{\r\n                           pathname: \"/#\",\r\n                           state: { patientObj: row, permissions:permissions  }\r\n                       }\r\n                   }\r\n               )}\r\n        ]\r\n    }\r\n  return (\r\n    <div className={classes.root}>\r\n        <ToastContainer autoClose={3000} hideProgressBar />\r\n        <Card>\r\n            <CardBody>\r\n            {permissions.includes('view_patient') || permissions.includes(\"all_permission\") ? (\r\n                <Link to={\"register-patient\"}>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className=\" float-right mr-1\"\r\n                        startIcon={<FaUserPlus size=\"25\"/>}\r\n                        style={{backgroundColor:'#014d88'}}\r\n                    >\r\n                        <span style={{ textTransform: \"capitalize\", fontWeight:'bolder' }}>New Patient</span>\r\n                    </Button>\r\n                </Link>\r\n            ):\"\"\r\n        }\r\n                <br/><br/>\r\n                <br/>\r\n                <MaterialTable\r\n                    icons={tableIcons}\r\n                    title=\"Find patients\"\r\n                    columns={[\r\n                        {\r\n                            title: \"Name\",\r\n                            field: \"name\", filtering: false\r\n                        },\r\n                        { title: \"Hosp. Number\", field: \"id\" , filtering: false},\r\n                        { title: \"Sex\", field: \"sex\", filtering: false },\r\n                        { title: \"Date Of Birth\", field: \"dateOfBirth\", filtering: false },\r\n                        { title: \"Age\", field: \"age\", filtering: false },\r\n                        /*{ title: \"Address\", field: \"address\", filtering: false },*/\r\n                        { title: \"Status\", field: \"status\", filtering: false },\r\n                        {title: \"Actions\", field: \"actions\", filtering: false },\r\n                    ]}\r\n                    isLoading={loading}\r\n                    data={patients.map((row) => ({\r\n                        name: row.firstName +  ' ' + row.otherName +  ' ' + row.surname,\r\n                        id: getHospitalNumber(row.identifier),\r\n                        sex: row.sex,\r\n                        dateOfBirth: row.dateOfBirth,\r\n                        age: (row.dateOfBirth === 0 ||\r\n                            row.dateOfBirth === undefined ||\r\n                            row.dateOfBirth === null ||\r\n                            row.dateOfBirth === \"\" )\r\n                            ? 0\r\n                            : calculate_age(row.dateOfBirth),\r\n                        /*address: getAddress(row.address),*/\r\n/*                        status: row.active ?\r\n                            (<Label color=\"green\" size=\"mini\">active</Label>)\r\n                            : (<Label color=\"teal\" size=\"mini\">not-active</Label>),*/\r\n                        status: row.active ?\r\n                            \"Active\"\r\n                            : \"Not-Active\",\r\n                        actions:\r\n                            <div>\r\n                                {permissions.includes('view_patient') || permissions.includes(\"all_permission\") ? (\r\n                                    <SplitActionButton actions={actionItems(row)} />\r\n                                ):\"\"\r\n                                }\r\n                            </div>\r\n                    }))}\r\n\r\n                    options={{\r\n                        headerStyle: {\r\n                            backgroundColor: \"#014d88\",\r\n                            color: \"#fff\",\r\n                            fontSize:'16px',\r\n                            padding:'10px',\r\n                            fontWeight:'bolder'\r\n                        },\r\n                        searchFieldStyle: {\r\n                            width : '200%',\r\n                            margingLeft: '250px',\r\n                        },\r\n                        filtering: false,\r\n                        exportButton: false,\r\n                        searchFieldAlignment: 'left',\r\n                        pageSizeOptions:[10,20,100],\r\n                        pageSize:10,\r\n                        debounceInterval: 400\r\n                    }}\r\n                />\r\n\r\n            </CardBody>\r\n        </Card>\r\n        <Modal isOpen={modal} toggle={onCancelDelete}>\r\n            <ModalHeader toggle={onCancelDelete}>Delete Patient</ModalHeader>\r\n            <ModalBody>\r\n                Are you sure to delete this record? { patient ? patient.surname +  ', ' + patient.firstname +  ' ' + patient.otherName : '' }\r\n            </ModalBody>\r\n            <ModalFooter>\r\n                <Button color=\"primary\" type=\"button\" onClick={(e) => onDelete(patient.id)}>Yes</Button>{' '}\r\n                <Button color=\"secondary\" type=\"button\" onClick={(e) => onCancelDelete()}>No</Button>\r\n            </ModalFooter>\r\n        </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PatientList;\r\n\r\n\r\n","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\patient-module\\src\\api.js",[],"C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\patient-module\\src\\main\\webapp\\components\\SplitActionButton.js",["83","84","85","86","87","88","89","90"],"import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport ButtonGroup from '@mui/material/ButtonGroup';\r\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\r\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\r\nimport Grow from '@mui/material/Grow';\r\nimport Paper from '@mui/material/Paper';\r\nimport Popper from '@mui/material/Popper';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport MenuList from '@mui/material/MenuList';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport ListItemIcon from '@mui/material/ListItemIcon';\r\nimport ContentCut from '@mui/icons-material/ContentCut';\r\nimport Typography from '@mui/material/Typography';\r\nimport {FaEye, FaCaretDown } from \"react-icons/fa\";\r\nimport Divider from '@mui/material/Divider';\r\nimport {useRef} from \"react\";\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\n\r\nconst options = ['Delete', 'Edit'];\r\n\r\n\r\n\r\nexport default function SplitActionButton(props) {\r\n    const [open, setOpen] = React.useState(false);\r\n    const anchorRef = useRef(null);\r\n    const [selectedIndex, setSelectedIndex] = React.useState(1);\r\n\r\n    const handleClick = () => {\r\n        console.info(`You clicked ${options[selectedIndex]}`);\r\n    };\r\n\r\n    const handleMenuItemClick = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleToggle = () => {\r\n        setOpen((prevOpen) => !prevOpen);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ButtonGroup variant=\"contained\" ref={anchorRef} style={{backgroundColor:'rgb(153, 46, 98)', height:'30px',width:'150px'}} >\r\n                <Link to={props.actions[0].to} style={{borderRight:'20px solid #fff !important'}}>\r\n                    <Button size=\"small\" onClick={handleClick} variant=\"contained\" startIcon={props.actions[0].icon} style={{backgroundColor:'rgb(153, 46, 98)'}}>\r\n                        <Typography variant=\"h7\" style={{fontWeight:'bolder'}}>{props.actions[0].name}</Typography>\r\n                    </Button>\r\n                </Link>\r\n\r\n                <Divider orientation=\"vertical\" flexItem style={{borderRight:'20px solid #fff !important', backgroundColor:'#fff',width:'1px', height:'26px',marginTop:'2px'}}>\r\n                    1\r\n                </Divider>\r\n                <Button\r\n                    size=\"medium\"\r\n                    aria-controls={open ? 'split-button-menu' : undefined}\r\n                    aria-expanded={open ? 'true' : undefined}\r\n                    aria-label=\"select merge strategy\"\r\n                    aria-haspopup=\"menu\"\r\n                    onClick={handleToggle}\r\n                    style={{backgroundColor:'rgb(153, 46, 98)'}}\r\n                >\r\n                    <FaCaretDown size='24' />\r\n                </Button>\r\n            </ButtonGroup>\r\n            <Popper\r\n                open={open}\r\n                anchorEl={anchorRef.current}\r\n                role={undefined}\r\n                transition\r\n                disablePortal\r\n                style={{ zIndex:'10000' }}\r\n            >\r\n                {({ TransitionProps, placement }) => (\r\n                    <Grow\r\n                        {...TransitionProps}\r\n                        style={{\r\n                            transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom',\r\n                            zIndex:'1000'\r\n                        }}\r\n                    >\r\n                        {/*width: 130,*/}\r\n                        <Paper sx={{ minWidth:'130px', maxWidth: '150px', marginTop:'2px', zIndex:'1000' }}>\r\n                            <ClickAwayListener onClickAway={handleClose}>\r\n                                <MenuList id=\"split-button-menu\" autoFocusItem>\r\n                                    {props.actions.slice(1).map((option, index) => (\r\n                                        <MenuItem\r\n                                            key={Math.random()}\r\n                                        >\r\n                                            <Link\r\n                                                to={option.to}\r\n                                            >\r\n                                                {option.icon}<span style={{color: 'rgb(153, 46, 98)', fontWeight:'bolder', fontSize:'12px'}}>{option.name}</span>\r\n                                            </Link>\r\n\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </MenuList>\r\n                            </ClickAwayListener>\r\n                        </Paper>\r\n                    </Grow>\r\n                )}\r\n            </Popper>\r\n        </React.Fragment>\r\n    );\r\n}\r\n","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\patient-module\\src\\main\\webapp\\components\\PatientDashboard.js",["91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132"],"import React, {useCallback, useEffect, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {makeStyles, withStyles} from '@material-ui/core/styles';\r\nimport { Link } from 'react-router-dom';\r\nimport ButtonMui from \"@material-ui/core/Button\";\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { Col} from \"reactstrap\";\r\nimport { Step, Label, Segment, Icon } from \"semantic-ui-react\";\r\nimport PatientCard from './PatientCard'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Tab } from 'semantic-ui-react';\r\nimport { DataGrid } from '@mui/x-data-grid';\r\nimport Box from '@mui/material/Box';\r\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport axios from \"axios\";\r\nimport {token, url as baseUrl} from \"../../../api\";\r\nimport Swal from \"sweetalert2\";\r\nimport {Controller, useForm} from \"react-hook-form\";\r\nimport {Button, Card, CardContent, FormControl, Grid, MenuItem, Paper, TextField, Typography} from \"@mui/material\";\r\nimport {format} from 'date-fns';\r\nimport { toast} from \"react-toastify\";\r\nimport MaterialTable from 'material-table';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport CheckBoxOutlineBlankIcon from '@mui/icons-material/CheckBoxOutlineBlank';\r\nimport CheckBoxIcon from '@mui/icons-material/CheckBox';\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport {TiArrowBack} from \"react-icons/ti\";\r\nimport Biometrics from \"./Biometrics\";\r\nimport moment from \"moment\";\r\nimport DualListBox from \"react-dual-listbox\";\r\nimport 'react-dual-listbox/lib/react-dual-listbox.css';\r\nimport _ from 'lodash';\r\n\r\nimport { DesktopDateTimePicker } from '@mui/x-date-pickers/DesktopDateTimePicker';\r\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\r\nimport Stack from '@mui/material/Stack';\r\n\r\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        marginBottom: 20,\r\n        flexGrow: 1,\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n    },\r\n    secondaryHeading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    icon: {\r\n        verticalAlign: 'bottom',\r\n        height: 20,\r\n        width: 20,\r\n    },\r\n    details: {\r\n        alignItems: 'center',\r\n    },\r\n    column: {\r\n        flexBasis: '20.33%',\r\n    },\r\n    helper: {\r\n        borderLeft: `2px solid ${theme.palette.divider}`,\r\n        padding: `${theme.spacing(1)}px ${theme.spacing(1) * 2}px`,\r\n    },\r\n    link: {\r\n        color: theme.palette.primary.main,\r\n        textDecoration: 'none',\r\n        '&:hover': {\r\n            textDecoration: 'underline',\r\n        },\r\n    },\r\n    checkinModal:{\r\n        \"& .modal-dialog\":{\r\n            maxWidth:\"1000px\"\r\n        },\r\n        \"& .ui.label\":{\r\n            backgroundColor:\"#fff\",\r\n            fontSize:'16px',\r\n            color:'#014d88',\r\n            fontWeight:'bold',\r\n            textAlign:'left'\r\n        },\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n    },\r\n    checkInDatePicker:{\r\n        '& .MuiFormControl-root.MuiTextField-root':{\r\n            border:'1px solid #eee'\r\n        }\r\n    }\r\n}));\r\nconst appointmentColumns = [\r\n    { field: 'id', headerName: 'ID', width: 90 },\r\n    {\r\n        field: 'firstName',\r\n        headerName: 'First name',\r\n        width: 150,\r\n        editable: true,\r\n    },\r\n    {\r\n        field: 'lastName',\r\n        headerName: 'Last name',\r\n        width: 150,\r\n        editable: true,\r\n    },\r\n    {\r\n        field: 'age',\r\n        headerName: 'Age',\r\n        type: 'number',\r\n        width: 110,\r\n        editable: true,\r\n    },\r\n\r\n];\r\n\r\nconst appointments = [\r\n    // { id: 1, lastName: 'Snow', firstName: 'Jon', age: 35 },\r\n\r\n];\r\n\r\n\r\nlet newDate = new Date()\r\nfunction PatientDashboard(props) {\r\n    const userDetail = props.location && props.location.state ? props.location.state.user : null;\r\n    const [loading, setLoading] = useState('');\r\n    let history = useHistory();\r\n    const classes = useStyles();\r\n    const [checkInDate,setCheckInDate]=useState(new Date());\r\n    const [checkOutDate,setCheckOutDate]=useState(new Date());\r\n    const [today, setToday] = useState(new Date().toISOString().substr(0, 10).replace('T', ' '));\r\n    const patientObj = history.location && history.location.state ? history.location.state.patientObj : {};\r\n    const permissions = history.location && history.location.state ? history.location.state.permissions : [];\r\n    const { handleSubmit, control } = useForm();\r\n    const [modal, setModal] = useState(false);\r\n    const [allServices, setAllServices] = useState(null);\r\n    const [checkinStatus, setCheckinStatus]= useState(false)\r\n    const [modalCheckOut, setModalCheckOut] = useState(false);\r\n    const [services, setServices]= useState([]);\r\n    const [selectedServices, setSelectedServices]= useState({\"selected\":[]});\r\n    const [patientVisits, setPatientVisits]= useState([]);\r\n    const [patientBiometricStatus, setPatientBiometricStatus]= useState(patientObj.biometricStatus);\r\n    const [biometricsModuleInstalled,setBiometricsModuleInstalled]=useState(false);\r\n\r\n    const [checkOutObj, setCheckOutObj] = useState({\r\n        personId: \"\",\r\n        visitStartDate:format(new Date(newDate), 'yyyy-MM-dd hh:mm')\r\n    })\r\n    const [checkInObj, setCheckInObj] = useState({\r\n        serviceIds:\"\",\r\n        visitDto: {\r\n            personId: patientObj.id,\r\n            checkInDate: format(new Date(newDate), 'yyyy-MM-dd hh:mm')\r\n        }\r\n    })\r\n\r\n    const updatePatientBiometricStatus = (bioStatus) =>{\r\n        setPatientBiometricStatus(bioStatus);\r\n    }\r\n    const loadServices = useCallback(async () => {\r\n        try {\r\n            const response = await axios.get(`${baseUrl}patient/post-service`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            //setServices(response.data);\r\n            setAllServices(response.data);\r\n            setServices(\r\n                Object.entries(response.data).map(([key, value]) => ({\r\n                    label: value.moduleServiceName,\r\n                    value: value.moduleServiceCode,\r\n                }))\r\n            );\r\n/*            setSelectedServices(\r\n                _.uniq(_.map(userDetail.applicationUserOrganisationUnits, 'organisationUnitName'))\r\n            )*/\r\n        } catch (e) {\r\n            await Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: 'An error occurred fetching services!',\r\n            });\r\n        }\r\n    }, []);\r\n    const loadPatientVisits = useCallback(async () => {\r\n        try {\r\n            const response = await axios.get(`${baseUrl}patient/visit/visit-detail/${patientObj.id}`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            setPatientVisits(response.data);\r\n            response.data.map((visits)=> {\r\n                if(visits.checkOutDate===null){\r\n                    setCheckinStatus(true)\r\n                }\r\n            })\r\n\r\n\r\n        } catch (e) {\r\n            await Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: 'An error occurred fetching services!',\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    const checkForBiometricsModule =()=>{\r\n        axios\r\n            .get(`${baseUrl}modules/check?moduleName=biometric`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                if(response.data===true){\r\n                    setBiometricsModuleInstalled(true);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                //console.log(error);\r\n            });\r\n\r\n    }\r\n    const loadUserDetails = () =>{\r\n        axios.get(`${baseUrl}account`).then((response)=>{\r\n\r\n        }).catch((error)=>{\r\n\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadUserDetails();\r\n        loadServices();\r\n        loadPatientVisits();\r\n        checkForBiometricsModule();\r\n    }, [loadServices, loadPatientVisits]);\r\n\r\n    let visitTypesRows = null;\r\n    if (services && services.length > 0) {\r\n        visitTypesRows = services.map((service, index) => (\r\n            <MenuItem key={service.moduleServiceCode} value={service.moduleServiceCode}>{service.moduleServiceName}</MenuItem>\r\n        ));\r\n    }\r\n\r\n    const onChangeDate = (date) => {\r\n        console.log(date.target.value)\r\n        const newDate = moment(new Date(date.target.value)).format(\"yyyy-MM-dd hh:mm\");\r\n        setCheckInDate(newDate);\r\n        console.log(newDate);\r\n    };\r\n\r\n\r\n    const columns = [\r\n        {\r\n            field: 'checkInDate',\r\n            headerName: 'Checked In Date',\r\n            width: 200,\r\n            editable: false,\r\n        },\r\n        {\r\n            field: 'checkOutDate',\r\n            headerName: 'Check Out Date',\r\n            width: 200,\r\n            editable: false,\r\n        },\r\n        {\r\n            field: 'service',\r\n            headerName: 'Service',\r\n            width: 200,\r\n            editable: false,\r\n        },\r\n        {\r\n            field: 'status',\r\n            headerName: 'Status',\r\n            width: 200,\r\n            editable: false,\r\n        }\r\n    ];\r\n\r\n    const panes = [\r\n        { menuItem: 'Patient Visit', render: () =>\r\n                <Tab.Pane>\r\n\r\n                    <MaterialTable\r\n                        title=\"\"\r\n                        columns={[\r\n                            {\r\n                                title: \"Checked In Date\",\r\n                                field: \"checkInDate\", filtering: false,\r\n                                headerStyle: {\r\n                                    backgroundColor: \"#039be5\",\r\n                                    border:'2px solid #fff',\r\n                                    paddingRight:'30px'\r\n                                }\r\n                            },\r\n                            { title: \"Check Out Date\", field: \"checkOutDate\", filtering: false  },\r\n                            { title: \"Service\", field: \"service\", filtering: false  },\r\n                            { title: \"Status\", field: \"status\", filtering: false },\r\n                        ]}\r\n                        isLoading={loading}\r\n                        data={patientVisits.map((row) => ({\r\n                            checkInDate: moment(row.checkInDate).format(\"YYYY-MM-DD h:mm a\"),\r\n                            checkOutDate: row.checkOutDate?moment(row.checkOutDate).format(\"YYYY-MM-DD h:mm a\"):\"Visit Ongoing\",\r\n                            service:row.service,\r\n                            status:(<Label color={row.status ==='COMPLETED' ? 'green' : 'red'} size=\"mini\">{row.status}</Label>),\r\n\r\n                        }))}\r\n\r\n                        options={{\r\n                            headerStyle: {\r\n                                backgroundColor: \"#014d88\",\r\n                                color: \"#fff\",\r\n                                fontSize:'16px',\r\n                                padding:'10px',\r\n                                fontWeight:'bold'\r\n                            },\r\n                            rowStyle: {\r\n                                color: 'rgba(0,0,0,.87)',\r\n                                fontFamily:`'poppins', sans-serif`\r\n                            },\r\n                            searchFieldStyle: {\r\n                                width : '200%',\r\n                                margingLeft: '250px',\r\n                            },\r\n                            filtering: false,\r\n                            exportButton: false,\r\n                            searchFieldAlignment: 'left',\r\n                            pageSizeOptions:[10,20,100],\r\n                            pageSize:10,\r\n                            debounceInterval: 400\r\n                        }}\r\n                    />\r\n                </Tab.Pane>\r\n        },\r\n\r\n        { menuItem: permissions.includes('view_patient_appointment') || permissions.includes(\"all_permission\") ? 'Appointments' : \"\", render: () =>\r\n                permissions.includes('view_patient_appointment') || permissions.includes(\"all_permission\") ?\r\n                    <Tab.Pane>\r\n                        <div style={{ height: 400, width: '100%' }}>\r\n                            <DataGrid\r\n                                rows={appointments}\r\n                                columns={appointmentColumns}\r\n                                pageSize={5}\r\n                                rowsPerPageOptions={[5]}\r\n                                checkboxSelection\r\n                                disableSelectionOnClick\r\n                            />\r\n                        </div>\r\n                    </Tab.Pane>\r\n                    :\"\"\r\n        },\r\n\r\n                { menuItem: permissions.includes('view_patient_appointment') && biometricsModuleInstalled || permissions.includes(\"all_permission\")  && biometricsModuleInstalled? 'Biometrics' : \"\", render: () =>\r\n                        permissions.includes('view_patient_appointment') || permissions.includes(\"all_permission\") ?\r\n                            <Tab.Pane>\r\n                                <div style={{ minHeight: 400, width: '100%' }}>\r\n                                    <Biometrics patientId={patientObj.id} updatePatientBiometricStatus={updatePatientBiometricStatus}/>\r\n                                </div>\r\n                            </Tab.Pane>\r\n                            :\"\"\r\n                }\r\n\r\n\r\n\r\n    ];\r\n\r\n    const handleCheckIn = () => {\r\n        setModal(true);\r\n    };\r\n    const handleCheckOut = () => {\r\n        setModalCheckOut(true);\r\n    };\r\n\r\n    const onCancelCheckIn = () => {\r\n        setModal(false);\r\n    };\r\n    const onCancelCheckOut = () => {\r\n        setModalCheckOut(false);\r\n    };\r\n    const onDelete = () => {\r\n\r\n    };\r\n/*    const handleInputChangeService = (e) => {\r\n        setSelectedServices({ ...selectedServices, [e.target.name]: e.target.value });\r\n    };*/\r\n    //console.lo(selectedServices)\r\n\r\n    const onSubmit = async (data) => {\r\n        try {\r\n            const today = new Date();\r\n            const visitDetails = await axios.get(`${baseUrl}patient/visit/visit-detail/${patientObj.id}`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            const visitDetail = visitDetails.data;\r\n            const pendingVisit = visitDetail.find(obj => obj.status == \"PENDING\");\r\n            let visit = null;\r\n            if (!pendingVisit) {\r\n                const visitResponse = await axios.post(`${baseUrl}patient/visit`, {\r\n                    \"personId\": patientObj.id,\r\n                    \"visitStartDate\": today\r\n                }, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n                visit = visitResponse.data;\r\n            } else {\r\n                visit = pendingVisit;\r\n            }\r\n            await axios.post(`${baseUrl}patient/encounter`, {\r\n                \"encounterDate\": today,\r\n                \"personId\": patientObj.id,\r\n                \"serviceCode\": data.VisitType,\r\n                \"status\": \"PENDING\",\r\n                \"visitId\": visit.id\r\n            }, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            setModal(false);\r\n            await Swal.fire({\r\n                icon: 'success',\r\n                text: 'CheckedIn successfully',\r\n                timer: 1500\r\n            });\r\n        } catch (e) {\r\n            await Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: 'An error occurred while checking in Patient!',\r\n            });\r\n        }\r\n    };\r\n    const onError = async () => {\r\n        await Swal.fire({\r\n            icon: 'error',\r\n            title: 'Oops...',\r\n            text: 'An error occurred while checking in Patient!',\r\n        });\r\n    };\r\n\r\n    let checkInServicesID = [];\r\n    /**** Submit Button For CheckIN  */\r\n    const handleSubmitCheckIn = (e) => {\r\n        e.preventDefault();\r\n        //Check if selected service object is empty before creating visit and posting.\r\n        let m = moment(checkInDate, \"yyyy-MM-DD hh:mm\").format('yyyy-MM-DD H:mm');\r\n        if(selectedServices.selected.length > 0 && moment(m).isValid()){\r\n            selectedServices.selected.length > 0 && selectedServices.selected.map((service)=> {\r\n                checkInServicesID.push(_.find(allServices,{moduleServiceCode:service}).id)\r\n            });\r\n\r\n            checkInObj.serviceIds= checkInServicesID\r\n            //Ensure date time is in 24hr format\r\n            checkInObj.visitDto.checkInDate = moment(checkInDate, \"yyyy-MM-DD hh:mm\").format('yyyy-MM-DD HH:mm');\r\n            axios.post(`${baseUrl}patient/visit/checkin`, checkInObj,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n\r\n            )\r\n                .then(response => {\r\n                    toast.success(\"Patient Check-In successful\");\r\n                    setCheckinStatus(true)\r\n                    onCancelCheckIn()\r\n                    loadPatientVisits()\r\n                })\r\n                .catch(error => {\r\n                    console.log(error)\r\n                    toast.error(\"Something went wrong\");\r\n                    onCancelCheckIn()\r\n                });\r\n        }else{\r\n            toast.error(\"Kindly check the form for a valid date and selected services\");\r\n        }\r\n\r\n    }\r\n\r\n    /**** Submit Button Processing  */\r\n    const handleSubmitCheckOut = (e) => {\r\n        e.preventDefault();\r\n        const getVisitID= patientVisits.find((visits)=> visits.status==='PENDING')\r\n\r\n        axios.put(`${baseUrl}patient/visit/checkout/${getVisitID.id}`,getVisitID.id,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n\r\n        )\r\n            .then(response => {\r\n                toast.success(\"Record save successful\");\r\n                setCheckinStatus(false)\r\n                onCancelCheckOut()\r\n                loadPatientVisits()\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n                toast.error(\"Something went wrong\");\r\n                onCancelCheckOut()\r\n            });\r\n    }\r\n    const onServiceSelect = (selectedValues) => {\r\n        setSelectedServices({\"selected\":selectedValues});\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Card>\r\n                <CardContent>\r\n\r\n                    <PatientCard patientObj={patientObj} permissions={permissions} patientBiometricStatus={patientBiometricStatus}/>\r\n                    <Card style={{marginTop:'10px',boxShadow: 'rgba(99, 99, 99, 0.2) 0px 2px 8px 0px'}}>\r\n                        <CardContent>\r\n                            <div className=\"row\">\r\n                                <div className=\"mb-3 col-md-3\">\r\n                                    &nbsp;\r\n                                </div>\r\n                                <div className=\"mb-3 col-md-3\">\r\n                                    &nbsp;\r\n                                </div>\r\n                                <div className=\"mb-3 col-md-3\">\r\n                                    &nbsp;\r\n                                </div>\r\n                                <div className=\"mb-3 col-md-3\">\r\n                                    <Link to={\"/\"} >\r\n                                        <MatButton\r\n                                            className=\" float-right mr-1\"\r\n                                            variant=\"contained\"\r\n                                            floated=\"left\"\r\n                                            startIcon={<TiArrowBack  />}\r\n                                            style={{backgroundColor:\"rgb(153, 46, 98)\", color:'#fff', height:'35px'}}\r\n                                        >\r\n                                            <span style={{ textTransform: \"capitalize\" }}>Back</span>\r\n                                        </MatButton>\r\n                                    </Link>\r\n\r\n                                    {permissions.includes('patient_check_in') || permissions.includes(\"all_permission\") ? (\r\n                                            <>\r\n                                                {checkinStatus===false ? (\r\n                                                        <Button\r\n                                                            variant=\"contained\"\r\n                                                            style={{ backgroundColor: \"rgb(4, 196, 217)\", fontSize:'14PX', fontWeight:'bold', height:'35px' }}\r\n                                                            onClick={handleCheckIn}\r\n                                                            className=\" float-right mr-1\"\r\n                                                        >\r\n                                                            <span style={{ textTransform: \"capitalize\" }}>CheckIn</span>\r\n                                                        </Button>\r\n                                                    )\r\n                                                    :\r\n                                                    \"\"\r\n                                                }\r\n                                            </>\r\n                                        )\r\n                                        :\"\"\r\n                                    }\r\n                                    {checkinStatus===true ? (\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                style={{ backgroundColor: \"green\", fontSize:'14PX', fontWeight:'bold', height:'35px' }}\r\n                                                onClick={handleCheckOut}\r\n                                                className=\" float-right mr-1\"\r\n                                            >\r\n                                                <span style={{ textTransform: \"capitalize\" }}>Check Out</span>\r\n                                            </Button>\r\n                                        )\r\n                                        :\r\n                                        \"\"\r\n                                    }\r\n\r\n                                </div>\r\n                            </div>\r\n                            <Tab panes={panes} />\r\n                        </CardContent>\r\n                    </Card>\r\n\r\n\r\n                </CardContent>\r\n            </Card>\r\n            <Modal  size=\"lg\" style={{maxWidth: '900px'}} isOpen={modal} toggle={onCancelCheckIn}  className={classes.checkinModal}>\r\n                    <ModalHeader toggle={onCancelCheckIn}><h5 style={{fontWeight:\"bold\",fontSize:'30px',color:'#992E62'}}>Select Check-In Service</h5></ModalHeader>\r\n                    <ModalBody>\r\n                        <form onSubmit={handleSubmitCheckIn}>\r\n                            <Paper\r\n                                style={{\r\n                                    display: \"grid\",\r\n                                    gridRowGap: \"20px\",\r\n                                    padding: \"20px\",\r\n                                    margin: \"10px 10px\",\r\n                                }}>\r\n                                <Grid container spacing={2}>\r\n                                    <Grid item xs={12}>\r\n                                        <FormGroup style={{width:'100%'}} className={classes.checkInDatePicker}>\r\n                                            <LocalizationProvider dateAdapter={AdapterDateFns} >\r\n                                                <Label for=\"post-services\" style={{color:'#014d88',fontWeight:'bolder',fontSize:'18px'}}>Check-In Date *</Label>\r\n                                                <DesktopDateTimePicker\r\n                                                    renderInput={(params) =>\r\n                                                        <TextField\r\n                                                            {...params}\r\n\r\n                                                            sx={{\r\n                                                                /*label:{ color:'#014d88',fontWeight:'bolder',fontSize:'18px' }*/\r\n                                                                input:{fontSize:'14px'},\r\n                                                            }}\r\n                                                            fullWidth\r\n                                                        />\r\n                                                    }\r\n                                                    value={checkInDate}\r\n                                                    onChange={(newValue) => {\r\n                                                        setCheckInDate(newValue);\r\n                                                    }}\r\n                                                    maxDate={new Date()}\r\n                                                    maxTime={new Date()}\r\n                                                    style={{width:'100%'}}\r\n                                                />\r\n                                            </LocalizationProvider>\r\n                                        </FormGroup>\r\n                                    </Grid>\r\n                                    {/*                                <Grid item xs={8}>\r\n\r\n                                    <FormControl >\r\n                                        <Label for=\"dateOfRegistration\">Select service </Label>\r\n                                        <Autocomplete\r\n                                            multiple\r\n                                            id=\"checkboxes-tags-demo\"\r\n                                            options={services}\r\n                                            //disableCloseOnSelect\r\n                                            getOptionLabel={(option) => option.moduleServiceName}\r\n                                            onChange={(e, i) => {\r\n                                                console.log(i)\r\n                                                setSelectedServices({ ...selectedServices, checkInServices: i });\r\n                                            }}\r\n                                            renderOption={(props, option, { selected }) => (\r\n                                                <li {...props}>\r\n                                                    <Checkbox\r\n                                                        icon={icon}\r\n                                                        checkedIcon={checkedIcon}\r\n                                                        style={{ marginRight: 8 }}\r\n                                                        checked={selected}\r\n                                                    />\r\n                                                    {option.moduleServiceName}\r\n                                                </li>\r\n                                            )}\r\n                                            style={{ width: 400 }}\r\n                                            renderInput={(params) => (\r\n                                                <TextField {...params} label=\"Services\" />\r\n                                            )}\r\n                                        />\r\n\r\n                                    </FormControl>\r\n                                </Grid>*/}\r\n                                    <Grid item xs={12}>\r\n                                        <FormGroup>\r\n                                            <Label for=\"post-services\" style={{color:'#014d88',fontWeight:'bolder',fontSize:'18px'}}><h5 style={{fontWeight:\"bold\",fontSize:'30px',color:'#992E62'}}>Check-In Service *</h5></Label>\r\n                                            <DualListBox\r\n                                                options={services}\r\n                                                onChange={onServiceSelect}\r\n                                                selected={selectedServices.selected}\r\n                                            />\r\n                                        </FormGroup>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid container spacing={2}>\r\n                                    <Grid item xs={12}>\r\n                                        <Button type={\"submit\"} variant=\"contained\" color={\"primary\"}>Submit</Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Paper>\r\n                        </form>\r\n                    </ModalBody>\r\n            </Modal>\r\n            {/* Modal for CheckOut Patient */}\r\n            <Modal isOpen={modalCheckOut} toggle={onCancelCheckOut} className={classes.checkinModal} style={{maxWidth: '900px',height:\"800px\"}}>\r\n                <ModalHeader toggle={onCancelCheckOut}><h5 style={{fontWeight:\"bold\",fontSize:'30px',color:'#014d88'}}>Check Out </h5></ModalHeader>\r\n                <ModalBody>\r\n                    <form >\r\n                        <Paper\r\n                            style={{\r\n                                display: \"grid\",\r\n                                gridRowGap: \"20px\",\r\n                                padding: \"20px\",\r\n                                margin: \"10px 10px\",\r\n                            }}>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item xs={12}>\r\n                                    <h5 style={{color:'#992E62',fontSize:\"20px\", fontWeight:'bold'}}>Are you sure you want to check-out patient?</h5>\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <FormGroup style={{width:'100%'}} className={classes.checkInDatePicker}>\r\n                                        <LocalizationProvider dateAdapter={AdapterDateFns} >\r\n                                            <Label for=\"post-services\" style={{color:'#014d88',fontWeight:'bolder',fontSize:'16px'}}>Check-Out Date *</Label>\r\n                                            <DesktopDateTimePicker\r\n                                                renderInput={(params) =>\r\n                                                    <TextField\r\n                                                        {...params}\r\n\r\n                                                        sx={{\r\n                                                            /*label:{ color:'#014d88',fontWeight:'bolder',fontSize:'18px' }*/\r\n                                                            input:{fontSize:'14px'},\r\n                                                        }}\r\n                                                        fullWidth\r\n                                                    />\r\n                                                }\r\n                                                value={checkOutDate}\r\n                                                onChange={(newValue) => {\r\n                                                    setCheckOutDate(newValue);\r\n                                                }}\r\n                                                maxDate={new Date()}\r\n                                                maxTime={new Date()}\r\n                                                style={{width:'100%'}}\r\n                                            />\r\n                                        </LocalizationProvider>\r\n                                    </FormGroup>\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item xs={12}>\r\n                                    <Button type={\"submit\"} onClick={handleSubmitCheckOut} variant=\"contained\" color={\"primary\"}>Yes</Button>\r\n                                    <Button  onClick={onCancelCheckOut} variant=\"contained\" style={{backgroundColor:'#992E62',color:\"#fff\",marginLeft:\"10px\"}}>Cancel</Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Paper>\r\n                    </form>\r\n                </ModalBody>\r\n            </Modal>\r\n            {/* End of Checkout Modal */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PatientDashboard;\r\n","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\patient-module\\src\\main\\webapp\\components\\RegisterPatient.js",["133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154"],"import React, {useCallback, useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport {format} from 'date-fns';\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Form, FormGroup, Label, Spinner,} from \"reactstrap\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {library} from '@fortawesome/fontawesome-svg-core'\r\nimport {faCheckSquare, faCoffee, faEdit, faTrash} from '@fortawesome/free-solid-svg-icons'\r\nimport {yupResolver} from '@hookform/resolvers/yup';\r\nimport * as yup from \"yup\";\r\nimport * as moment from 'moment';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, CardContent} from \"@material-ui/core\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport {ToastContainer, toast} from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport {Link, useHistory, useLocation} from \"react-router-dom\";\r\nimport {TiArrowBack} from 'react-icons/ti'\r\nimport {useForm} from \"react-hook-form\";\r\nimport {token, url as baseUrl } from \"../../../api\";\r\nimport PhoneInput from 'react-phone-input-2'\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport _ from 'lodash';\r\n\r\nlibrary.add(faCheckSquare, faCoffee, faEdit, faTrash);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\"\r\n    },\r\n    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 300,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        marginBottom: 20,\r\n        flexGrow: 1,\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n\r\n    },\r\n    demo: {\r\n        backgroundColor: theme.palette.background.default,\r\n    },\r\n    inline: {\r\n        display: \"inline\",\r\n    },\r\n}));\r\n\r\nconst schema = yup.object().shape({\r\n    dateOfRegistration: yup.date().required(),\r\n    hospitalNumber: yup.string().required(),\r\n    firstName: yup.string().required(),\r\n    middleName: yup.string().nullable(),\r\n    lastName: yup.string().required(),\r\n    sex: yup.number().required(),\r\n    employmentStatus: yup.number().required(),\r\n    highestQualification: yup.number().required(),\r\n    maritalStatus: yup.number().required(),\r\n    dob: yup.date().required(),\r\n    dateOfBirth: yup.string().required(),\r\n    age: yup.number(),\r\n    pnumber: yup.string().required(),\r\n    altPhonenumber: yup.string().nullable(),\r\n    email: yup.string().nullable(),\r\n    address: yup.string().nullable(),\r\n    landmark: yup.string().nullable(),\r\n    countryId: yup.number().required(),\r\n    stateId: yup.number().required(),\r\n    district: yup.number().nullable(),\r\n});\r\n\r\nconst RegisterPatient = (props) => {\r\n    const { register, watch, setValue, getValues, setError, handleSubmit, formState: { errors } } = useForm({\r\n        resolver: yupResolver(schema),\r\n    });\r\n    const watchPnumber= watch(\"pnumber\", false);\r\n    const watchAltPhonenumber= watch(\"altPhonenumber\", false);\r\n    const watchContactPhoneNumber= watch(\"contactPhoneNumber\", false);\r\n    const watchShowAge = watch(\"age\", false);\r\n    const [today, setToday] = useState(new Date().toISOString().substr(0, 10).replace('T', ' '));\r\n    const [contacts, setContacts] = useState([]);\r\n    const [saving, setSaving] = useState(false);\r\n    const [ageDisabled, setAgeDisabled] = useState(true);\r\n    const [showRelative, setShowRelative] = useState(false);\r\n    const [editRelative, setEditRelative] = useState(null);\r\n    const [genders, setGenders]= useState([]);\r\n    const [sexOptions, setSexOptions]= useState([]);\r\n    const [maritalStatusOptions, setMaritalStatusOptions]= useState([]);\r\n    const [educationOptions, setEducationOptions]= useState([]);\r\n    const [occupationOptions, setOccupationOptions]= useState([]);\r\n    const [relationshipOptions, setRelationshipOptions]= useState([]);\r\n    const [topLevelUnitCountryOptions, settopLevelUnitCountryOptions]= useState([]);\r\n    const [stateUnitOptions, setStateUnitOptions]= useState([]);\r\n    const [districtUnitOptions, setDistrictUnitOptions]= useState([]);\r\n    const [checkHospitalNumberError, setCheckHospitalNumberError] = useState(false);\r\n    const userDetail = props.location && props.location.state ? props.location.state.user : null;\r\n    const[patientFacilityId,setPatientFacilityId]=useState(null);\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n\r\n    const location = useLocation();\r\n    const locationState = location.state;\r\n    let patientId = null;\r\n    patientId = locationState ? locationState.patientId : null;\r\n\r\n\r\n    const getNames = (relationship) => {\r\n        const surname = relationship.surname;\r\n        const firstName = relationship.firstName;\r\n        const otherName = relationship.otherName ? relationship.otherName : '';\r\n        return surname + ', ' + firstName + ' ' + otherName;\r\n    }\r\n    const getRelationship = (relationshipId) => {\r\n        const relationship = relationshipOptions.find(obj => obj.id == relationshipId);\r\n        return relationship ? relationship.display : '';\r\n    };\r\n    const getPhoneContactPoint = (contactPoint) => {\r\n        return contactPoint ? contactPoint.value : '';\r\n    };\r\n    const getAddress = (address) => {\r\n        return address && address.line && address.line.length > 0 ? address.line[0] : '';\r\n    };\r\n    const getPatient = useCallback(async () => {\r\n        if (patientId) {\r\n            const response = await axios.get(`${baseUrl}patient/${patientId}`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            const sexCodeset = await axios.get(`${baseUrl}application-codesets/v2/SEX`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            const patient = response.data;\r\n            const contacts = patient.contact ? patient.contact : [];\r\n            setContacts(contacts.contact);\r\n            const identifiers = patient.identifier;\r\n            const address = patient.address;\r\n            const contactPoint = patient.contactPoint;\r\n            const hospitalNumber = identifiers.identifier.find(obj => obj.type == 'HospitalNumber');\r\n            const phone = contactPoint.contactPoint.find(obj => obj.type == 'phone');\r\n            const email = contactPoint.contactPoint.find(obj => obj.type == 'email');\r\n            const altphone = contactPoint.contactPoint.find(obj => obj.type == 'altphone');\r\n            const country = address && address.address && address.address.length > 0 ? address.address[0] : null;\r\n            const gender = patient.gender;\r\n            const sex = _.find(sexCodeset.data, {'display':patient.sex}).id;\r\n            const employmentStatus = patient.employmentStatus;\r\n            const education = patient.education;\r\n            const maritalStatus = patient.maritalStatus;\r\n            setPatientFacilityId(patient.facilityId)\r\n            setValue('dateOfRegistration', patient.dateOfRegistration);\r\n            setValue('facilityId', patient.facilityId);\r\n            setValue('ninNumber', patient.ninNumber);\r\n            setValue('firstName', patient.firstName);\r\n            setValue('middleName', patient.otherName);\r\n            setValue('lastName', patient.surname);\r\n            setValue('hospitalNumber', hospitalNumber ? hospitalNumber.value : '');\r\n            setValue('maritalStatus', maritalStatus.id);\r\n            setValue('employmentStatus', employmentStatus.id);\r\n            //setValue('gender', gender.id);\r\n            setValue('sex', sex);\r\n            setValue('highestQualification', education.id);\r\n            setValue('dob', format(new Date(patient.dateOfBirth), 'yyyy-MM-dd'));\r\n            if (country) {\r\n                setValue('countryId', country.countryId);\r\n                const stateOptions = await loadOrganisationUnitsByParentId(country.countryId);\r\n                setStateUnitOptions(stateOptions);\r\n                setValue('stateId', country.stateId);\r\n                const districtOptions = await loadOrganisationUnitsByParentId(country.stateId);\r\n                setDistrictUnitOptions(districtOptions);\r\n                setValue('district', country.district);\r\n                setValue('address', country.city);\r\n                setValue('landmark', country.line[0]);\r\n            }\r\n            setValue('pnumber', phone ? phone.value : \"+234\");\r\n            setValue('email', email ? email.value : null);\r\n            setValue('altPhonenumber', altphone ? altphone.value : \"+234\");\r\n        }\r\n    }, []);\r\n    const handleAddRelative = () => {\r\n        setShowRelative(true);\r\n    };\r\n    const checkHospitalNumber = (e) =>{\r\n        axios.post(`${baseUrl}patient/exist/hospital-number`,e.target.value,{ responseType: 'text',headers: {\"Authorization\" : `Bearer ${token}`,'Content-Type': 'text/plain'} }).then(response=>{\r\n            console.log(response.data)\r\n            if(response.data){\r\n                toast.error(\"Error!!  Hospital Number Exists\");\r\n                setCheckHospitalNumberError(true)\r\n            }else{\r\n                setCheckHospitalNumberError(false)\r\n            }\r\n        }).catch((error)=>{\r\n            console.log(error)\r\n        })\r\n    }\r\n    const handleSaveRelationship = (e) => {\r\n        const relationshipType = getValues(\"relationshipType\");\r\n        const cfirstName = getValues(\"cfirstName\");\r\n        const cmiddleName = getValues(\"cmiddleName\");\r\n        const clastName = getValues(\"clastName\");\r\n        const contactPhoneNumber = getValues(\"contactPhoneNumber\");\r\n        const contactEmail = getValues(\"contactEmail\");\r\n        const contactAddress = getValues(\"contactAddress\");\r\n        if (!relationshipType) {\r\n            setError(\"relationshipType\", {  type: 'custom', message: 'Relationship is required' }, { shouldFocus: true });\r\n            return;\r\n        }\r\n        if (!cfirstName) {\r\n            setError(\"cfirstName\", {  type: 'custom', message: 'FirstName is required' }, { shouldFocus: true });\r\n            return;\r\n        }\r\n        if (!clastName) {\r\n            setError(\"clastName\", {  type: 'custom', message: 'LastName is required' }, { shouldFocus: true });\r\n            return;\r\n        }\r\n\r\n        const contact = {\r\n            \"address\": {\r\n                \"line\": [\r\n                    contactAddress\r\n                ],\r\n            },\r\n            \"contactPoint\": {\r\n                \"type\": \"phone\",\r\n                \"value\": contactPhoneNumber\r\n            },\r\n            \"firstName\": cfirstName,\r\n            \"fullName\": cfirstName + ' ' + cmiddleName + ' ' + clastName,\r\n            \"relationshipId\": relationshipType,\r\n            \"surname\": clastName,\r\n            \"otherName\": cmiddleName\r\n        };\r\n\r\n        if (editRelative != null) {\r\n            contacts.splice(editRelative, 1);\r\n            setContacts(contacts.concat(contact));\r\n        } else {\r\n            if(contacts === undefined){\r\n                setContacts([].concat(contact));\r\n            }else{\r\n                setContacts(contacts.concat(contact));\r\n            }\r\n\r\n        }\r\n        setShowRelative(false);\r\n    };\r\n    const handleCancelSaveRelationship = () => {\r\n        setShowRelative(false);\r\n    }\r\n    const onSubmit = async (data) => {\r\n        if(_.find(errors,function (error){return error;})){\r\n            toast.error(\"Failed to save form kindly check the form for errors\", {position: toast.POSITION.TOP_RIGHT});\r\n        }else{\r\n            try {\r\n                const patientForm = {\r\n                    active: true,\r\n                    address: [\r\n                        {\r\n                            \"city\": data.address,\r\n                            \"countryId\": data.countryId,\r\n                            \"district\": data.district,\r\n                            \"line\": [\r\n                                data.landmark\r\n                            ],\r\n                            \"organisationUnitId\": 0,\r\n                            \"postalCode\": \"\",\r\n                            \"stateId\": data.stateId\r\n                        }\r\n                    ],\r\n                    contact: contacts,\r\n                    contactPoint: [],\r\n                    dateOfBirth: new Date(data.dob),\r\n                    deceased: false,\r\n                    deceasedDateTime: null,\r\n                    firstName: data.firstName,\r\n                    sexId: data.sex,\r\n                    /*genderId:data.sex,*/\r\n                    identifier: [\r\n                        {\r\n                            \"assignerId\": 1,\r\n                            \"type\": \"HospitalNumber\",\r\n                            \"value\": data.hospitalNumber\r\n                        }\r\n                    ],\r\n                    ninNumber: data.ninNumber,\r\n                    otherName: data.middleName,\r\n                    maritalStatusId: data.maritalStatus,\r\n                    surname: data.lastName,\r\n                    educationId: data.highestQualification,\r\n                    employmentStatusId: data.employmentStatus,\r\n                    dateOfRegistration: data.dateOfRegistration,\r\n                    isDateOfBirthEstimated: data.dateOfBirth == \"Actual\" ? false : true\r\n                };\r\n                const phone = {\r\n                    \"type\": \"phone\",\r\n                    \"value\": data.pnumber\r\n                };\r\n                if (data.email) {\r\n                    const email = {\r\n                        \"type\": \"email\",\r\n                        \"value\": data.email\r\n                    }\r\n                    patientForm.contactPoint.push(email);\r\n                }\r\n                if (data.altPhonenumber) {\r\n                    const altPhonenumber = {\r\n                        \"type\": \"altphone\",\r\n                        \"value\": data.altPhonenumber\r\n                    }\r\n                    patientForm.contactPoint.push(altPhonenumber);\r\n                }\r\n                patientForm.contactPoint.push(phone);\r\n                if (patientId) {\r\n                    patientForm.id = null;\r\n                    patientForm.facilityId = patientFacilityId;\r\n                    const response = await axios.put(`${baseUrl}patient/${patientId}`, patientForm, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n                } else {\r\n                    const response = await axios.post(`${baseUrl}patient`, patientForm, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n                }\r\n                toast.success(\"Patient Register successful\");\r\n                history.push('/');\r\n            } catch (e) {\r\n                console.log(e);\r\n                toast.error(\"An error occured while registering a patient !\", {\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            }\r\n        }\r\n\r\n    };\r\n    const onError = (errors) => {\r\n        console.error(errors)\r\n    }\r\n    const handleEditRelative = (relative, index) => {\r\n        setValue(\"relationshipType\", relative.relationshipId);\r\n        setValue(\"cfirstName\", relative.firstName);\r\n        setValue(\"cmiddleName\", relative.otherName);\r\n        setValue(\"clastName\", relative.surname);\r\n        setValue(\"contactPhoneNumber\", relative.contactPoint ? relative.contactPoint.value : '');\r\n        setValue(\"contactAddress\", relative.address && relative.address.line && relative.address.line.length > 0 ? relative.address.line[0] : '');\r\n        setShowRelative(true);\r\n        setEditRelative(index);\r\n    };\r\n    const handleDeleteRelative = (index) => {\r\n        setTimeout(() => {\r\n            contacts.splice(index, 1);\r\n            setContacts(contacts);\r\n            setShowRelative(true);\r\n            setShowRelative(false);\r\n        }, 500);\r\n    };\r\n\r\n    const loadSexes = useCallback(async () => {\r\n        try {\r\n            const response = await axios.get(`${baseUrl}application-codesets/v2/SEX`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            await setSexOptions(response.data);\r\n        } catch (e) {\r\n            toast.error(\"An error occured while fetching sex codesets !\", {\r\n                position: toast.POSITION.TOP_RIGHT\r\n            });\r\n        }\r\n    }, []);\r\n    const loadMaritalStatus = useCallback(async () => {\r\n        try {\r\n            const response = await axios.get(`${baseUrl}application-codesets/v2/MARITAL_STATUS`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            setMaritalStatusOptions(response.data);\r\n        } catch (e) {\r\n            toast.error(\"An error occured while fetching marital codesets !\", {\r\n                position: toast.POSITION.TOP_RIGHT\r\n            });\r\n        }\r\n    }, []);\r\n    const loadEducation = useCallback(async () => {\r\n        try {\r\n            const response = await axios.get(`${baseUrl}application-codesets/v2/EDUCATION`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            setEducationOptions(response.data);\r\n        } catch (e) {\r\n            toast.error(\"An error occured while fetching education codesets !\", {\r\n                position: toast.POSITION.TOP_RIGHT\r\n            });\r\n        }\r\n    }, []);\r\n    const loadOccupation = useCallback(async () => {\r\n        try {\r\n            const response = await axios.get(`${baseUrl}application-codesets/v2/OCCUPATION`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            setOccupationOptions(response.data);\r\n        } catch (e) {\r\n            toast.error(\"An error occured while fetching occupation codesets !\", {\r\n                position: toast.POSITION.TOP_RIGHT\r\n            });\r\n        }\r\n    }, []);\r\n    const loadRelationships = useCallback(async () => {\r\n      try {\r\n          const response = await axios.get(`${baseUrl}application-codesets/v2/RELATIONSHIP`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n          setRelationshipOptions(response.data);\r\n      } catch (e) {\r\n          toast.error(\"An error occured while fetching relationship codesets !\", {\r\n              position: toast.POSITION.TOP_RIGHT\r\n          });\r\n      }\r\n    }, []);\r\n    const loadTopLevelCountry = useCallback(async () => {\r\n        const response = await axios.get(`${baseUrl}organisation-units/parent-organisation-units/0`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n        settopLevelUnitCountryOptions(response.data);\r\n    }, []);\r\n    const loadOrganisationUnitsByParentId = async (parentId) => {\r\n        const response = await axios.get(`${baseUrl}organisation-units/parent-organisation-units/${parentId}`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n        return response.data;\r\n    };\r\n    const onCountryChange = async (e) => {\r\n        if (e.target.value) {\r\n            const stateOptions = await loadOrganisationUnitsByParentId(e.target.value);\r\n            setStateUnitOptions(stateOptions);\r\n        } else {\r\n            setStateUnitOptions([]);\r\n        }\r\n    };\r\n    const onStateChange = async (e) => {\r\n        if (e.target.value) {\r\n            const districtOptions = await loadOrganisationUnitsByParentId(e.target.value);\r\n            setDistrictUnitOptions(districtOptions);\r\n        } else {\r\n            setDistrictUnitOptions([]);\r\n        }\r\n    };\r\n    \r\n    const handleDobChange = (e) => {\r\n        if (e.target.value) {\r\n            const today = new Date();\r\n            const birthDate = new Date(e.target.value);\r\n            let age_now = today.getFullYear() - birthDate.getFullYear();\r\n            const m = today.getMonth() - birthDate.getMonth();\r\n            if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n                age_now--;\r\n            }\r\n            setValue('age', age_now);\r\n        } else {\r\n            setValue('age', null);\r\n        }\r\n    }\r\n\r\n    const handleDateOfBirthChange = (e) => {\r\n        if (e.target.value == \"Actual\") {\r\n            setAgeDisabled(true);\r\n        } else if (e.target.value == \"Estimated\") {\r\n            setAgeDisabled(false);\r\n        }\r\n    }\r\n\r\n    const handleAgeChange = (e) => {\r\n        if (!ageDisabled && e.target.value) {\r\n            setValue('age', e.target.value);\r\n            const currentDate = new Date();\r\n            currentDate.setDate(15);\r\n            currentDate.setMonth(5);\r\n            const estDob = moment(currentDate.toISOString());\r\n            const dob = estDob.add((e.target.value * -1), 'years');\r\n            setValue('dob', format(new Date(dob.toDate()), 'yyyy-MM-dd'));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadSexes();\r\n        loadMaritalStatus();\r\n        loadEducation();\r\n        loadOccupation();\r\n        loadRelationships();\r\n        loadTopLevelCountry();\r\n        getPatient();\r\n    }, [loadSexes, loadMaritalStatus, loadEducation, loadOccupation, loadRelationships, loadTopLevelCountry, getPatient]);\r\n\r\n    let genderRows = null;\r\n    let sexRows = null;\r\n    let maritalStatusRows = null;\r\n    let educationRows = null;\r\n    let occupationRows = null;\r\n    let relationshipRows = null;\r\n    let topLevelUnitCountryRows = null;\r\n    let stateRows = null;\r\n    let districtRows = null;\r\n    if (sexOptions && sexOptions.length > 0) {\r\n        sexRows = sexOptions.map((sex, index) => (\r\n            <option key={sex.id} value={sex.id}>{sex.display}</option>\r\n        ));\r\n    }\r\n    if (maritalStatusOptions && maritalStatusOptions.length > 0) {\r\n        maritalStatusRows = maritalStatusOptions.map((maritalStatusOption, index) => (\r\n            <option key={maritalStatusOption.id} value={maritalStatusOption.id}>{maritalStatusOption.display}</option>\r\n        ));\r\n    }\r\n    if (educationOptions && educationOptions.length > 0) {\r\n        educationRows = educationOptions.map((educationOption, index) => (\r\n            <option key={educationOption.id} value={educationOption.id}>{educationOption.display}</option>\r\n        ));\r\n    }\r\n    if (occupationOptions && occupationOptions.length > 0) {\r\n        occupationRows = occupationOptions.map((occupationOption, index) => (\r\n            <option key={occupationOption.id} value={occupationOption.id}>{occupationOption.display}</option>\r\n        ));\r\n    }\r\n    if (relationshipOptions && relationshipOptions.length > 0) {\r\n        relationshipRows = relationshipOptions.map((relationshipOption, index) => (\r\n            <option key={relationshipOption.id} value={relationshipOption.id}>{relationshipOption.display}</option>\r\n        ));\r\n    }\r\n    if (topLevelUnitCountryOptions && topLevelUnitCountryOptions.length > 0) {\r\n        topLevelUnitCountryRows = topLevelUnitCountryOptions.map((topLevelUnitCountryOption, index) => (\r\n            <option key={topLevelUnitCountryOption.id} value={topLevelUnitCountryOption.id}>{topLevelUnitCountryOption.name}</option>\r\n        ));\r\n    }\r\n    if (stateUnitOptions && stateUnitOptions.length > 0) {\r\n        stateRows = stateUnitOptions.map((stateUnitOption, index) => (\r\n            <option key={stateUnitOption.id} value={stateUnitOption.id}>{stateUnitOption.name}</option>\r\n        ));\r\n    }\r\n    if (districtUnitOptions && districtUnitOptions.length > 0) {\r\n        districtRows = districtUnitOptions.map((districtUnitOption, index) => (\r\n            <option key={districtUnitOption.id} value={districtUnitOption.id}>{districtUnitOption.name}</option>\r\n        ));\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        history.push('/');\r\n    };\r\n\r\n    const checkPhoneNumber=(e, inputName)=>{\r\n        setValue(inputName,e);\r\n    }\r\n\r\n     const alphabetOnly=(e, inputName)=>{\r\n         const result = e.target.value.replace(/[^a-z]/gi, '');\r\n         setValue(inputName,result);\r\n     }\r\n\r\n    return (\r\n        <>\r\n            <ToastContainer autoClose={3000} hideProgressBar />\r\n            <Card className={classes.root}>\r\n                <CardContent>\r\n                    <Link\r\n                        to={{\r\n                            pathname: \"/\",\r\n                            state: 'users'\r\n                        }}>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className=\" float-right ms-1\"\r\n                            style={{backgroundColor:'#014d88',fontWeight:\"bolder\"}}\r\n                            startIcon={<TiArrowBack />}\r\n                        >\r\n                            <span style={{ textTransform: \"capitalize\" }}>Back </span>\r\n                        </Button>\r\n                    </Link>\r\n                    <br />\r\n                    <br />\r\n                    <div className=\"col-xl-12 col-lg-12\">\r\n                        <Form onSubmit={handleSubmit(onSubmit, onError)}>\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder'}}>\r\n                                    <h5 className=\"card-title\" style={{color:'#fff',fontWeight:'bolder'}}>{userDetail===null ? \"Basic Information\" : \"Edit User Information\"}</h5>\r\n                                </div>\r\n\r\n                                <div className=\"card-body\">\r\n                                    <div className=\"basic-form\">\r\n                                        <div className=\"row\">\r\n                                            <div className=\"form-group mb-3 col-md-3\">\r\n                                                <FormGroup>\r\n                                                    <Label for=\"dateOfRegistration\">Date of Registration* </Label>\r\n                                                    <input\r\n                                                        className=\"form-control\"\r\n                                                        type=\"date\"\r\n                                                        name=\"dateOfRegistration\"\r\n                                                        id=\"dateOfRegistration\"\r\n                                                        max={today}\r\n                                                        {...register(\"dateOfRegistration\")}\r\n                                                        style={{border: \"1px solid #014d88\"}}\r\n                                                    />\r\n                                                    {errors.dateOfRegistration && <p>Enter the registration date</p>}\r\n                                                </FormGroup>\r\n                                            </div>\r\n\r\n                                            <div className=\"form-group mb-3 col-md-3\">\r\n                                                <FormGroup>\r\n                                                    <Label for=\"patientId\">Hospital Number* </Label>\r\n                                                    <input\r\n                                                        className=\"form-control\"\r\n                                                        type=\"text\"\r\n                                                        name=\"hospitalNumber\"\r\n                                                        id=\"hospitalNumber\"\r\n                                                        onChange={checkHospitalNumber}\r\n                                                        {...register(\"hospitalNumber\",{\r\n                                                            onChange:(e)=>{checkHospitalNumber(e)}\r\n                                                        })}\r\n                                                        style={{border: \"1px solid #014d88\"}}\r\n                                                    />\r\n                                                    {checkHospitalNumberError && <p>Hospital number has been registered before</p> }\r\n                                                    {!checkHospitalNumberError && errors.hospitalNumber && <p>Enter the hospital number</p>}\r\n                                                </FormGroup>\r\n                                            </div>\r\n                                            <div className=\"form-group mb-3 col-md-3\">\r\n                                                <FormGroup>\r\n                                                    <Label for=\"ninNumber\">National Identification Number (NIN)</Label>\r\n                                                    <input\r\n                                                        className=\"form-control\"\r\n                                                        type=\"text\"\r\n                                                        name=\"ninNumber\"\r\n                                                        id=\"ninNumber\"\r\n                                                        style={{border: \"1px solid #014d88\"}}\r\n                                                        {...register(\"ninNumber\")}\r\n                                                    />\r\n                                                </FormGroup>\r\n                                            </div>\r\n                                            <div className=\"form-group mb-3 col-md-3\">\r\n                                                <FormGroup>\r\n                                                    <Label for=\"emrId\">EMR ID *</Label>\r\n                                                    <input\r\n                                                        className=\"form-control\"\r\n                                                        disabled={true}\r\n                                                        type=\"text\"\r\n                                                        name=\"emrId\"\r\n                                                        id=\"emrId\"\r\n                                                        style={{border: \"1px solid #014d88\"}}\r\n                                                    />\r\n                                                </FormGroup>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div className=\"row\">\r\n                                            <div className=\"form-group mb-3 col-md-4\">\r\n                                                <FormGroup>\r\n                                                    <Label for=\"firstName\">First Names *</Label>\r\n                                                    <input\r\n                                                        className=\"form-control\"\r\n                                                        type=\"text\"\r\n                                                        name=\"firstName\"\r\n                                                        id=\"firstName\"\r\n                                                        {...register(\"firstName\",{\r\n                                                            onChange:(e)=>{alphabetOnly(e,'firstName')}\r\n                                                        })}\r\n                                                        style={{border: \"1px solid #014d88\"}}\r\n                                                    />\r\n                                                    {errors.firstName && <p>First Name is required</p>}\r\n                                                </FormGroup>\r\n                                            </div>\r\n\r\n                                            <div className=\"form-group mb-3 col-md-4\">\r\n                                                <FormGroup>\r\n                                                    <Label>Middle Name</Label>\r\n                                                    <input\r\n                                                        className=\"form-control\"\r\n                                                        type=\"text\"\r\n                                                        name=\"middleName\"\r\n                                                        id=\"middleName\"\r\n                                                        {...register(\"middleName\",{\r\n                                                            onChange:(e)=>{alphabetOnly(e,'middleName')}\r\n                                                        })}\r\n                                                        style={{border: \"1px solid #014d88\"}}\r\n                                                    />\r\n                                                    {errors.middleName && <p>{errors.middleName.message}</p>}\r\n                                                </FormGroup>\r\n                                            </div>\r\n\r\n                                            <div className=\"form-group mb-3 col-md-4\">\r\n                                                <FormGroup>\r\n                                                    <Label>Last Name *</Label>\r\n                                                    <input\r\n                                                        className=\"form-control\"\r\n                                                        type=\"text\"\r\n                                                        name=\"lastName\"\r\n                                                        id=\"lastName\"\r\n                                                        {...register(\"lastName\",{\r\n                                                            onChange:(e)=>{alphabetOnly(e,'lastName')}\r\n                                                        })}\r\n                                                        style={{border: \"1px solid #014d88\"}}\r\n                                                    />\r\n                                                    {errors.lastName && <p>Last Name is required</p>}\r\n                                                </FormGroup>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div className=\"row\">\r\n                                            <div className=\"form-group  col-md-4\">\r\n                                                <FormGroup>\r\n                                                    <Label>Sex *</Label>\r\n                                                    <select\r\n                                                        className=\"form-control\"\r\n                                                        name=\"sex\"\r\n                                                        id=\"sex\"\r\n                                                        {...register(\"sex\")}\r\n                                                        style={{border: \"1px solid #014d88\"}}\r\n                                                    >\r\n                                                        <option value={\"\"}>Select Sex</option>\r\n                                                        {sexRows}\r\n                                                    </select>\r\n                                                    {errors.sex && <p>Select Sex</p>}\r\n                                                </FormGroup>\r\n                                            </div>\r\n                                            <div className=\"form-group mb-2 col-md-2\">\r\n                                                <FormGroup>\r\n                                                    <Label>Date Of Birth</Label>\r\n                                                    <div className=\"radio\">\r\n                                                        <label>\r\n                                                            <input\r\n                                                                type=\"radio\"\r\n                                                                value=\"Actual\"\r\n                                                                name=\"dateOfBirth\"\r\n                                                                defaultChecked\r\n                                                                {...register(\"dateOfBirth\")}\r\n                                                                onChange={(e) => handleDateOfBirthChange(e)}\r\n                                                                style={{border: \"1px solid #014d88\"}}\r\n                                                            /> Actual\r\n                                                        </label>\r\n                                                    </div>\r\n                                                    <div className=\"radio\">\r\n                                                        <label>\r\n                                                            <input\r\n                                                                type=\"radio\"\r\n                                                                value=\"Estimated\"\r\n                                                                name=\"dateOfBirth\"\r\n                                                                {...register(\"dateOfBirth\")}\r\n                                                                onChange={(e) => handleDateOfBirthChange(e)}\r\n                                                                style={{border: \"1px solid #014d88\"}}\r\n                                                            /> Estimated\r\n                                                        </label>\r\n                                                    </div>\r\n                                                </FormGroup>\r\n                                            </div>\r\n\r\n                                            <div className=\"form-group mb-3 col-md-3\">\r\n                                                <FormGroup>\r\n                                                    <Label>Date</Label>\r\n                                                    <input\r\n                                                        className=\"form-control\"\r\n                                                        type=\"date\"\r\n                                                        name=\"dob\"\r\n                                                        id=\"dob\"\r\n                                                        max={today}\r\n                                                        {...register(\"dob\")}\r\n                                                        onChange={(e) => handleDobChange(e)}\r\n                                                        style={{border: \"1px solid #014d88\"}}\r\n                                                    />\r\n                                                    {errors.dob && <p>Enter a valid date of birth (dd/mm/yyyy)</p>}\r\n                                                </FormGroup>\r\n                                            </div>\r\n\r\n                                            <div className=\"form-group mb-3 col-md-3\">\r\n                                                <FormGroup>\r\n                                                    <Label>Age</Label>\r\n                                                    <input\r\n                                                        className=\"form-control\"\r\n                                                        type=\"number\"\r\n                                                        name=\"age\"\r\n                                                        id=\"age\"\r\n                                                        {...register(\"age\")}\r\n                                                        disabled={ageDisabled}\r\n                                                        onChange={(e) => handleAgeChange(e)}\r\n                                                        style={{border: \"1px solid #014d88\"}}\r\n                                                    />\r\n                                                </FormGroup>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div className={\"row\"}>\r\n{/*                                            {watchShowAge >=0 &&\r\n                                            <>*/}\r\n                                                <div className=\"form-group mb-3 col-md-3\">\r\n                                                    <FormGroup>\r\n                                                        <Label>Marital Status</Label>\r\n                                                        <select\r\n                                                            className=\"form-control\"\r\n                                                            name=\"maritalStatus\"\r\n                                                            id=\"maritalStatus\"\r\n                                                            {...register(\"maritalStatus\")}\r\n                                                            style={{border: \"1px solid #014d88\"}}\r\n                                                        >\r\n                                                            <option value={\"\"}>Select Marital Status</option>\r\n                                                            {maritalStatusRows}\r\n                                                        </select>\r\n                                                        {errors.maritalStatus && <p>Select Marital Status</p>}\r\n                                                    </FormGroup>\r\n                                                </div>\r\n\r\n                                                <div className=\"form-group  col-md-4\">\r\n                                                    <FormGroup>\r\n                                                        <Label>Employment Status *</Label>\r\n                                                        <select\r\n                                                            className=\"form-control\"\r\n                                                            name=\"employmentStatus\"\r\n                                                            id=\"employmentStatus\"\r\n                                                            {...register(\"employmentStatus\")}\r\n                                                            style={{border: \"1px solid #014d88\"}}\r\n                                                        >\r\n                                                            <option value={\"\"}>Select Employment Status</option>\r\n                                                            {occupationRows}\r\n                                                        </select>\r\n                                                        {errors.employmentStatus && <p>Select Employment Status</p>}\r\n                                                    </FormGroup>\r\n                                                </div>\r\n{/*\r\n                                            </>\r\n                                            }\r\n*/}\r\n\r\n\r\n                                            <div className=\"form-group  col-md-4\">\r\n                                                <FormGroup>\r\n                                                    <Label>Education Level *</Label>\r\n                                                    <select\r\n                                                        className=\"form-control\"\r\n                                                        name=\"highestQualification\"\r\n                                                        id=\"highestQualification\"\r\n                                                        {...register(\"highestQualification\")}\r\n                                                        style={{border: \"1px solid #014d88\"}}\r\n                                                    >\r\n                                                        <option value={\"\"}>Select the Education Level</option>\r\n                                                        {educationRows}\r\n                                                    </select>\r\n                                                    {errors.highestQualification && <p>Select the Education Level</p>}\r\n                                                </FormGroup>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder'}}>\r\n                                    <h5 className=\"card-title\">Contact Details</h5>\r\n                                </div>\r\n\r\n                                <div className=\"card-body\">\r\n                                    <div className={\"row\"}>\r\n                                        <div className=\"form-group  col-md-4\">\r\n                                            <FormGroup>\r\n                                                <Label>Phone Number *</Label>\r\n                                                <PhoneInput\r\n                                                    containerStyle={{width:'100%',border: \"1px solid #014d88\"}}\r\n                                                    inputStyle={{width:'100%',borderRadius:'0px'}}\r\n                                                    country={'ng'}\r\n                                                    masks={{ng: '...-...-....', at: '(....) ...-....'}}\r\n                                                    placeholder=\"(234)7099999999\"\r\n                                                    value={getValues('pnumber')}\r\n                                                    onChange={(e)=>{checkPhoneNumber(e,'pnumber')}}\r\n                                                    isValid={(value, country) => {\r\n                                                        if(value === country.countryCode){\r\n                                                            return true;\r\n                                                        }else{\r\n                                                            if(value.length < 13){\r\n                                                                errors.pnumber = true;\r\n                                                                return false;\r\n                                                            }else{\r\n                                                                errors.pnumber = false;\r\n                                                                return true;\r\n                                                            }\r\n                                                        }\r\n                                                    }}\r\n                                                />\r\n\r\n{/*                                                <input\r\n                                                    className=\"form-control\"\r\n                                                    type=\"tel\"\r\n                                                    name=\"pnumber\"\r\n                                                    id=\"pnumber\"\r\n                                                    {...register(\"pnumber\",{\r\n                                                        onChange:(e)=>{checkPhoneNumber(e,'pnumber')}\r\n                                                    })}\r\n                                                    placeholder=\"(234)7099999999\"\r\n                                                    style={{border: \"1px solid #014d88\"}}\r\n                                                />*/}\r\n                                                {errors.pnumber && <p>Phone number is required</p>}\r\n                                            </FormGroup>\r\n                                        </div>\r\n\r\n                                        <div className=\"form-group col-md-4\">\r\n                                            <FormGroup>\r\n                                                <Label>Alt. Phone Number</Label>\r\n                                                <PhoneInput\r\n                                                    containerStyle={{width:'100%',border: \"1px solid #014d88\"}}\r\n                                                    inputStyle={{width:'100%',borderRadius:'0px'}}\r\n                                                    country={'ng'}\r\n                                                    masks={{ng: '...-...-....', at: '(....) ...-....'}}\r\n                                                    placeholder=\"(234)7099999999\"\r\n                                                    value={getValues('altPhonenumber')}\r\n                                                    onChange={(e)=>{checkPhoneNumber(e,'altPhonenumber')}}\r\n                                                    isValid={(value, country) => {\r\n                                                        if(value === country.countryCode){\r\n                                                            return true;\r\n                                                        }else{\r\n                                                            if(value.length < 13){\r\n                                                                errors.altPhonenumber = true;\r\n                                                                return \"Enter a valid phone number\";\r\n                                                            }else{\r\n                                                                errors.altPhonenumber = false;\r\n                                                                return true;\r\n                                                            }\r\n                                                        }\r\n                                                    }}\r\n                                                />\r\n{/*                                                <input\r\n                                                    className=\"form-control\"\r\n                                                    type=\"tel\"\r\n                                                    name=\"altPhoneNumber\"\r\n                                                    id=\"altPhoneNumber\"\r\n                                                    {...register(\"altPhonenumber\",{\r\n                                                        onChange:(e)=>{checkPhoneNumber(e,'altPhonenumber')}\r\n                                                    })}\r\n                                                    placeholder=\"(234)7099999999\"\r\n                                                    style={{border: \"1px solid #014d88\"}}\r\n                                                />*/}\r\n                                                {errors.altPhonenumber && <p>{errors.altPhonenumber.message}</p>}\r\n                                            </FormGroup>\r\n                                        </div>\r\n\r\n                                        <div className=\"form-group col-md-4\">\r\n                                            <FormGroup>\r\n                                                <Label>Email</Label>\r\n                                                <input\r\n                                                    className=\"form-control\"\r\n                                                    type=\"email\"\r\n                                                    name=\"email\"\r\n                                                    id=\"email\"\r\n                                                    {...register(\"email\")}\r\n                                                    style={{border: \"1px solid #014d88\"}}\r\n                                                />\r\n                                                {errors.email && <p>{errors.email.message}</p>}\r\n                                            </FormGroup>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div className=\"row\">\r\n                                        <div className=\"form-group  col-md-4\">\r\n                                            <FormGroup>\r\n                                                <Label>Country *</Label>\r\n                                                <select\r\n                                                    className=\"form-control\"\r\n                                                    type=\"text\"\r\n                                                    name=\"country\"\r\n                                                    id=\"country\"\r\n                                                    style={{border: \"1px solid #014d88\"}}\r\n                                                    {...register(\"countryId\")}\r\n                                                    onChange={(e) => onCountryChange(e)}>\r\n                                                    <option value={\"\"}>Select Country</option>\r\n                                                    {topLevelUnitCountryRows}\r\n                                                </select>\r\n                                                {errors.countryId && <p>Select Country</p>}\r\n                                            </FormGroup>\r\n                                        </div>\r\n\r\n                                        <div className=\"form-group  col-md-4\">\r\n                                            <FormGroup>\r\n                                                <Label>State *</Label>\r\n                                                <select\r\n                                                    className=\"form-control\"\r\n                                                    type=\"text\"\r\n                                                    name=\"stateId\"\r\n                                                    id=\"stateId\"\r\n                                                    style={{border: \"1px solid #014d88\"}}\r\n                                                    {...register(\"stateId\")}\r\n                                                    onChange={(e) => onStateChange(e)}>\r\n                                                    <option value={\"\"}>Select State</option>\r\n                                                    {stateRows}\r\n                                                </select>\r\n                                                {errors.stateId && <p>Select State</p>}\r\n                                            </FormGroup>\r\n                                        </div>\r\n\r\n                                        <div className=\"form-group  col-md-4\">\r\n                                            <FormGroup>\r\n                                                <Label>Province/District/LGA *</Label>\r\n                                                <select\r\n                                                    className=\"form-control\"\r\n                                                    type=\"text\"\r\n                                                    name=\"district\"\r\n                                                    id=\"district\"\r\n                                                    style={{border: \"1px solid #014d88\"}}\r\n                                                    {...register(\"district\")}>\r\n                                                    <option value={\"\"}>Select Province/District/LGA</option>\r\n                                                    {districtRows}\r\n                                                </select>\r\n                                                {errors.district && <p>Select Province/District/LGA</p>}\r\n                                            </FormGroup>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div className={\"row\"}>\r\n                                        <div className=\"form-group  col-md-4\">\r\n                                            <FormGroup>\r\n                                                <Label>Street Address</Label>\r\n                                                <input\r\n                                                    className=\"form-control\"\r\n                                                    type=\"text\"\r\n                                                    name=\"address\"\r\n                                                    id=\"address\"\r\n                                                    style={{border: \"1px solid #014d88\"}}\r\n                                                    {...register(\"address\")}\r\n                                                />\r\n                                                {errors.address && <p>{errors.address.message}</p>}\r\n                                            </FormGroup>\r\n                                        </div>\r\n\r\n                                        <div className=\"form-group  col-md-4\">\r\n                                            <FormGroup>\r\n                                                <Label>Landmark</Label>\r\n                                                <input\r\n                                                    className=\"form-control\"\r\n                                                    type=\"text\"\r\n                                                    name=\"landmark\"\r\n                                                    id=\"landmark\"\r\n                                                    style={{border: \"1px solid #014d88\"}}\r\n                                                    {...register(\"landmark\")}\r\n                                                />\r\n                                                {errors.landmark && <p>{errors.landmark.message}</p>}\r\n                                            </FormGroup>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder'}}>\r\n                                    <h5 className=\"card-title\">Relationship / Next Of Kin</h5>\r\n                                </div>\r\n                                <div className=\"card-body\">\r\n                                    <div className=\"row\">\r\n                                        {\r\n                                            contacts && contacts.length > 0 && (\r\n                                                <div className=\"col-xl-12 col-lg-12\">\r\n                                                    <table style={{ width: '100%' }}>\r\n                                                        <thead>\r\n                                                        <tr>\r\n                                                            <th>Relationship Type</th>\r\n                                                            <th>Name</th>\r\n                                                            <th>Phone</th>\r\n                                                            <th>Address</th>\r\n                                                            <th>Actions</th>\r\n                                                        </tr>\r\n                                                        </thead>\r\n                                                        <tbody>\r\n                                                        {contacts.map((item, index) => {\r\n                                                            return (\r\n                                                                <tr key={item.index}>\r\n                                                                    <td>{ getRelationship(item.relationshipId) }</td>\r\n                                                                    <td>{ getNames(item) }</td>\r\n                                                                    <td>{ getPhoneContactPoint(item.contactPoint) }</td>\r\n                                                                    <td>{ getAddress(item.address) }</td>\r\n                                                                    <td>\r\n                                                                        <button type=\"button\"\r\n                                                                                className=\"btn btn-default btn-light btn-sm editRow\"\r\n                                                                                onClick={(e) => handleEditRelative(item, index)}>\r\n                                                                            <FontAwesomeIcon icon=\"edit\" />\r\n                                                                        </button>\r\n                                                                        &nbsp;&nbsp;\r\n                                                                        <button\r\n                                                                            type=\"button\"\r\n                                                                            className=\"btn btn-danger btn-sm removeRow\"\r\n                                                                            onClick={(e) => handleDeleteRelative(index)}>\r\n                                                                            <FontAwesomeIcon icon=\"trash\" />\r\n                                                                        </button>\r\n                                                                    </td>\r\n                                                                </tr>\r\n                                                            );\r\n                                                        })}\r\n                                                        </tbody>\r\n                                                    </table>\r\n                                                </div>\r\n                                            )\r\n                                        }\r\n                                        <div className=\"col-xl-12 col-lg-12\">\r\n                                            {\r\n                                                showRelative && (\r\n                                                    <div className=\"card\">\r\n                                                        <div className=\"card-body\">\r\n                                                            <div className=\"row\">\r\n                                                                <div className=\"form-group mb-3 col-md-3\">\r\n                                                                    <FormGroup>\r\n                                                                        <Label for=\"relationshipType\">Relationship Type *</Label>\r\n                                                                        <select\r\n                                                                            className=\"form-control\"\r\n                                                                            name=\"relationshipType\"\r\n                                                                            id=\"relationshipType\"\r\n                                                                            style={{border: \"1px solid #014d88\"}}\r\n                                                                            {...register(\"relationshipType\")}>\r\n                                                                            <option value={\"\"}></option>\r\n                                                                            {relationshipRows}\r\n                                                                        </select>\r\n                                                                        {errors.relationshipType && <p>{errors.relationshipType.message}</p>}\r\n                                                                    </FormGroup>\r\n                                                                </div>\r\n\r\n                                                                <div className=\"form-group mb-3 col-md-3\">\r\n                                                                    <FormGroup>\r\n                                                                        <Label for=\"cfirstName\">First Name *</Label>\r\n                                                                        <input\r\n                                                                            className=\"form-control\"\r\n                                                                            type=\"text\"\r\n                                                                            name=\"cfirstName\"\r\n                                                                            id=\"cfirstName\"\r\n                                                                            style={{border: \"1px solid #014d88\"}}\r\n                                                                            {...register(\"cfirstName\",{\r\n                                                                                onChange:(e)=>{alphabetOnly(e,'cfirstName')}\r\n                                                                            })}\r\n                                                                        />\r\n                                                                        {errors.cfirstName && <p>{errors.cfirstName.message}</p>}\r\n                                                                    </FormGroup>\r\n                                                                </div>\r\n\r\n                                                                <div className=\"form-group mb-3 col-md-3\">\r\n                                                                    <FormGroup>\r\n                                                                        <Label>Middle Name</Label>\r\n                                                                        <input\r\n                                                                            className=\"form-control\"\r\n                                                                            type=\"text\"\r\n                                                                            name=\"cmiddleName\"\r\n                                                                            id=\"cmiddleName\"\r\n                                                                            style={{border: \"1px solid #014d88\"}}\r\n                                                                            {...register(\"cmiddleName\",{\r\n                                                                                onChange:(e)=>{alphabetOnly(e,'cmiddleName')}\r\n                                                                            })}\r\n                                                                        />\r\n                                                                        {errors.cmiddleName && <p>{errors.cmiddleName.message}</p>}\r\n                                                                    </FormGroup>\r\n                                                                </div>\r\n\r\n                                                                <div className=\"form-group mb-3 col-md-3\">\r\n                                                                    <FormGroup>\r\n                                                                        <Label>Last Name *</Label>\r\n                                                                        <input\r\n                                                                            className=\"form-control\"\r\n                                                                            type=\"text\"\r\n                                                                            name=\"clastName\"\r\n                                                                            id=\"clastName\"\r\n                                                                            style={{border: \"1px solid #014d88\"}}\r\n                                                                            {...register(\"clastName\",{\r\n                                                                                onChange:(e)=>{alphabetOnly(e,'clastName')}\r\n                                                                            })}\r\n                                                                        />\r\n                                                                        {errors.clastName && <p>{errors.clastName.message}</p>}\r\n                                                                    </FormGroup>\r\n                                                                </div>\r\n                                                            </div>\r\n\r\n                                                            <div className=\"row\">\r\n                                                                <div className=\"form-group mb-3 col-md-3\">\r\n                                                                    <FormGroup>\r\n                                                                        <Label for=\"contactPhoneNumber\">Phone Number</Label>\r\n                                                                        <PhoneInput\r\n                                                                            containerStyle={{width:'100%',border: \"1px solid #014d88\"}}\r\n                                                                            inputStyle={{width:'100%',borderRadius:'0px'}}\r\n                                                                            country={'ng'}\r\n                                                                            onlyCountries={['ng']}\r\n                                                                            masks={{ng: '...-...-....', at: '(....) ...-....'}}\r\n                                                                            placeholder=\"(234)7099999999\"\r\n                                                                            value={getValues('contactPhoneNumber')}\r\n                                                                            onChange={(e)=>{checkPhoneNumber(e,'contactPhoneNumber')}}\r\n                                                                            isValid={(value, country) => {\r\n                                                                                if(value === country.countryCode){\r\n                                                                                    return true;\r\n                                                                                }else{\r\n                                                                                    if(value.length < 13){\r\n                                                                                        errors.contactPhoneNumber = true;\r\n                                                                                        return \"Enter a valid phone number\";\r\n                                                                                    }else{\r\n                                                                                        errors.contactPhoneNumber = false;\r\n                                                                                        return true;\r\n                                                                                    }\r\n                                                                                }\r\n                                                                            }}\r\n                                                                        />\r\n{/*                                                                        <input\r\n                                                                            className=\"form-control\"\r\n                                                                            type=\"text\"\r\n                                                                            name=\"contactPhoneNumber\"\r\n                                                                            id=\"contactPhoneNumber\"\r\n                                                                            style={{border: \"1px solid #014d88\"}}\r\n                                                                            {...register(\"contactPhoneNumber\",{\r\n                                                                                onChange:(e)=>{checkPhoneNumber(e,'contactPhoneNumber')}\r\n                                                                            })}\r\n                                                                        />*/}\r\n                                                                        {errors.contactPhoneNumber && <p>{errors.contactPhoneNumber.message}</p>}\r\n                                                                    </FormGroup>\r\n                                                                </div>\r\n\r\n                                                                <div className=\"form-group mb-3 col-md-3\">\r\n                                                                    <FormGroup>\r\n                                                                        <Label for=\"contactEmail\">Email</Label>\r\n                                                                        <input\r\n                                                                            className=\"form-control\"\r\n                                                                            type=\"text\"\r\n                                                                            name=\"contactEmail\"\r\n                                                                            id=\"contactEmail\"\r\n                                                                            style={{border: \"1px solid #014d88\"}}\r\n                                                                            {...register(\"contactEmail\",{\r\n                                                                                onChange:(e)=>{checkPhoneNumber(e,'contactEmail')}\r\n                                                                            })}\r\n                                                                        />\r\n                                                                        {errors.contactEmail && <p>{errors.contactEmail.message}</p>}\r\n                                                                    </FormGroup>\r\n                                                                </div>\r\n\r\n                                                                <div className=\"form-group mb-3 col-md-3\">\r\n                                                                    <FormGroup>\r\n                                                                        <Label for=\"contactAddress\">Address</Label>\r\n                                                                        <input\r\n                                                                            className=\"form-control\"\r\n                                                                            type=\"text\"\r\n                                                                            name=\"contactAddress\"\r\n                                                                            id=\"contactAddress\"\r\n                                                                            style={{border: \"1px solid #014d88\"}}\r\n                                                                            {...register(\"contactAddress\")}\r\n                                                                        />\r\n                                                                        {errors.contactAddress && <p>{errors.contactAddress.message}</p>}\r\n                                                                    </FormGroup>\r\n                                                                </div>\r\n                                                            </div>\r\n\r\n                                                            <div className=\"row\">\r\n                                                                <div className=\"\">\r\n                                                                    <MatButton\r\n                                                                        type=\"button\"\r\n                                                                        variant=\"contained\"\r\n                                                                        color=\"primary\"\r\n                                                                        className={classes.button}\r\n                                                                        onClick={handleSaveRelationship}\r\n                                                                        style={{backgroundColor:'#014d88',color:'#fff'}}\r\n                                                                    >\r\n                                                                        Add\r\n                                                                    </MatButton>\r\n                                                                    <MatButton\r\n                                                                        type=\"button\"\r\n                                                                        variant=\"contained\"\r\n                                                                        color=\"secondary\"\r\n                                                                        className={classes.button}\r\n                                                                        onClick={handleCancelSaveRelationship}\r\n                                                                        style={{backgroundColor:'#992E62',color:'#fff'}}\r\n                                                                    >\r\n                                                                        Cancel\r\n                                                                    </MatButton>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                )\r\n                                            }\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div className=\"row\">\r\n                                        <MatButton\r\n                                            type=\"button\"\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            className={classes.button}\r\n                                            startIcon={<AddIcon />}\r\n                                            onClick={handleAddRelative}\r\n                                            style={{backgroundColor:'#014d88',fontWeight:\"bolder\"}}\r\n                                        >\r\n                                            Add a Relative/Next Of Kin\r\n                                        </MatButton>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            {saving ? <Spinner /> : \"\"}\r\n\r\n                            <br />\r\n\r\n                            {userDetail ===null ? (\r\n                                    <MatButton\r\n                                        type=\"submit\"\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        className={classes.button}\r\n                                        startIcon={<SaveIcon />}\r\n                                        style={{backgroundColor:'#014d88',color:'#fff'}}\r\n                                    >\r\n                                        {!saving ? (\r\n                                            <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                                        ) : (\r\n                                            <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n                                        )}\r\n                                    </MatButton>\r\n                                )\r\n                                :\r\n                                (\r\n                                    <MatButton\r\n                                        type=\"submit\"\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        className={classes.button}\r\n                                        startIcon={<SaveIcon />}\r\n                                        style={{backgroundColor:'#014d88',color:'#fff'}}\r\n                                    >\r\n                                        {!saving ? (\r\n                                            <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                                        ) : (\r\n                                            <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n                                        )}\r\n                                    </MatButton>\r\n                                )\r\n                            }\r\n                            <MatButton\r\n                                variant=\"contained\"\r\n                                className={classes.button}\r\n                                startIcon={<CancelIcon />}\r\n                                onClick={handleCancel}\r\n                                style={{backgroundColor:'#992E62',color:'#fff'}}\r\n                            >\r\n                                <span style={{ textTransform: \"capitalize\" }}>Cancel</span>\r\n                            </MatButton>\r\n                        </Form>\r\n                    </div>\r\n                </CardContent>\r\n            </Card>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default RegisterPatient;\r\n","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\patient-module\\src\\main\\webapp\\components\\Add-Patient-Vitals.js",["155"],"C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\patient-module\\src\\main\\webapp\\components\\PatientVitals.js",["156","157","158","159","160","161","162","163"],"C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\patient-module\\src\\main\\webapp\\components\\Biometrics.js",["164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport {Modal,ModalHeader, ModalBody,Form,\r\n    Row,Label,Card,CardBody,Col, FormGroup,CardHeader, Input\r\n} from \"reactstrap\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Select from \"react-select\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport FingerprintIcon from '@material-ui/icons/Fingerprint';\r\nimport { Button2, Icon, List } from 'semantic-ui-react'\r\nimport {ToastContainer, toast} from \"react-toastify\";\r\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\r\nimport axios from \"axios\";\r\nimport {token, url as baseUrl} from \"../../../api\";\r\n\r\nimport { green, red } from '@mui/material/colors';\r\nimport { Dimmer, Loader, Image, Segment } from 'semantic-ui-react'\r\n\r\nimport Box from '@mui/material/Box';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Button from '@mui/material/Button';\r\nimport Fab from '@mui/material/Fab';\r\nimport CheckIcon from '@mui/icons-material/Check';\r\n//import SaveIcon from '@mui/icons-material/Save';\r\n// import LinearProgress from '@mui/material/LinearProgress';\r\nimport Typography from '@mui/material/Typography';\r\n// import CancelIcon from '@mui/icons-material/Cancel';\r\n// import ModalImage from \"react-modal-image\";\r\nimport {Link, useHistory} from 'react-router-dom';\r\nimport moment from \"moment\";\r\nimport {Dropdown,Badge} from 'react-bootstrap';\r\nimport { Alert, AlertTitle } from '@material-ui/lab';\r\nimport fingerprintimage  from '../images/fingerprintimage.png';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport UpgradeIcon from '@mui/icons-material/Upgrade';\r\nimport _ from 'lodash';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        \"& .dropdown-toggle::after, .dropleft .dropdown-toggle::before, .dropright .dropdown-toggle::before, .dropup .dropdown-toggle::after\":{\r\n            fontFamily:'FontAwesome',\r\n            border:'0',\r\n            verticalAlign:'middle',\r\n            marginLeft:'.25em',\r\n            lineHeight:'1'\r\n        },\r\n        \"& .dropdown-menu .dropdown-item\":{\r\n            fontSize: '14px',\r\n            color: '#014d88',\r\n            padding: '0.3rem 1.5rem',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .mt-4\":{\r\n            marginTop:'28px !important'\r\n        },\r\n        \"& .form-control\":{\r\n            color:'#992E62'\r\n        },\r\n        \"& .form-control:focus\":{\r\n            color:'#014d88'\r\n        },\r\n        \"& .sharp \":{\r\n            \"min-width\": \"35px\",\r\n            padding:\"5px\",\r\n            height: '35px',\r\n            \"min-height\": \"35px\"\r\n}\r\n    },\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n    },\r\n/*    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20,\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        \"& > *\": {\r\n            margin: theme.spacing(1),\r\n        },\r\n    },\r\n    input: {\r\n        display: \"none\",\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"12.8px\",\r\n    },*/\r\n}));\r\n\r\nlet checkUrl=\"\"\r\n\r\nfunction Biometrics(props) {\r\n    const classes = useStyles();\r\n    let history = useHistory();\r\n    const permissions = history.location && history.location.state ? history.location.state.permissions : [];\r\n    const [biometricDevices,setbiometricDevices] = useState([]);\r\n    const [objValues, setObjValues]= useState({biometricType: \"FINGERPRINT\", patientId:props.patientId, templateType:\"\", device:\"\"})\r\n    const [fingerType, setFingerType] = useState([]);\r\n    const [devices, setDevices] = useState([]);\r\n    const [loading, setLoading] = React.useState(false);\r\n    const [pageLoading, setPageLoading] = useState(false);\r\n    const [showCapture, setshowCapture] = React.useState(false);\r\n    const [tryAgain, setTryAgain] = React.useState(false);\r\n    const [success, setSuccess] = React.useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    const [storedBiometrics, setStoredBiometrics] = useState([]);\r\n    // const [responseImage, setResponseImage] = useState(\"\")\r\n    const [capturedFingered, setCapturedFingered]= useState([]);\r\n    const [selectedFingers, setSelectedFingers] = useState([]);\r\n\r\n    const buttonSx = {\r\n        ...(success && {\r\n            bgcolor: green[500],\r\n            '&:hover': {\r\n                bgcolor: green[700],\r\n            },\r\n        }),\r\n    };\r\n\r\n    const getPersonBiometrics = async() =>{\r\n        const fingersCodeset = await axios.get(`${baseUrl}application-codesets/v2/BIOMETRIC_CAPTURE_FINGERS`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n\r\n        axios.get(`${baseUrl}biometrics/person/${props.patientId}`,{ headers: {\"Authorization\" : `Bearer ${token}`}}).then(async (response)=>{\r\n            if(response.data.length > 0){\r\n                setStoredBiometrics(response.data);\r\n                setPageLoading(true);\r\n                let personCapturedFingers = _.uniq(_.map(response.data,'templateType'))\r\n                setSelectedFingers(personCapturedFingers);\r\n                let biometricItems =  _.map(fingersCodeset.data, (item)=>{\r\n                    return _.extend({}, item, {captured: personCapturedFingers.includes(item.display)});\r\n\r\n                });\r\n                setFingerType(biometricItems);\r\n            }else{\r\n                let biometricItems =  _.map(fingersCodeset.data, (item)=>{\r\n                    return _.extend({}, item, {captured: false});\r\n                    //return item.captured = personCapturedFingers.includes(item.display)\r\n                });\r\n                setFingerType(biometricItems);\r\n\r\n            }\r\n\r\n        }).catch(async (error)=>{\r\n            console.log(\"getPersonBiometrics error\")\r\n            console.log(error)\r\n\r\n            let biometricItems =  _.map(fingersCodeset.data, (item)=>{\r\n                return _.extend({}, item, {captured: false});\r\n            });\r\n            setFingerType(biometricItems);\r\n            setPageLoading(true);\r\n        })\r\n    }\r\n\r\n    const clear_storelist = () =>{\r\n        axios.post(`${baseUrl}biometrics/store-list/${props.patientId}`,props.patientId,{ headers: {\"Authorization\" : `Bearer ${token}`}}).then((response)=>{\r\n            console.log('cleared store')\r\n        }).catch((error)=>{\r\n            console.log(\"cleared store error\")\r\n            console.log(error)\r\n\r\n        })\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        clear_storelist();\r\n        getPersonBiometrics();\r\n        TemplateType();\r\n        //biometricFingers();\r\n    }, []);\r\n    //Get list of KP\r\n    const TemplateType =()=>{\r\n        axios\r\n            .get(`${baseUrl}modules/check?moduleName=biometric`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                if(response.data===true){\r\n                    axios\r\n                        .get(`${baseUrl}biometrics/devices`,\r\n                            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n                        )\r\n                        .then((response) => {\r\n                            setDevices(response.data);\r\n                            setbiometricDevices(response.data);\r\n\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log(error)\r\n                        });\r\n\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                //console.log(error);\r\n            });\r\n\r\n    }\r\n\r\n    //Get list of Finger index\r\n    const biometricFingers =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/BIOMETRIC_CAPTURE_FINGERS`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setFingerType(response.data);\r\n            })\r\n            .catch((error) => {\r\n            });\r\n\r\n    }\r\n    //check if device is plugged or not\r\n    const checkDevice = e =>{\r\n        const deviceName =e.target.value;\r\n        const selectedDevice=biometricDevices.find((x)=> x.name ===deviceName )\r\n        checkUrl= selectedDevice.url===null? baseUrl : selectedDevice.url\r\n        setObjValues({...objValues, device:deviceName})\r\n        axios\r\n            .get(`${checkUrl}biometrics/secugen/boot?reader=${deviceName}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                if(response.data.errorType ===\"ERROR\"){\r\n                    toast.error(response.data.errorName + \" is not plug\");\r\n                    //setshowCapture(true)\r\n                }else{\r\n                    setshowCapture(true)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n            });\r\n    }\r\n    // handle the input changes\r\n\r\n    const handleInputChange = e => {\r\n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n    }\r\n    //form validation\r\n    const validate = () => {\r\n        let temp = { ...errors }\r\n        temp.templateType = objValues.templateType ? \"\" : \"This field is required\"\r\n        temp.device = objValues.device ? \"\" : \"This field is required\"\r\n        setErrors({\r\n            ...temp\r\n        })\r\n        return Object.values(temp).every(x => x === \"\")\r\n    }\r\n    //to capture  selected index finger\r\n    const captureFinger = (e) => {\r\n        e.preventDefault();\r\n        if(validate()){\r\n            axios.post(`${checkUrl}biometrics/secugen/enrollment?reader=SG_DEV_AUTO`,objValues,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n            )\r\n                .then(response => {\r\n                    setLoading(true);\r\n                    if(response.data.type ===\"ERROR\"){\r\n                        setLoading(false);\r\n                        setTryAgain(true);\r\n                        window.setTimeout(() => {\r\n                            setTryAgain(false);\r\n                        }, 5000);\r\n                        toast.error(response.data.message.ERROR);\r\n                    }else{\r\n                        const templateType= response.data.templateType\r\n                        setTryAgain(false);\r\n                        setSuccess(true)\r\n                        window.setTimeout(() => {\r\n                            setSuccess(false)\r\n                            setLoading(false);\r\n                        }, 5000);\r\n                        let biometricsEnrollments = response.data\r\n                        biometricsEnrollments.capturedBiometricsList = _.uniqBy(biometricsEnrollments.capturedBiometricsList,\"templateType\");\r\n\r\n                        setCapturedFingered([...capturedFingered, biometricsEnrollments])\r\n                        //fingerType.splice(templateType, 1);\r\n                        _.find(fingerType,{'display':templateType}).captured = true;\r\n                        setFingerType([...fingerType]);\r\n                        //setObjValues({biometricType: \"FINGERPRINT\", patientId:props.patientId, templateType:\"\", device:\"\"});\r\n                        setObjValues({...objValues, templateType:\"\"});\r\n                    }\r\n                    //toast.success(\"Record save successful\");\r\n                })\r\n                .catch(error => {\r\n                });\r\n        }\r\n    }\r\n\r\n    const deleteBiometric =(id,finger)=>{\r\n        axios.delete(`${baseUrl}biometrics/${id}`,{ headers: {\"Authorization\" : `Bearer ${token}`}}).then((response)=>{\r\n            toast.success(`${finger} deleted successfully`);\r\n            _.find(fingerType,{'display':finger}).captured = false;\r\n            setFingerType([...fingerType]);\r\n            let newStoredBiometrics = _.reject(storedBiometrics, {\"templateType\":finger});\r\n            setStoredBiometrics(newStoredBiometrics);\r\n            clear_storelist();\r\n            if(newStoredBiometrics.length === 0){\r\n                props.updatePatientBiometricStatus(false);\r\n            }\r\n        }).catch((error)=>{\r\n            toast.error(\"Something went wrong\");\r\n            console.log(error)\r\n\r\n        })\r\n    }\r\n\r\n    //Save Biometric capture\r\n    const saveBiometrics = (e) => {\r\n        e.preventDefault();\r\n        if(capturedFingered.length >= 1){\r\n            const capturedObj= capturedFingered[capturedFingered.length - 1];\r\n            capturedObj.capturedBiometricsList =_.uniqBy(capturedObj.capturedBiometricsList,\"templateType\")\r\n            axios.post(`${baseUrl}biometrics/templates`,capturedObj,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n            )\r\n                .then(response => {\r\n                    toast.success(\"Biometric save successful\");\r\n                    setCapturedFingered([])\r\n                    getPersonBiometrics();\r\n                    props.updatePatientBiometricStatus(true);\r\n                })\r\n                .catch(error => {\r\n                    toast.error(\"Something went wrong saving biometrics\");\r\n                    console.log(error);\r\n                });\r\n        }else{\r\n\r\n            toast.error(\"You can't save less than 2 finger\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n\r\n\r\n            <div style={{display:\"flex\",width:'100%'}}>\r\n                <div className=\"\" style={{padding:'5px', flex:\"7\",boxShadow: 'rgba(99, 99, 99, 0.2) 0px 2px 8px 0px',minHeight:'400px'}}>\r\n                    {pageLoading && storedBiometrics.length > 0 ? (\r\n                            <div style={{display:\"flex\",width:'100%',flexWrap:'wrap'}}>\r\n                                {storedBiometrics.map((biometric, index)=>(\r\n                                    <div   key={index} style={{minHeight:'120px',padding:'5px', width:'20%'}}>\r\n                                        <div  className=\"card \" style={{borderRadius:\"6px\"}}>\r\n\r\n                                            <div className=\"card-header align-items-start\" style={{backgroundColor:'#fff'}}>\r\n                                                <div>\r\n                                                    <h6 className=\"fs-18 font-w500 mb-3 user-name\"><Link to={\"#\"} style={{color:'#014d88',fontSize:'14px',fontFamily:`\"poppins\",sans-serif`}}>{biometric.templateType}</Link></h6>\r\n                                                    <div className=\"fs-9 text-nowrap\" style={{fontSize:'10px',color:'#992E62', fontWeight:'bold',fontFamily:`\"poppins\",sans-serif`}}><i className=\"fa fa-calendar-o me-3\" aria-hidden=\"true\"></i>{moment(biometric.lastModifiedDate).format(\"YYYY-MM-DD HH:mm\")}</div>\r\n                                                </div>\r\n\r\n                                                {/*Action button -- Dropdown menu*/}\r\n                                                <Dropdown className=\"dropdown ms-auto\"  >\r\n                                                    <Dropdown.Toggle\r\n                                                        as=\"button\"\r\n                                                        variant=\"\"\r\n                                                        drop=\"up\"\r\n                                                        className=\"btn sharp btn-primary \"\r\n                                                        id=\"tp-btn\"\r\n                                                        style={{ backgroundColor: '#014d88', borderColor:'#014d88', borderRadius:'5px',marginRight:'-18px',marginTop:'-10px'}}\r\n                                                    >\r\n                                                        <svg\r\n                                                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                                                            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\r\n                                                            width=\"18px\"\r\n                                                            height=\"18px\"\r\n                                                            viewBox=\"0 0 24 24\"\r\n                                                            version=\"1.1\"\r\n                                                        >\r\n                                                            <g\r\n                                                                stroke=\"none\"\r\n                                                                strokeWidth=\"1\"\r\n                                                                fill=\"none\"\r\n                                                                fillRule=\"evenodd\"\r\n                                                            >\r\n                                                                <rect x=\"0\" y=\"0\" width=\"24\" height=\"24\" />\r\n                                                                <circle fill=\"#ffffff\" cx=\"12\" cy=\"5\" r=\"2\" />\r\n                                                                <circle fill=\"#ffffff\" cx=\"12\" cy=\"12\" r=\"2\" />\r\n                                                                <circle fill=\"#ffffff\" cx=\"12\" cy=\"19\" r=\"2\" />\r\n                                                            </g>\r\n                                                        </svg>\r\n                                                    </Dropdown.Toggle>\r\n                                                    <Dropdown.Menu alignRight={true} className=\"dropdown-menu-right\">\r\n                                                        <Dropdown.Item style={{color:'red'}} onClick={()=>deleteBiometric(biometric.id,biometric.templateType)}>\r\n                                                            <DeleteIcon /> Delete\r\n                                                        </Dropdown.Item>\r\n\r\n                                                    </Dropdown.Menu>\r\n                                                </Dropdown>\r\n\r\n                                            </div>\r\n                                            <div className=\"card-body p-0 pb-2\">\r\n                                                <ul className=\"list-group list-group-flush\">\r\n                                                    <li className=\"list-group-item\" style={{height:'100px', display:'flex',justifyContent:'center'}}>\r\n                                                        <img src={fingerprintimage}  alt=\"\" style={{height:'80px'}} />\r\n                                                    </li>\r\n\r\n                                                    <li className=\"list-group-item\">\r\n\r\n                                                        <Badge variant=\"info badge-xs light\" className=\"card-link float-end\">Version {/*{contact.version}*/}</Badge>\r\n                                                        <span className=\"mb-0 title\">Status {biometric.iso}</span> :\r\n                                                        <span className=\"text-black desc-text ms-2\">\r\n                                                        <Badge variant={biometric.iso===true? \"primary badge-xs\": \"danger badge-xs\"}><i className=\"fa fa-check-square me-2 scale4\" aria-hidden=\"true\"></i> </Badge>\r\n                                                    </span>\r\n                                                    </li>\r\n\r\n                                                </ul>\r\n                                            </div>\r\n\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                ))}\r\n                            </div>\r\n                        )\r\n                        :\r\n                        <>\r\n                            <div className=\"flex-grow-8\">\r\n                                <div  className=\"flex-grow-8\"  >\r\n                                    <Alert severity=\"info\">\r\n                                        <AlertTitle style={{height:'400px'}}>\r\n                                            <strong>No biometrics captured</strong>\r\n                                        </AlertTitle>\r\n                                    </Alert>\r\n                                </div>\r\n                            </div>\r\n                        </>\r\n                    }\r\n                </div>\r\n                {/*{permissions.includes('capture_patient_biometrics')|| permissions.includes(\"all_permission\")?*/}\r\n                {permissions.includes('capture_patient_biometrics')|| permissions.includes(\"all_permission\") ?\r\n                    <div style={{flex:\"3\",padding:'5px',marginLeft:'5px',border:'1px solid rgba(99, 99, 99, 0.2)',boxShadow: 'rgba(99, 99, 99, 0.2) 0px 2px 8px 0px'}}>\r\n                        <div className=\"col-12\">\r\n                            <ToastContainer />\r\n                            <Col md={12}>\r\n                                <FormGroup>\r\n                                    <Label for='device' style={{color:'#014d88',fontWeight:'bold',fontSize:'14px' }}>Select Device </Label>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        name=\"device\"\r\n                                        id=\"device\"\r\n                                        onChange={checkDevice}\r\n                                        value={objValues.device}\r\n                                        required\r\n                                    >\r\n                                        <option value=\"\">Select Device </option>\r\n                                        {biometricDevices.map(({ id, name }) => (\r\n                                            <option key={id} value={name}>\r\n                                                {name}\r\n                                            </option>\r\n                                        ))}\r\n\r\n                                    </Input>\r\n                                    {errors.device !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.device}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </Col>\r\n                            {showCapture ? (\r\n                                    <div className=\"row col-12\">\r\n                                        <Col md={6}>\r\n                                            <FormGroup>\r\n                                                <Label for='device' style={{color:'#014d88',fontWeight:'bold',fontSize:'14px' }}>Select Finger</Label>\r\n                                                <Input\r\n                                                    type=\"select\"\r\n                                                    name=\"templateType\"\r\n                                                    id=\"templateType\"\r\n                                                    onChange={handleInputChange}\r\n                                                    value={objValues.templateType}\r\n                                                    required\r\n                                                >\r\n                                                    <option value=\"\">Select Finger </option>\r\n\r\n                                                    {_.filter(fingerType, ['captured', false]).map((value) => (\r\n                                                        <option key={value.id} value={value.display}>\r\n                                                            {value.display}\r\n                                                        </option>\r\n                                                    ))}\r\n                                                </Input>\r\n                                                {errors.templateType !==\"\" ? (\r\n                                                    <span className={classes.error}>{errors.templateType}</span>\r\n                                                ) : \"\" }\r\n                                            </FormGroup>\r\n                                        </Col>\r\n\r\n\r\n                                        <Col md={6}>\r\n\r\n                                            <MatButton\r\n                                                type='button'\r\n                                                variant='contained'\r\n                                                color='primary'\r\n                                                onClick={captureFinger}\r\n                                                className={'mt-4'}\r\n                                                style={{backgroundColor:'#992E62'}}\r\n                                                startIcon={<FingerprintIcon />}\r\n                                            >\r\n                                                Capture Finger\r\n                                            </MatButton>\r\n\r\n                                        </Col>\r\n                                        <br/>\r\n\r\n                                    </div>\r\n                                )\r\n                                :\r\n                                \"\"\r\n                            }\r\n\r\n                            <Row>\r\n                                {capturedFingered.length >=1 ? (\r\n                                        <>\r\n                                            <Col md={12} style={{marginTop:\"10px\", paddingBottom:'20px'}}>\r\n                                                <List celled horizontal>\r\n                                                    {capturedFingered.map((x) => (\r\n                                                        <List.Item style={{width:'200px',height:'200px',border:'1px dotted #014d88',margin:'5px'}}>\r\n                                                            <List.Header style={{ paddingLeft:\"0px\", height:'0.5rem',display:'flex', justifyContent:'right',alignItems: 'right'}}><Icon name='cancel'  color='red' /> </List.Header>\r\n                                                            <List.Content style={{width:'200px',height:'160px',display:'flex', justifyContent:'center',alignItems: 'center'}}> <FingerprintIcon style={{color:\"#992E62\", fontSize: 150}}/></List.Content>\r\n                                                            <List.Content style={{width:'200px',height:'30px',display:'flex', justifyContent:'center',alignItems: 'center', fontSize: '18px',color:'#014d88',fontWeight:'bold', fontFamily:'\"poppins\", sans-serif'}}>{x.templateType}</List.Content>\r\n                                                        </List.Item>\r\n                                                    ))}\r\n\r\n                                                </List>\r\n\r\n                                            </Col>\r\n                                            <br/><br/><br/><br/><br/><br/>\r\n                                            <Col md={12} >\r\n                                                <MatButton\r\n                                                    type='button'\r\n                                                    variant='contained'\r\n                                                    color='primary'\r\n                                                    onClick={saveBiometrics}\r\n                                                    // className={classes.button}\r\n                                                    startIcon={<SaveIcon/>}\r\n                                                >\r\n                                                    Save Capture\r\n                                                </MatButton>\r\n                                            </Col>\r\n                                        </>\r\n                                    )\r\n                                    :\r\n                                    \"\"\r\n                                }\r\n                            </Row>\r\n                        </div>\r\n                    </div>\r\n\r\n                    :\"\"\r\n\r\n                }\r\n\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n{/*\r\n            <Form >\r\n\r\n                    <Card>\r\n                         <CardHeader>\r\n                                    Capture Biometrics\r\n                                </CardHeader>\r\n                        <CardBody>\r\n                            <Row form>\r\n                                <ToastContainer />\r\n                                <Col md={4}>\r\n                                    <FormGroup>\r\n                                        <Label for='device'>Select Device </Label>\r\n                                        <Input\r\n                                            type=\"select\"\r\n                                            name=\"device\"\r\n                                            id=\"device\"\r\n                                            onChange={checkDevice}\r\n                                            value={objValues.device}\r\n                                            required\r\n                                        >\r\n                                            <option value=\"\">Select Device </option>\r\n                                            {biometricDevices.map(({ id, name }) => (\r\n                                                <option key={id} value={name}>\r\n                                                    {name}\r\n                                                </option>\r\n                                            ))}\r\n\r\n                                        </Input>\r\n                                        {errors.device !==\"\" ? (\r\n                                            <span className={classes.error}>{errors.device}</span>\r\n                                        ) : \"\" }\r\n                                    </FormGroup>\r\n                                </Col>\r\n                                {showCapture ? (\r\n                                        <>\r\n                                            <Col md={4}>\r\n                                                <FormGroup>\r\n                                                    <Label for='device'>Select Finger</Label>\r\n                                                    <Input\r\n                                                        type=\"select\"\r\n                                                        name=\"templateType\"\r\n                                                        id=\"templateType\"\r\n                                                        onChange={handleInputChange}\r\n                                                        value={objValues.templateType}\r\n                                                        required\r\n                                                    >\r\n                                                        <option value=\"\">Select Finger </option>\r\n\r\n                                                        {fingerType.map((value) => (\r\n                                                            <option key={value.id} value={value.display}>\r\n                                                                {value.display}\r\n                                                            </option>\r\n                                                        ))}\r\n                                                    </Input>\r\n                                                    {errors.templateType !==\"\" ? (\r\n                                                        <span className={classes.error}>{errors.templateType}</span>\r\n                                                    ) : \"\" }\r\n                                                </FormGroup>\r\n                                            </Col>\r\n\r\n\r\n                                            <Col md={4}>\r\n\r\n                                                <MatButton\r\n                                                    type='button'\r\n                                                    variant='contained'\r\n                                                    color='primary'\r\n                                                    onClick={captureFinger}\r\n                                                    className={'mt-4'}\r\n                                                    startIcon={<FingerprintIcon />}\r\n                                                >\r\n                                                    Capture Finger\r\n                                                </MatButton>\r\n\r\n                                            </Col>\r\n                                            <br/>\r\n\r\n                                        </>\r\n                                    )\r\n                                    :\r\n                                    \"\"\r\n                                }\r\n                                 <img width='500' height='200' src={responseImage}/>\r\n                                <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\r\n\r\n                                    {loading && (\r\n                                        <>\r\n                                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                                                <Box sx={{ m: 1, position: 'relative' }}>\r\n                                                    <Fab\r\n                                                        aria-label=\"save\"\r\n                                                        color=\"secondary\"\r\n                                                        sx={buttonSx}\r\n\r\n                                                    >\r\n                                                        {success ? <CheckIcon /> : <FingerprintIcon />}\r\n                                                    </Fab>\r\n                                                    {loading && (\r\n                                                        <CircularProgress\r\n                                                            size={68}\r\n                                                            sx={{\r\n                                                                color: green[500],\r\n                                                                position: 'absolute',\r\n                                                                top: -6,\r\n                                                                left: -6,\r\n                                                                zIndex: 1,\r\n                                                            }}\r\n                                                        />\r\n                                                    )}\r\n                                                </Box>\r\n                                                <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                                                    {success ?` your  ${objValues.templateType} Finger captured.` : `Please place your  ${objValues.templateType} Finger on scanner.`}\r\n                                                </Typography>\r\n                                            </Box>\r\n                                        </>\r\n                                    )\r\n                                    }\r\n                                    {tryAgain && (\r\n                                        <>\r\n\r\n\r\n                                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                                                <Box sx={{ m: 1, position: 'relative' }}>\r\n                                                    <Fab\r\n                                                        aria-label=\"save\"\r\n                                                        color=\"secondary\"\r\n                                                        sx={buttonSx}\r\n\r\n                                                    >\r\n                                                        <FingerprintIcon />\r\n                                                    </Fab>\r\n                                                    {tryAgain && (\r\n                                                        <CircularProgress\r\n                                                            size={68}\r\n                                                            sx={{\r\n                                                                color: red[500],\r\n                                                                position: 'absolute',\r\n                                                                top: -6,\r\n                                                                left: -6,\r\n                                                                zIndex: 1,\r\n                                                            }}\r\n                                                        />\r\n                                                    )}\r\n                                                </Box>\r\n                                                <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                                                    Click to Recapture Again\r\n                                                </Typography>\r\n                                            </Box>\r\n                                        </>\r\n                                    )\r\n                                    }\r\n\r\n                                </Col>\r\n\r\n\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                {capturedFingered.length >=1 ? (\r\n                                        <>\r\n                                            <Col md={12} >\r\n                                                <h3>Captured Fingerprints</h3>\r\n                                            </Col>\r\n                                            <Col md={12} style={{marginTop:\"20px\"}}>\r\n                                                <List celled horizontal>\r\n                                                    {capturedFingered.map((x) => (\r\n                                                        <List.Item style={{width:'200px',height:'200px',display:'flex', justifyContent:'center',alignItems: 'center'}}>\r\n                                                             <List.Header><Icon name='cancel'  color='red' /> </List.Header>\r\n                                                            <List.Content> <FingerprintIcon style={{color:\"#2E7D32\", fontSize: 40}}/>{x.templateType}</List.Content>\r\n                                                        </List.Item>\r\n                                                    ))}\r\n\r\n                                                </List>\r\n\r\n                                            </Col>\r\n                                             <Col md={6} style={{marginTop:\"20px\"}}>\r\n                                        <List celled horizontal>\r\n                                            {[1,2,3].map((x) => (\r\n                                                <List.Item>\r\n                                                    <List.Header><Icon name='checkmark' color='green'/> </List.Header>\r\n                                                    <List.Content > <FingerprintIcon style={{color:\"#2E7D32\", fontSize: 40}} /> Finger Type</List.Content>\r\n                                                </List.Item>\r\n                                            ))}\r\n\r\n                                        </List>\r\n\r\n                                    </Col>\r\n                                            <br/><br/><br/><br/><br/><br/>\r\n                                            <Col md={12} >\r\n                                                <MatButton\r\n                                                    type='button'\r\n                                                    variant='contained'\r\n                                                    color='primary'\r\n                                                    onClick={saveBiometrics}\r\n                                                    // className={classes.button}\r\n                                                    startIcon={<SaveIcon/>}\r\n                                                >\r\n                                                    Save Capture\r\n                                                </MatButton>\r\n                                            </Col>\r\n                                        </>\r\n                                    )\r\n                                    :\r\n                                    \"\"\r\n                                }\r\n                            </Row>\r\n                        </CardBody>\r\n                    </Card>\r\n            </Form>\r\n*/}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Biometrics;","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\patient-module\\src\\main\\webapp\\components\\PatientCard.js",["194","195","196","197","198","199","200","201","202","203","204","205"],"import React,{useState, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport {Accordion, AccordionActions, AccordionDetails, AccordionSummary} from '@material-ui/core';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport {Button, Label} from 'semantic-ui-react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport {Col, Row, Modal} from \"reactstrap\";\r\nimport CaptureBiometric from './CaptureBiometric';\r\nimport axios from \"axios\";\r\nimport {token, url as baseUrl} from \"../../../api\";\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n    },\r\n    secondaryHeading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    icon: {\r\n        verticalAlign: 'bottom',\r\n        height: 20,\r\n        width: 20,\r\n    },\r\n    details: {\r\n        alignItems: 'center',\r\n    },\r\n    column: {\r\n        flexBasis: '20.33%',\r\n    },\r\n    helper: {\r\n        borderLeft: `2px solid ${theme.palette.divider}`,\r\n        padding: `${theme.spacing(1)}px ${theme.spacing(1) * 2}px`,\r\n    },\r\n    link: {\r\n        color: theme.palette.primary.main,\r\n        textDecoration: 'none',\r\n        '&:hover': {\r\n            textDecoration: 'underline',\r\n        },\r\n    },\r\n});\r\n\r\nfunction PatientCard(props) {\r\n    const { classes } = props;\r\n    const patientObj = props.patientObj ? props.patientObj : {};\r\n    const permissions= props.permissions ? props.permissions : [];\r\n    const [modal, setModal] = useState(false) //Modal to collect sample\r\n    const [patientBiometricStatus, setPatientBiometricStatus]= useState(props.patientBiometricStatus);\r\n    const toggleModal = () => setModal(!modal)\r\n\r\n    const [biometricStatus, setBiometricStatus] = useState(false);\r\n    const [devices, setDevices] = useState([]);\r\n    useEffect(() => {\r\n        setPatientBiometricStatus(props.patientBiometricStatus)\r\n        TemplateType();\r\n    }, [props.patientBiometricStatus]);\r\n    //Get list of KP\r\n    const TemplateType =()=>{\r\n        axios\r\n            .get(`${baseUrl}modules/check?moduleName=biometric`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setBiometricStatus(response.data);\r\n                if(response.data===true){\r\n                    axios\r\n                        .get(`${baseUrl}biometrics/devices`,\r\n                            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n                        )\r\n                        .then((response) => {\r\n                            setDevices(response.data);\r\n\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log(error)\r\n                        });\r\n\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                //console.log(error);\r\n            });\r\n\r\n    }\r\n    const getHospitalNumber = (identifier) => {\r\n        const hospitalNumber = identifier.identifier.find(obj => obj.type == 'HospitalNumber');\r\n        return hospitalNumber ? hospitalNumber.value : '';\r\n    };\r\n\r\n    const calculate_age = dob => {\r\n        const today = new Date();\r\n        const dateParts = dob.split(\"-\");\r\n        const birthDate = new Date(dob); // create a date object directlyfrom`dob1`argument\r\n        let age_now = today.getFullYear() - birthDate.getFullYear();\r\n        const m = today.getMonth() - birthDate.getMonth();\r\n        if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n            age_now--;\r\n        }\r\n        if (age_now === 0) {\r\n            return m + \" month(s)\";\r\n        }\r\n        return age_now + \" year(s)\";\r\n    };\r\n\r\n    const getPhone = (contactPoint) => {\r\n        const phoneContact = contactPoint.contactPoint.find(obj => obj.type == 'phone');\r\n        return phoneContact ? phoneContact.value : '';\r\n    };\r\n\r\n    const getAddress = (address) => {\r\n        const city = address && address.address && address.address.length > 0 ? address.address[0].city : null;\r\n        return city;\r\n    };\r\n\r\n\r\n    const handleBiometricCapture = (id) => {\r\n        let patientObjID= id\r\n        setModal(!modal)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n\r\n\r\n\r\n\r\n\r\n            <Accordion defaultExpanded>\r\n                <AccordionSummary>\r\n\r\n                    <Row>\r\n\r\n                        <Col md={11}>\r\n                            <Row className={\"mt-1\"}>\r\n                                <Col md={12} className={classes.root2} >\r\n                                    <b style={{fontSize: \"25px\", color:'rgb(153, 46, 98)'}}>\r\n                                        {patientObj.surname + \", \" + patientObj.firstName + \" \" + patientObj.otherName}\r\n                                        < span style={{color:'green'}}>\r\n                                             {\": \"+\"Active\"}\r\n                                        </span>\r\n                                    </b>\r\n\r\n                                </Col>\r\n                                <Col md={4} className={classes.root2} style={{marginTop:\"10px\"}}>\r\n                                    <span style={{color:'#000'}}>\r\n                                        {\" \"}\r\n                                        Hospital Number : <b style={{color:'#0B72AA'}}>{getHospitalNumber(patientObj.identifier) }</b>\r\n                                    </span>\r\n                                </Col>\r\n\r\n                                <Col md={4} className={classes.root2} style={{marginTop:\"10px\"}}>\r\n                                    <span style={{color:'#000'}}>\r\n                                        Date Of Birth : <b style={{color:'#0B72AA'}}>{patientObj.dateOfBirth }</b>\r\n                                    </span>\r\n                                </Col>\r\n                                <Col md={4} className={classes.root2} style={{marginTop:\"10px\"}}>\r\n                                <span style={{color:'#000'}}>\r\n                                    {\" \"}\r\n                                    Age : <b style={{color:'#0B72AA'}}>{calculate_age(patientObj.dateOfBirth) }</b>\r\n                                </span>\r\n                                </Col>\r\n                                <Col md={4} style={{marginTop:\"10px\"}}>\r\n                                    <span  style={{color:'#000'}}>\r\n                                        {\" \"}\r\n                                        Sex :{\" \"}\r\n                                        <b style={{color:'#0B72AA',fontFamily:`'poppins', sans-serif`,fontWeight:'bolder'}}>{patientObj.sex }</b>\r\n                                    </span>\r\n\r\n                                </Col>\r\n                                <Col md={4} className={classes.root2} style={{marginTop:\"10px\"}}>\r\n                                <span style={{color:'#000'}}>\r\n                                    {\" \"}\r\n                                    Phone Number : <b style={{color:'#0B72AA'}}>{getPhone(patientObj.contactPoint)}</b>\r\n                                </span>\r\n                                </Col>\r\n                                <Col md={4} className={classes.root2} style={{marginTop:\"10px\"}}>\r\n                                <span style={{color:'#000'}}>\r\n                                    {\" \"}\r\n                                    Address : <b style={{color:'#0B72AA'}}>{getAddress(patientObj.address)} </b>\r\n                                </span>\r\n\r\n                                </Col>\r\n\r\n\r\n                            </Row>\r\n                        </Col>\r\n\r\n\r\n\r\n                    </Row>\r\n\r\n                </AccordionSummary>\r\n                <AccordionDetails className={classes.details}>\r\n                    {biometricStatus===true ? (\r\n                            <>\r\n                                <div >\r\n                                    <Typography variant=\"caption\">\r\n                                        <Label  style={{height:'30px', fontSize:'14px'}} color={patientBiometricStatus===true? \"green\" : \"red\"} size={\"large\"}>\r\n                                            Biometric Status\r\n                                            <Label.Detail>{patientBiometricStatus===true? \"Captured\" : \"Not Capture\"}</Label.Detail>\r\n                                        </Label>\r\n                                        {patientBiometricStatus!==true ? (\r\n\r\n                                                <>\r\n                                                    {permissions.includes('patient_check_in') || permissions.includes(\"all_permission\") ? (\r\n                                                            <>\r\n                                                                <Label style={{height:'30px', fontSize:'14px'}} as='a' color='teal' onClick={() => handleBiometricCapture(patientObj.id)} tag>\r\n                                                                    Capture Now\r\n                                                                </Label>\r\n                                                            </>\r\n                                                        )\r\n                                                        :\"\"\r\n                                                    }\r\n                                                </>\r\n                                            )\r\n                                            :\"\"\r\n                                        }\r\n\r\n                                    </Typography>\r\n                                </div>\r\n                            </>\r\n                        )\r\n                        :\r\n                        <>\r\n                            <div >\r\n                                <Typography variant=\"caption\">\r\n                                    <Label color={\"red\"} style={{height:'30px', fontSize:'14px'}}>\r\n                                        Biometrics Module Not Install\r\n\r\n                                    </Label>\r\n\r\n                                </Typography>\r\n                            </div>\r\n                        </>\r\n                    }\r\n                </AccordionDetails>\r\n            </Accordion>\r\n{/*\r\n            <CaptureBiometric  modalstatus={modal} togglestatus={toggleModal} patientId={patientObj.id} biometricDevices={devices} setPatientBiometricStatus={setPatientBiometricStatus} />\r\n*/}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nPatientCard.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(PatientCard);","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\patient-module\\src\\main\\webapp\\components\\CaptureBiometric.js",["206","207","208","209","210","211","212","213","214","215","216","217","218","219","220"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport {Modal,ModalHeader, ModalBody,Form,\r\n        Row,Label,Card,CardBody,Col, FormGroup,CardHeader, Input\r\n        } from \"reactstrap\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Select from \"react-select\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport FingerprintIcon from '@material-ui/icons/Fingerprint';\r\nimport { Button2, Icon, List } from 'semantic-ui-react'\r\nimport {ToastContainer, toast} from \"react-toastify\";\r\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\r\nimport axios from \"axios\";\r\nimport {token, url as baseUrl} from \"../../../api\";\r\n\r\nimport { green, red } from '@mui/material/colors';\r\nimport { Dimmer, Loader, Image, Segment } from 'semantic-ui-react'\r\n\r\nimport Box from '@mui/material/Box';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Button from '@mui/material/Button';\r\nimport Fab from '@mui/material/Fab';\r\nimport CheckIcon from '@mui/icons-material/Check';\r\n//import SaveIcon from '@mui/icons-material/Save';\r\n// import LinearProgress from '@mui/material/LinearProgress';\r\nimport Typography from '@mui/material/Typography';\r\n// import CancelIcon from '@mui/icons-material/Cancel';\r\n// import ModalImage from \"react-modal-image\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n    },\r\n    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20,\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        \"& > *\": {\r\n            margin: theme.spacing(1),\r\n        },\r\n    },\r\n    input: {\r\n        display: \"none\",\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"12.8px\",\r\n    },\r\n}));\r\n\r\nlet checkUrl=\"\"\r\n\r\nconst CaptureBiometric = (props) => {\r\n    const classes = useStyles()\r\n    const biometricDevices = props.biometricDevices\r\n    const [objValues, setObjValues]= useState({biometricType: \"FINGERPRINT\", patientId:props.patientId, templateType:\"\", device:\"\"})\r\n    const [fingerType, setFingerType] = useState([]);\r\n    const [devices, setDevices] = useState(props.biometricDevices);\r\n    const [loading, setLoading] = React.useState(false);\r\n    const [showCapture, setshowCapture] = React.useState(false);\r\n    const [tryAgain, setTryAgain] = React.useState(false);\r\n    const [success, setSuccess] = React.useState(false);\r\n    const [errors, setErrors] = useState({});\r\n   // const [responseImage, setResponseImage] = useState(\"\")\r\n    const [capturedFingered, setCapturedFingered]= useState([])\r\n     console.log(biometricDevices)\r\n    const buttonSx = {\r\n      ...(success && {\r\n        bgcolor: green[500],\r\n        '&:hover': {\r\n          bgcolor: green[700],\r\n        },\r\n      }),\r\n    };\r\n\r\n\r\n    useEffect(() => {      \r\n        TemplateType();\r\n        if(objValues.device===\"\"){\r\n            setshowCapture(false)\r\n        }\r\n        \r\n      }, []);\r\n     //Get list of Finger index\r\n     const TemplateType =()=>{\r\n        axios\r\n           .get(`${baseUrl}application-codesets/v2/BIOMETRIC_CAPTURE_FINGERS`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {\r\n               setFingerType(response.data);\r\n           })\r\n           .catch((error) => {\r\n           });\r\n       \r\n     }\r\n\r\n     //check if device is plugged or not \r\n     const checkDevice = e =>{\r\n        const deviceName =e.target.value;\r\n        const selectedDevice=biometricDevices.find((x)=> x.name ===deviceName )\r\n        checkUrl= selectedDevice.url===null? baseUrl : selectedDevice.url\r\n        console.log(checkUrl)\r\n        setObjValues({...objValues, device:deviceName})\r\n        axios\r\n           .get(`${checkUrl}biometrics/secugen/boot?reader=${deviceName}`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {\r\n            if(response.data.errorType ===\"ERROR\"){\r\n                toast.error(response.data.errorName + \" is not plug\");\r\n                //setshowCapture(true)\r\n            }else{\r\n                setshowCapture(true)\r\n            }\r\n           })\r\n           .catch((error) => {\r\n           });\r\n     }\r\n     // handle the input changes \r\n\r\n     const handleInputChange = e => {        \r\n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n    }\r\n    //form validation \r\n    const validate = () => {\r\n        let temp = { ...errors }\r\n        temp.templateType = objValues.templateType ? \"\" : \"This field is required\"\r\n        temp.device = objValues.device ? \"\" : \"This field is required\"\r\n        setErrors({\r\n            ...temp\r\n            })    \r\n        return Object.values(temp).every(x => x == \"\")\r\n    }\r\n    //to capture  selected index finger \r\n    const captureFinger = (e) => {        \r\n        e.preventDefault();\r\n        if(validate()){\r\n            axios.post(`${checkUrl}biometrics/secugen/enrollment?reader=SG_DEV_AUTO`,objValues,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`}},           \r\n            )\r\n              .then(response => {\r\n                  setLoading(true);\r\n                  if(response.data.type ===\"ERROR\"){                   \r\n                    setLoading(false);\r\n                    setTryAgain(true);\r\n                    window.setTimeout(() => {\r\n                        setTryAgain(false);\r\n                      }, 5000);\r\n                    toast.error(response.data.message.ERROR);\r\n                  }else{\r\n                    const templateType= response.data.templateType\r\n                    setTryAgain(false);\r\n                    setSuccess(true)\r\n                    window.setTimeout(() => {\r\n                        setSuccess(false)\r\n                        setLoading(false);                        \r\n                      }, 5000);\r\n                                        \r\n                    setCapturedFingered([...capturedFingered, response.data])\r\n                    fingerType.splice(templateType, 1);\r\n                    setFingerType([...fingerType]);\r\n                  }\r\n                  //toast.success(\"Record save successful\");\r\n              })\r\n              .catch(error => {                 \r\n              });\r\n        }\r\n    }\r\n\r\n    //Save Biometric capture\r\n    const saveBiometrics = (e) => {        \r\n        e.preventDefault();\r\n        if(capturedFingered.length > 1){\r\n            const capturedObj= capturedFingered[capturedFingered.length - 1]\r\n            axios.post(`${baseUrl}biometrics/templates`,capturedObj,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`}},           \r\n            )\r\n              .then(response => {\r\n                toast.success(\"Biometric save successful\");\r\n                setCapturedFingered([])\r\n                props.setPatientBiometricStatus(true)\r\n                props.togglestatus()\r\n            })\r\n            .catch(error => {\r\n                toast.error(\"Something went wrong\");\r\n            });\r\n        }else{\r\n            \r\n            toast.error(\"You can't save less than 2 finger\");\r\n        }\r\n  }  \r\n    \r\n // console.log(capturedFingered)\r\n\r\n    return (\r\n        <div >\r\n            <Card >\r\n                <CardBody>\r\n                    <Modal isOpen={props.modalstatus} toggle={props.togglestatus} className={props.className} size=\"lg\">\r\n                        <Form >\r\n                            <ModalHeader toggle={props.togglestatus}>capture Biometric</ModalHeader>\r\n                            <ModalBody>\r\n                                <Card>\r\n                                {/* <CardHeader>\r\n                                    Capture Biometrics\r\n                                </CardHeader> */}\r\n                                    <CardBody>\r\n                                    <Row form>\r\n                                    <ToastContainer />\r\n                                        <Col md={4}>\r\n                                            <FormGroup>\r\n                                                <Label for='device'>Select Device </Label>\r\n                                                <Input\r\n                                                    type=\"select\"\r\n                                                    name=\"device\"\r\n                                                    id=\"device\"\r\n                                                    onChange={checkDevice}\r\n                                                    value={objValues.device}\r\n                                                    required\r\n                                                >\r\n                                                <option value=\"\">Select Device </option>\r\n                                                {biometricDevices.map(({ id, name }) => (\r\n                                                    <option key={id} value={name}>\r\n                                                        {name}\r\n                                                    </option>\r\n                                                ))}\r\n                                              \r\n                                            </Input>\r\n                                            {errors.device !==\"\" ? (\r\n                                                <span className={classes.error}>{errors.device}</span>\r\n                                            ) : \"\" }\r\n                                            </FormGroup>\r\n                                        </Col>\r\n                                        {showCapture ? (\r\n                                        <>\r\n                                            <Col md={4}>\r\n                                            <FormGroup>\r\n                                                <Label for='device'>Select Finger</Label>\r\n                                                <Input\r\n                                                    type=\"select\"\r\n                                                    name=\"templateType\"\r\n                                                    id=\"templateType\"\r\n                                                    onChange={handleInputChange}\r\n                                                    value={objValues.templateType}\r\n                                                    required\r\n                                                >\r\n                                                <option value=\"\">Select Finger </option>\r\n\r\n                                                {fingerType.map((value) => (\r\n                                                    <option key={value.id} value={value.display}>\r\n                                                        {value.display}\r\n                                                    </option>\r\n                                                ))}\r\n                                            </Input>\r\n                                            {errors.templateType !==\"\" ? (\r\n                                                <span className={classes.error}>{errors.templateType}</span>\r\n                                            ) : \"\" }\r\n                                            </FormGroup>\r\n                                        </Col>\r\n                                        \r\n\r\n                                        <Col md={4}>\r\n                                        \r\n                                        <MatButton\r\n                                            type='button'\r\n                                            variant='contained'\r\n                                            color='primary'\r\n                                            onClick={captureFinger}\r\n                                            className={'mt-4'}\r\n                                            startIcon={<FingerprintIcon />}\r\n                                        >\r\n                                            Capture Finger\r\n                                        </MatButton>\r\n\r\n                                        </Col>\r\n                                        <br/>\r\n                                        \r\n                                        </>\r\n                                        )\r\n                                        :\r\n                                        \"\"\r\n                                        }\r\n                                        {/* <img width='500' height='200' src={responseImage}/> */}\r\n                                        <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\r\n                                       \r\n                                     {loading && (\r\n                                        <>\r\n                                         <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                                            <Box sx={{ m: 1, position: 'relative' }}>\r\n                                                <Fab\r\n                                                aria-label=\"save\"\r\n                                                color=\"secondary\"\r\n                                                sx={buttonSx}\r\n                                                \r\n                                                >\r\n                                                {success ? <CheckIcon /> : <FingerprintIcon />}\r\n                                                </Fab>\r\n                                                {loading && (\r\n                                                <CircularProgress\r\n                                                    size={68}\r\n                                                    sx={{\r\n                                                    color: green[500],\r\n                                                    position: 'absolute',\r\n                                                    top: -6,\r\n                                                    left: -6,\r\n                                                    zIndex: 1,\r\n                                                    }}\r\n                                                />\r\n                                                )}\r\n                                            </Box>\r\n                                            <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                                            {success ?` your  ${objValues.templateType} Finger captured.` : `Please place your  ${objValues.templateType} Finger on scanner.`}\r\n                                            </Typography>\r\n                                        </Box>\r\n                                        </>\r\n                                        )\r\n                                        } \r\n                                        {tryAgain && (\r\n                                        <>\r\n                                        \r\n\r\n                                         <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                                            <Box sx={{ m: 1, position: 'relative' }}>\r\n                                                <Fab\r\n                                                aria-label=\"save\"\r\n                                                color=\"secondary\"\r\n                                                sx={buttonSx}\r\n                                                \r\n                                                >\r\n                                                 <FingerprintIcon />\r\n                                                </Fab>\r\n                                                {tryAgain && (\r\n                                                <CircularProgress\r\n                                                    size={68}\r\n                                                    sx={{\r\n                                                    color: red[500],\r\n                                                    position: 'absolute',\r\n                                                    top: -6,\r\n                                                    left: -6,\r\n                                                    zIndex: 1,\r\n                                                    }}\r\n                                                />\r\n                                                )}\r\n                                            </Box>\r\n                                            <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                                            Click to Recapture Again\r\n                                            </Typography>\r\n                                        </Box>\r\n                                        </>\r\n                                        )\r\n                                        } \r\n                                        {/*  */}\r\n                                        </Col>\r\n                                       \r\n                                            \r\n                                        </Row>\r\n\r\n                                    <Row>\r\n                                 {capturedFingered.length >=1 ? (  \r\n                                     <>                               \r\n                                    <Col md={12} >\r\n                                        <h3>Captured Fingerprints</h3>\r\n                                    </Col>\r\n                                    <Col md={12} style={{marginTop:\"20px\"}}>\r\n                                        <List celled horizontal>\r\n                                            {capturedFingered.map((x) => (\r\n                                                <List.Item>\r\n                                                    {/* <List.Header><Icon name='cancel'  color='red' /> </List.Header> */}\r\n                                                    <List.Content> <FingerprintIcon style={{color:\"#2E7D32\", fontSize: 40}}/>{x.templateType}</List.Content>\r\n                                                </List.Item>\r\n                                            ))}\r\n\r\n                                        </List>\r\n\r\n                                    </Col>\r\n                                    {/* <Col md={6} style={{marginTop:\"20px\"}}>\r\n                                        <List celled horizontal>\r\n                                            {[1,2,3].map((x) => (\r\n                                                <List.Item>\r\n                                                    <List.Header><Icon name='checkmark' color='green'/> </List.Header>\r\n                                                    <List.Content > <FingerprintIcon style={{color:\"#2E7D32\", fontSize: 40}} /> Finger Type</List.Content>\r\n                                                </List.Item>\r\n                                            ))}\r\n\r\n                                        </List>\r\n\r\n                                    </Col> */}\r\n                                    <br/><br/><br/><br/><br/><br/>\r\n                                        <Col md={12} >\r\n                                            <MatButton\r\n                                                type='button'\r\n                                                variant='contained'\r\n                                                color='primary'\r\n                                                onClick={saveBiometrics}\r\n                                                // className={classes.button}\r\n                                                startIcon={<SaveIcon/>}\r\n                                            >\r\n                                                Save Capture\r\n                                            </MatButton>\r\n                                        </Col>\r\n                                    </> \r\n                                    )\r\n                                        :\r\n                                        \"\"\r\n                                    }\r\n                                    </Row>\r\n                                    </CardBody>\r\n                                </Card>\r\n                            </ModalBody>\r\n                        </Form>\r\n\r\n                    </Modal>\r\n                </CardBody>\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CaptureBiometric;\r\n",{"ruleId":"221","severity":1,"message":"222","line":1,"column":16,"nodeType":"223","messageId":"224","endLine":1,"endColumn":27},{"ruleId":"221","severity":1,"message":"225","line":1,"column":29,"nodeType":"223","messageId":"224","endLine":1,"endColumn":38},{"ruleId":"221","severity":1,"message":"226","line":1,"column":40,"nodeType":"223","messageId":"224","endLine":1,"endColumn":48},{"ruleId":"221","severity":1,"message":"227","line":15,"column":8,"nodeType":"223","messageId":"224","endLine":15,"endColumn":19},{"ruleId":"221","severity":1,"message":"228","line":12,"column":10,"nodeType":"223","messageId":"224","endLine":12,"endColumn":21},{"ruleId":"221","severity":1,"message":"229","line":13,"column":9,"nodeType":"223","messageId":"224","endLine":13,"endColumn":13},{"ruleId":"221","severity":1,"message":"230","line":13,"column":14,"nodeType":"223","messageId":"224","endLine":13,"endColumn":22},{"ruleId":"221","severity":1,"message":"231","line":13,"column":23,"nodeType":"223","messageId":"224","endLine":13,"endColumn":33},{"ruleId":"221","severity":1,"message":"232","line":13,"column":34,"nodeType":"223","messageId":"224","endLine":13,"endColumn":42},{"ruleId":"221","severity":1,"message":"233","line":16,"column":10,"nodeType":"223","messageId":"224","endLine":16,"endColumn":15},{"ruleId":"221","severity":1,"message":"234","line":112,"column":21,"nodeType":"223","messageId":"224","endLine":112,"endColumn":31},{"ruleId":"221","severity":1,"message":"235","line":115,"column":11,"nodeType":"223","messageId":"224","endLine":115,"endColumn":17},{"ruleId":"236","severity":1,"message":"237","line":116,"column":53,"nodeType":"238","messageId":"239","endLine":116,"endColumn":55},{"ruleId":"221","severity":1,"message":"240","line":149,"column":23,"nodeType":"223","messageId":"224","endLine":149,"endColumn":31},{"ruleId":"221","severity":1,"message":"241","line":163,"column":15,"nodeType":"223","messageId":"224","endLine":163,"endColumn":24},{"ruleId":"236","severity":1,"message":"237","line":177,"column":75,"nodeType":"238","messageId":"239","endLine":177,"endColumn":77},{"ruleId":"221","severity":1,"message":"242","line":181,"column":11,"nodeType":"223","messageId":"224","endLine":181,"endColumn":21},{"ruleId":"221","severity":1,"message":"243","line":186,"column":11,"nodeType":"223","messageId":"224","endLine":186,"endColumn":20},{"ruleId":"244","severity":1,"message":"245","line":204,"column":54,"nodeType":"246","messageId":"247","endLine":204,"endColumn":56},{"ruleId":"244","severity":1,"message":"245","line":204,"column":95,"nodeType":"246","messageId":"247","endLine":204,"endColumn":97},{"ruleId":"244","severity":1,"message":"245","line":215,"column":54,"nodeType":"246","messageId":"247","endLine":215,"endColumn":56},{"ruleId":"244","severity":1,"message":"245","line":215,"column":95,"nodeType":"246","messageId":"247","endLine":215,"endColumn":97},{"ruleId":"244","severity":1,"message":"245","line":226,"column":56,"nodeType":"246","messageId":"247","endLine":226,"endColumn":58},{"ruleId":"244","severity":1,"message":"245","line":226,"column":97,"nodeType":"246","messageId":"247","endLine":226,"endColumn":99},{"ruleId":"221","severity":1,"message":"248","line":4,"column":8,"nodeType":"223","messageId":"224","endLine":4,"endColumn":25},{"ruleId":"221","severity":1,"message":"249","line":11,"column":8,"nodeType":"223","messageId":"224","endLine":11,"endColumn":22},{"ruleId":"221","severity":1,"message":"250","line":12,"column":8,"nodeType":"223","messageId":"224","endLine":12,"endColumn":20},{"ruleId":"221","severity":1,"message":"251","line":13,"column":8,"nodeType":"223","messageId":"224","endLine":13,"endColumn":20},{"ruleId":"221","severity":1,"message":"252","line":14,"column":8,"nodeType":"223","messageId":"224","endLine":14,"endColumn":18},{"ruleId":"221","severity":1,"message":"253","line":16,"column":9,"nodeType":"223","messageId":"224","endLine":16,"endColumn":14},{"ruleId":"221","severity":1,"message":"254","line":30,"column":27,"nodeType":"223","messageId":"224","endLine":30,"endColumn":43},{"ruleId":"221","severity":1,"message":"255","line":36,"column":11,"nodeType":"223","messageId":"224","endLine":36,"endColumn":30},{"ruleId":"221","severity":1,"message":"256","line":2,"column":8,"nodeType":"223","messageId":"224","endLine":2,"endColumn":17},{"ruleId":"221","severity":1,"message":"257","line":3,"column":21,"nodeType":"223","messageId":"224","endLine":3,"endColumn":31},{"ruleId":"221","severity":1,"message":"258","line":5,"column":8,"nodeType":"223","messageId":"224","endLine":5,"endColumn":17},{"ruleId":"221","severity":1,"message":"259","line":7,"column":10,"nodeType":"223","messageId":"224","endLine":7,"endColumn":13},{"ruleId":"221","severity":1,"message":"260","line":8,"column":10,"nodeType":"223","messageId":"224","endLine":8,"endColumn":14},{"ruleId":"221","severity":1,"message":"261","line":8,"column":23,"nodeType":"223","messageId":"224","endLine":8,"endColumn":30},{"ruleId":"221","severity":1,"message":"262","line":8,"column":32,"nodeType":"223","messageId":"224","endLine":8,"endColumn":36},{"ruleId":"221","severity":1,"message":"263","line":13,"column":8,"nodeType":"223","messageId":"224","endLine":13,"endColumn":11},{"ruleId":"221","severity":1,"message":"264","line":14,"column":41,"nodeType":"223","messageId":"224","endLine":14,"endColumn":52},{"ruleId":"221","severity":1,"message":"265","line":16,"column":8,"nodeType":"223","messageId":"224","endLine":16,"endColumn":24},{"ruleId":"221","severity":1,"message":"266","line":17,"column":8,"nodeType":"223","messageId":"224","endLine":17,"endColumn":16},{"ruleId":"221","severity":1,"message":"267","line":21,"column":9,"nodeType":"223","messageId":"224","endLine":21,"endColumn":19},{"ruleId":"221","severity":1,"message":"268","line":22,"column":36,"nodeType":"223","messageId":"224","endLine":22,"endColumn":47},{"ruleId":"221","severity":1,"message":"269","line":22,"column":83,"nodeType":"223","messageId":"224","endLine":22,"endColumn":93},{"ruleId":"221","severity":1,"message":"270","line":26,"column":8,"nodeType":"223","messageId":"224","endLine":26,"endColumn":20},{"ruleId":"221","severity":1,"message":"271","line":40,"column":10,"nodeType":"223","messageId":"224","endLine":40,"endColumn":24},{"ruleId":"221","severity":1,"message":"272","line":41,"column":8,"nodeType":"223","messageId":"224","endLine":41,"endColumn":13},{"ruleId":"221","severity":1,"message":"273","line":43,"column":7,"nodeType":"223","messageId":"224","endLine":43,"endColumn":11},{"ruleId":"221","severity":1,"message":"274","line":44,"column":7,"nodeType":"223","messageId":"224","endLine":44,"endColumn":18},{"ruleId":"221","severity":1,"message":"275","line":156,"column":11,"nodeType":"223","messageId":"224","endLine":156,"endColumn":21},{"ruleId":"221","severity":1,"message":"234","line":157,"column":21,"nodeType":"223","messageId":"224","endLine":157,"endColumn":31},{"ruleId":"221","severity":1,"message":"276","line":162,"column":12,"nodeType":"223","messageId":"224","endLine":162,"endColumn":17},{"ruleId":"221","severity":1,"message":"277","line":162,"column":19,"nodeType":"223","messageId":"224","endLine":162,"endColumn":27},{"ruleId":"221","severity":1,"message":"278","line":165,"column":13,"nodeType":"223","messageId":"224","endLine":165,"endColumn":25},{"ruleId":"221","severity":1,"message":"279","line":165,"column":27,"nodeType":"223","messageId":"224","endLine":165,"endColumn":34},{"ruleId":"221","severity":1,"message":"280","line":176,"column":12,"nodeType":"223","messageId":"224","endLine":176,"endColumn":23},{"ruleId":"221","severity":1,"message":"281","line":176,"column":25,"nodeType":"223","messageId":"224","endLine":176,"endColumn":39},{"ruleId":"221","severity":1,"message":"282","line":180,"column":24,"nodeType":"223","messageId":"224","endLine":180,"endColumn":37},{"ruleId":"283","severity":1,"message":"284","line":217,"column":39,"nodeType":"285","messageId":"286","endLine":217,"endColumn":41},{"ruleId":"287","severity":1,"message":"288","line":231,"column":8,"nodeType":"289","endLine":231,"endColumn":10,"suggestions":"290"},{"ruleId":"221","severity":1,"message":"291","line":265,"column":9,"nodeType":"223","messageId":"224","endLine":265,"endColumn":23},{"ruleId":"221","severity":1,"message":"292","line":270,"column":11,"nodeType":"223","messageId":"224","endLine":270,"endColumn":23},{"ruleId":"221","severity":1,"message":"293","line":278,"column":11,"nodeType":"223","messageId":"224","endLine":278,"endColumn":18},{"ruleId":"244","severity":1,"message":"294","line":378,"column":78,"nodeType":"246","messageId":"247","endLine":378,"endColumn":80},{"ruleId":"244","severity":1,"message":"294","line":378,"column":107,"nodeType":"246","messageId":"247","endLine":378,"endColumn":109},{"ruleId":"244","severity":1,"message":"245","line":378,"column":107,"nodeType":"246","messageId":"247","endLine":378,"endColumn":109},{"ruleId":"244","severity":1,"message":"245","line":378,"column":150,"nodeType":"246","messageId":"247","endLine":378,"endColumn":152},{"ruleId":"221","severity":1,"message":"295","line":405,"column":11,"nodeType":"223","messageId":"224","endLine":405,"endColumn":19},{"ruleId":"221","severity":1,"message":"296","line":413,"column":11,"nodeType":"223","messageId":"224","endLine":413,"endColumn":19},{"ruleId":"236","severity":1,"message":"237","line":418,"column":69,"nodeType":"238","messageId":"239","endLine":418,"endColumn":71},{"ruleId":"221","severity":1,"message":"297","line":450,"column":11,"nodeType":"223","messageId":"224","endLine":450,"endColumn":18},{"ruleId":"283","severity":1,"message":"284","line":465,"column":92,"nodeType":"285","messageId":"286","endLine":465,"endColumn":94},{"ruleId":"221","severity":1,"message":"298","line":120,"column":11,"nodeType":"223","messageId":"224","endLine":120,"endColumn":23},{"ruleId":"221","severity":1,"message":"299","line":121,"column":11,"nodeType":"223","messageId":"224","endLine":121,"endColumn":30},{"ruleId":"221","severity":1,"message":"300","line":122,"column":11,"nodeType":"223","messageId":"224","endLine":122,"endColumn":34},{"ruleId":"221","severity":1,"message":"301","line":123,"column":11,"nodeType":"223","messageId":"224","endLine":123,"endColumn":23},{"ruleId":"221","severity":1,"message":"277","line":124,"column":19,"nodeType":"223","messageId":"224","endLine":124,"endColumn":27},{"ruleId":"221","severity":1,"message":"302","line":126,"column":20,"nodeType":"223","messageId":"224","endLine":126,"endColumn":29},{"ruleId":"221","severity":1,"message":"303","line":130,"column":12,"nodeType":"223","messageId":"224","endLine":130,"endColumn":19},{"ruleId":"221","severity":1,"message":"304","line":130,"column":21,"nodeType":"223","messageId":"224","endLine":130,"endColumn":31},{"ruleId":"236","severity":1,"message":"237","line":158,"column":69,"nodeType":"238","messageId":"239","endLine":158,"endColumn":71},{"ruleId":"236","severity":1,"message":"237","line":177,"column":80,"nodeType":"238","messageId":"239","endLine":177,"endColumn":82},{"ruleId":"236","severity":1,"message":"237","line":178,"column":74,"nodeType":"238","messageId":"239","endLine":178,"endColumn":76},{"ruleId":"236","severity":1,"message":"237","line":179,"column":74,"nodeType":"238","messageId":"239","endLine":179,"endColumn":76},{"ruleId":"236","severity":1,"message":"237","line":180,"column":77,"nodeType":"238","messageId":"239","endLine":180,"endColumn":79},{"ruleId":"221","severity":1,"message":"305","line":182,"column":19,"nodeType":"223","messageId":"224","endLine":182,"endColumn":25},{"ruleId":"287","severity":1,"message":"306","line":216,"column":8,"nodeType":"289","endLine":216,"endColumn":10,"suggestions":"307"},{"ruleId":"221","severity":1,"message":"308","line":239,"column":15,"nodeType":"223","messageId":"224","endLine":239,"endColumn":27},{"ruleId":"236","severity":1,"message":"237","line":329,"column":62,"nodeType":"238","messageId":"239","endLine":329,"endColumn":64},{"ruleId":"221","severity":1,"message":"240","line":353,"column":27,"nodeType":"223","messageId":"224","endLine":353,"endColumn":35},{"ruleId":"221","severity":1,"message":"240","line":355,"column":27,"nodeType":"223","messageId":"224","endLine":355,"endColumn":35},{"ruleId":"236","severity":1,"message":"237","line":481,"column":28,"nodeType":"238","messageId":"239","endLine":481,"endColumn":30},{"ruleId":"236","severity":1,"message":"237","line":483,"column":35,"nodeType":"238","messageId":"239","endLine":483,"endColumn":37},{"ruleId":"221","severity":1,"message":"309","line":510,"column":9,"nodeType":"223","messageId":"224","endLine":510,"endColumn":19},{"ruleId":"221","severity":1,"message":"226","line":1,"column":16,"nodeType":"223","messageId":"224","endLine":1,"endColumn":24},{"ruleId":"221","severity":1,"message":"222","line":1,"column":16,"nodeType":"223","messageId":"224","endLine":1,"endColumn":27},{"ruleId":"221","severity":1,"message":"225","line":1,"column":29,"nodeType":"223","messageId":"224","endLine":1,"endColumn":38},{"ruleId":"221","severity":1,"message":"226","line":1,"column":40,"nodeType":"223","messageId":"224","endLine":1,"endColumn":48},{"ruleId":"221","severity":1,"message":"268","line":3,"column":36,"nodeType":"223","messageId":"224","endLine":3,"endColumn":47},{"ruleId":"221","severity":1,"message":"232","line":3,"column":55,"nodeType":"223","messageId":"224","endLine":3,"endColumn":63},{"ruleId":"221","severity":1,"message":"310","line":3,"column":65,"nodeType":"223","messageId":"224","endLine":3,"endColumn":70},{"ruleId":"221","severity":1,"message":"311","line":3,"column":72,"nodeType":"223","messageId":"224","endLine":3,"endColumn":81},{"ruleId":"221","severity":1,"message":"269","line":3,"column":83,"nodeType":"223","messageId":"224","endLine":3,"endColumn":93},{"ruleId":"221","severity":1,"message":"312","line":1,"column":38,"nodeType":"223","messageId":"224","endLine":1,"endColumn":44},{"ruleId":"221","severity":1,"message":"313","line":2,"column":9,"nodeType":"223","messageId":"224","endLine":2,"endColumn":14},{"ruleId":"221","severity":1,"message":"314","line":2,"column":15,"nodeType":"223","messageId":"224","endLine":2,"endColumn":26},{"ruleId":"221","severity":1,"message":"315","line":2,"column":28,"nodeType":"223","messageId":"224","endLine":2,"endColumn":37},{"ruleId":"221","severity":1,"message":"316","line":2,"column":38,"nodeType":"223","messageId":"224","endLine":2,"endColumn":42},{"ruleId":"221","severity":1,"message":"317","line":3,"column":15,"nodeType":"223","messageId":"224","endLine":3,"endColumn":19},{"ruleId":"221","severity":1,"message":"318","line":3,"column":20,"nodeType":"223","messageId":"224","endLine":3,"endColumn":28},{"ruleId":"221","severity":1,"message":"319","line":3,"column":44,"nodeType":"223","messageId":"224","endLine":3,"endColumn":54},{"ruleId":"221","severity":1,"message":"320","line":7,"column":8,"nodeType":"223","messageId":"224","endLine":7,"endColumn":14},{"ruleId":"221","severity":1,"message":"321","line":13,"column":10,"nodeType":"223","messageId":"224","endLine":13,"endColumn":17},{"ruleId":"221","severity":1,"message":"322","line":15,"column":8,"nodeType":"223","messageId":"224","endLine":15,"endColumn":19},{"ruleId":"221","severity":1,"message":"323","line":19,"column":17,"nodeType":"223","messageId":"224","endLine":19,"endColumn":20},{"ruleId":"221","severity":1,"message":"324","line":20,"column":10,"nodeType":"223","messageId":"224","endLine":20,"endColumn":16},{"ruleId":"221","severity":1,"message":"325","line":20,"column":18,"nodeType":"223","messageId":"224","endLine":20,"endColumn":24},{"ruleId":"221","severity":1,"message":"326","line":20,"column":26,"nodeType":"223","messageId":"224","endLine":20,"endColumn":31},{"ruleId":"221","severity":1,"message":"261","line":20,"column":33,"nodeType":"223","messageId":"224","endLine":20,"endColumn":40},{"ruleId":"221","severity":1,"message":"263","line":22,"column":8,"nodeType":"223","messageId":"224","endLine":22,"endColumn":11},{"ruleId":"221","severity":1,"message":"327","line":23,"column":8,"nodeType":"223","messageId":"224","endLine":23,"endColumn":24},{"ruleId":"221","severity":1,"message":"328","line":24,"column":8,"nodeType":"223","messageId":"224","endLine":24,"endColumn":14},{"ruleId":"221","severity":1,"message":"329","line":25,"column":8,"nodeType":"223","messageId":"224","endLine":25,"endColumn":11},{"ruleId":"221","severity":1,"message":"330","line":26,"column":8,"nodeType":"223","messageId":"224","endLine":26,"endColumn":17},{"ruleId":"221","severity":1,"message":"269","line":29,"column":8,"nodeType":"223","messageId":"224","endLine":29,"endColumn":18},{"ruleId":"221","severity":1,"message":"331","line":38,"column":8,"nodeType":"223","messageId":"224","endLine":38,"endColumn":19},{"ruleId":"221","severity":1,"message":"332","line":119,"column":12,"nodeType":"223","messageId":"224","endLine":119,"endColumn":19},{"ruleId":"221","severity":1,"message":"333","line":120,"column":12,"nodeType":"223","messageId":"224","endLine":120,"endColumn":19},{"ruleId":"221","severity":1,"message":"334","line":123,"column":12,"nodeType":"223","messageId":"224","endLine":123,"endColumn":20},{"ruleId":"221","severity":1,"message":"335","line":129,"column":12,"nodeType":"223","messageId":"224","endLine":129,"endColumn":27},{"ruleId":"221","severity":1,"message":"336","line":131,"column":11,"nodeType":"223","messageId":"224","endLine":131,"endColumn":19},{"ruleId":"287","severity":1,"message":"337","line":191,"column":8,"nodeType":"289","endLine":191,"endColumn":10,"suggestions":"338"},{"ruleId":"221","severity":1,"message":"339","line":222,"column":11,"nodeType":"223","messageId":"224","endLine":222,"endColumn":27},{"ruleId":"221","severity":1,"message":"340","line":4,"column":20,"nodeType":"223","messageId":"224","endLine":4,"endColumn":36},{"ruleId":"221","severity":1,"message":"341","line":6,"column":8,"nodeType":"223","messageId":"224","endLine":6,"endColumn":15},{"ruleId":"221","severity":1,"message":"328","line":7,"column":9,"nodeType":"223","messageId":"224","endLine":7,"endColumn":15},{"ruleId":"221","severity":1,"message":"313","line":9,"column":19,"nodeType":"223","messageId":"224","endLine":9,"endColumn":24},{"ruleId":"221","severity":1,"message":"342","line":10,"column":8,"nodeType":"223","messageId":"224","endLine":10,"endColumn":24},{"ruleId":"221","severity":1,"message":"343","line":55,"column":11,"nodeType":"223","messageId":"224","endLine":55,"endColumn":22},{"ruleId":"221","severity":1,"message":"332","line":58,"column":12,"nodeType":"223","messageId":"224","endLine":58,"endColumn":19},{"ruleId":"236","severity":1,"message":"237","line":92,"column":75,"nodeType":"238","messageId":"239","endLine":92,"endColumn":77},{"ruleId":"221","severity":1,"message":"241","line":98,"column":15,"nodeType":"223","messageId":"224","endLine":98,"endColumn":24},{"ruleId":"236","severity":1,"message":"237","line":112,"column":77,"nodeType":"238","messageId":"239","endLine":112,"endColumn":79},{"ruleId":"221","severity":1,"message":"344","line":123,"column":13,"nodeType":"223","messageId":"224","endLine":123,"endColumn":25},{"ruleId":"345","severity":1,"message":"346","line":145,"column":51,"nodeType":"238","messageId":"347","endLine":145,"endColumn":52},{"ruleId":"221","severity":1,"message":"312","line":1,"column":38,"nodeType":"223","messageId":"224","endLine":1,"endColumn":44},{"ruleId":"221","severity":1,"message":"319","line":3,"column":48,"nodeType":"223","messageId":"224","endLine":3,"endColumn":58},{"ruleId":"221","severity":1,"message":"320","line":7,"column":8,"nodeType":"223","messageId":"224","endLine":7,"endColumn":14},{"ruleId":"221","severity":1,"message":"321","line":13,"column":10,"nodeType":"223","messageId":"224","endLine":13,"endColumn":17},{"ruleId":"221","severity":1,"message":"262","line":13,"column":19,"nodeType":"223","messageId":"224","endLine":13,"endColumn":23},{"ruleId":"221","severity":1,"message":"322","line":15,"column":8,"nodeType":"223","messageId":"224","endLine":15,"endColumn":19},{"ruleId":"221","severity":1,"message":"324","line":20,"column":10,"nodeType":"223","messageId":"224","endLine":20,"endColumn":16},{"ruleId":"221","severity":1,"message":"325","line":20,"column":18,"nodeType":"223","messageId":"224","endLine":20,"endColumn":24},{"ruleId":"221","severity":1,"message":"326","line":20,"column":26,"nodeType":"223","messageId":"224","endLine":20,"endColumn":31},{"ruleId":"221","severity":1,"message":"261","line":20,"column":33,"nodeType":"223","messageId":"224","endLine":20,"endColumn":40},{"ruleId":"221","severity":1,"message":"328","line":24,"column":8,"nodeType":"223","messageId":"224","endLine":24,"endColumn":14},{"ruleId":"221","severity":1,"message":"332","line":78,"column":12,"nodeType":"223","messageId":"224","endLine":78,"endColumn":19},{"ruleId":"221","severity":1,"message":"348","line":78,"column":21,"nodeType":"223","messageId":"224","endLine":78,"endColumn":31},{"ruleId":"287","severity":1,"message":"349","line":103,"column":10,"nodeType":"289","endLine":103,"endColumn":12,"suggestions":"350"},{"ruleId":"236","severity":1,"message":"237","line":153,"column":49,"nodeType":"238","messageId":"239","endLine":153,"endColumn":51},"no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useState' is defined but never used.","'DualListBox' is defined but never used.","'MdDashboard' is defined but never used.","'Menu' is defined but never used.","'MenuList' is defined but never used.","'MenuButton' is defined but never used.","'MenuItem' is defined but never used.","'Label' is defined but never used.","'setLoading' is assigned a value but never used.","'toggle' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'response' is assigned a value but never used.","'dateParts' is assigned a value but never used.","'getAddress' is assigned a value but never used.","'getGender' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","'ArrowDropDownIcon' is defined but never used.","'VisibilityIcon' is defined but never used.","'ListItemText' is defined but never used.","'ListItemIcon' is defined but never used.","'ContentCut' is defined but never used.","'FaEye' is defined but never used.","'setSelectedIndex' is assigned a value but never used.","'handleMenuItemClick' is assigned a value but never used.","'PropTypes' is defined but never used.","'withStyles' is defined but never used.","'ButtonMui' is defined but never used.","'Col' is defined but never used.","'Step' is defined but never used.","'Segment' is defined but never used.","'Icon' is defined but never used.","'Box' is defined but never used.","'ModalFooter' is defined but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'Controller' is defined but never used.","'FormControl' is defined but never used.","'Typography' is defined but never used.","'Autocomplete' is defined but never used.","'DateTimePicker' is defined but never used.","'Stack' is defined but never used.","'icon' is assigned a value but never used.","'checkedIcon' is assigned a value but never used.","'userDetail' is assigned a value but never used.","'today' is assigned a value but never used.","'setToday' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","'control' is assigned a value but never used.","'checkOutObj' is assigned a value but never used.","'setCheckOutObj' is assigned a value but never used.","'setCheckInObj' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'patientObj.id'. Either include it or remove the dependency array.","ArrayExpression",["351"],"'visitTypesRows' is assigned a value but never used.","'onChangeDate' is assigned a value but never used.","'columns' is assigned a value but never used.","Unexpected mix of '&&' and '||'. Use parentheses to clarify the intended order of operations.","'onDelete' is assigned a value but never used.","'onSubmit' is assigned a value but never used.","'onError' is assigned a value but never used.","'watchPnumber' is assigned a value but never used.","'watchAltPhonenumber' is assigned a value but never used.","'watchContactPhoneNumber' is assigned a value but never used.","'watchShowAge' is assigned a value but never used.","'setSaving' is assigned a value but never used.","'genders' is assigned a value but never used.","'setGenders' is assigned a value but never used.","'gender' is assigned a value but never used.","React Hook useCallback has missing dependencies: 'patientId' and 'setValue'. Either include them or remove the dependency array.",["352"],"'contactEmail' is assigned a value but never used.","'genderRows' is assigned a value but never used.","'Paper' is defined but never used.","'TextField' is defined but never used.","'useRef' is defined but never used.","'Modal' is defined but never used.","'ModalHeader' is defined but never used.","'ModalBody' is defined but never used.","'Form' is defined but never used.","'Card' is defined but never used.","'CardBody' is defined but never used.","'CardHeader' is defined but never used.","'Select' is defined but never used.","'Button2' is defined but never used.","'ThumbUpIcon' is defined but never used.","'red' is defined but never used.","'Dimmer' is defined but never used.","'Loader' is defined but never used.","'Image' is defined but never used.","'CircularProgress' is defined but never used.","'Button' is defined but never used.","'Fab' is defined but never used.","'CheckIcon' is defined but never used.","'UpgradeIcon' is defined but never used.","'devices' is assigned a value but never used.","'loading' is assigned a value but never used.","'tryAgain' is assigned a value but never used.","'selectedFingers' is assigned a value but never used.","'buttonSx' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'clear_storelist' and 'getPersonBiometrics'. Either include them or remove the dependency array.",["353"],"'biometricFingers' is assigned a value but never used.","'AccordionActions' is defined but never used.","'Divider' is defined but never used.","'CaptureBiometric' is defined but never used.","'toggleModal' is assigned a value but never used.","'patientObjID' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'setDevices' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'objValues.device'. Either include it or remove the dependency array.",["354"],{"desc":"355","fix":"356"},{"desc":"357","fix":"358"},{"desc":"359","fix":"360"},{"desc":"361","fix":"362"},"Update the dependencies array to be: [patientObj.id]",{"range":"363","text":"364"},"Update the dependencies array to be: [patientId, setValue]",{"range":"365","text":"366"},"Update the dependencies array to be: [clear_storelist, getPersonBiometrics]",{"range":"367","text":"368"},"Update the dependencies array to be: [objValues.device]",{"range":"369","text":"370"},[8238,8240],"[patientObj.id]",[9477,9479],"[patientId, setValue]",[6960,6962],"[clear_storelist, getPersonBiometrics]",[3379,3381],"[objValues.device]"]
=========
[{"C:\\Data.FI Code\\patient-module\\src\\index.js":"1","C:\\Data.FI Code\\patient-module\\src\\App.js":"2","C:\\Data.FI Code\\patient-module\\src\\main\\webapp\\components\\Dashboard.js":"3","C:\\Data.FI Code\\patient-module\\src\\main\\webapp\\components\\PatientDashboard.js":"4","C:\\Data.FI Code\\patient-module\\src\\main\\webapp\\components\\RegisterPatient.js":"5","C:\\Data.FI Code\\patient-module\\src\\api.js":"6","C:\\Data.FI Code\\patient-module\\src\\main\\webapp\\components\\SplitActionButton.js":"7","C:\\Data.FI Code\\patient-module\\src\\main\\webapp\\components\\PatientCard.js":"8","C:\\Data.FI Code\\patient-module\\src\\main\\webapp\\components\\Biometrics.js":"9","C:\\Data.FI Code\\patient-module\\src\\main\\webapp\\components\\CaptureBiometric.js":"10"},{"size":495,"mtime":1662736346434,"results":"11","hashOfConfig":"12"},{"size":1904,"mtime":1662742141580,"results":"13","hashOfConfig":"12"},{"size":13483,"mtime":1662742141748,"results":"14","hashOfConfig":"12"},{"size":33307,"mtime":1662742141749,"results":"15","hashOfConfig":"12"},{"size":82062,"mtime":1662742141749,"results":"16","hashOfConfig":"12"},{"size":435,"mtime":1662742141581,"results":"17","hashOfConfig":"12"},{"size":4786,"mtime":1662742141750,"results":"18","hashOfConfig":"12"},{"size":10654,"mtime":1662742141748,"results":"19","hashOfConfig":"12"},{"size":40609,"mtime":1662742141747,"results":"20","hashOfConfig":"12"},{"size":20592,"mtime":1662742141748,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1yt5pam",{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":42,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},"C:\\Data.FI Code\\patient-module\\src\\index.js",[],"C:\\Data.FI Code\\patient-module\\src\\App.js",["50","51","52","53"],"import React, {useCallback, useEffect, useState} from \"react\";\r\nimport {\r\n  MemoryRouter as Router,\r\n  Switch,\r\n  Route,\r\n} from \"react-router-dom\";\r\nimport RegisterPatient from './main/webapp/components/RegisterPatient';\r\nimport PatientDashboard from './main/webapp/components/PatientDashboard';\r\nimport Dashboard from './main/webapp/components/Dashboard';\r\n/*import PatientVitals from './main/webapp/components/PatientVitals';\r\nimport AddPatientVitals from './main/webapp/components/Add-Patient-Vitals';*/\r\nimport { ToastContainer} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport './main/webapp/css/style.css'\r\nimport DualListBox from \"react-dual-listbox\";\r\nimport 'react-dual-listbox/lib/react-dual-listbox.css';\r\n\r\nexport default function App() {\r\n  return (\r\n\r\n    <Router>\r\n      <div>\r\n      <ToastContainer />\r\n{/*          <Switch> looks through its children <Route>s and\r\n            renders the first one that matches the current URL.*/}\r\n        <Switch>\r\n\r\n          <Route path=\"/register-patient\">\r\n            <RegisterPatientPage />\r\n          </Route>\r\n          <Route path=\"/patient-dashboard\">\r\n            <PatientDashboardPage />\r\n          </Route>\r\n          <Route path=\"/patient-vitals\">\r\n              <Dashboard />\r\n            {/*<PatientVitalsPage />*/}\r\n          </Route>\r\n          <Route path=\"/add-patient-vital\">\r\n              <Dashboard />\r\n            {/*<AddPatientVitalsPage />*/}\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Dashboard />\r\n          </Route>\r\n          \r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nfunction PatientDashboardPage() {\r\n  return <PatientDashboard />;\r\n}\r\nfunction RegisterPatientPage() {\r\n  return <RegisterPatient />;\r\n}\r\n/*\r\nfunction PatientVitalsPage() {\r\n  return <PatientVitals />\r\n}\r\nfunction AddPatientVitalsPage() {\r\n  return <AddPatientVitals />\r\n}\r\n*/\r\n\r\n\r\n","C:\\Data.FI Code\\patient-module\\src\\main\\webapp\\components\\Dashboard.js",["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73"],"import React, {useState, useEffect, useCallback} from 'react'\r\nimport MaterialTable from 'material-table';\r\nimport axios from \"axios\";\r\nimport { url as baseUrl, token } from \"../../../api\";\r\nimport { Link } from 'react-router-dom'\r\nimport { Card,CardBody,} from 'reactstrap';\r\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport 'react-widgets/dist/css/react-widgets.css';\r\nimport {FaEye, FaUserPlus} from \"react-icons/fa\";\r\nimport { MdDashboard, MdDeleteForever, MdModeEdit,MdPerson} from \"react-icons/md\";\r\nimport {Menu,MenuList,MenuButton,MenuItem,} from \"@reach/menu-button\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport { Label } from 'semantic-ui-react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport \"./patient.css\";\r\nimport SplitActionButton from './SplitActionButton';\r\n\r\nimport { forwardRef } from 'react';\r\n//import { Button} from \"react-bootstrap\";\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\n\r\nconst tableIcons = {\r\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\nCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\nClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\nDetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\nExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\nFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\nFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\nLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\nNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nPreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\nResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\nSortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\nThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\nViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        },\r\n        '& a':{\r\n            textDecoration:'none !important'\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n    },\r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    },\r\n}));\r\n\r\n\r\n\r\nconst PatientList = (props) => {\r\n    const classes = useStyles();\r\n    const [patients, setPatients] = useState([]);\r\n    const [permissions, setPermissions] = useState([]);\r\n    const [loading, setLoading] = useState('');\r\n    const [modal, setModal] = useState(false);\r\n    const [patient, setPatient] = useState(false);\r\n    const toggle = (id) => {\r\n        const patient = patients.find(obj => obj.id == id);\r\n        setPatient(patient);\r\n        setModal(!modal);\r\n    }\r\n    useEffect(() => {\r\n        userPermission();\r\n      }, []);\r\n    //Get list of Finger index\r\n    const userPermission =()=>{\r\n        axios\r\n           .get(`${baseUrl}account`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {\r\n                setPermissions(response.data.permissions);\r\n\r\n           })\r\n           .catch((error) => {\r\n           });\r\n\r\n     }\r\n    const loadPatients = useCallback(async () => {\r\n        try {\r\n            const response = await axios.get(`${baseUrl}patient`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            setPatients(response.data);\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }, []);\r\n\r\n    const onDelete = async (id) => {\r\n        try {\r\n            if (id) {\r\n                const response = await axios.delete(`${baseUrl}patient/${id}`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n                window.location.reload();\r\n            }\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n\r\n    const onCancelDelete = () => {\r\n        setModal(false);\r\n    }\r\n\r\n    const calculate_age = dob => {\r\n        const today = new Date();\r\n        const dateParts = dob.split(\"-\");\r\n        const birthDate = new Date(dob); // create a date object directlyfrom`dob1`argument\r\n        let age_now = today.getFullYear() - birthDate.getFullYear();\r\n        const m = today.getMonth() - birthDate.getMonth();\r\n        if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n            age_now--;\r\n        }\r\n        if (age_now === 0) {\r\n            return m + \" month(s)\";\r\n        }\r\n        return age_now + \" year(s)\";\r\n    };\r\n\r\n    const getHospitalNumber = (identifier) => {\r\n        const hospitalNumber = identifier.identifier.find(obj => obj.type == 'HospitalNumber');\r\n        return hospitalNumber ? hospitalNumber.value : '';\r\n    };\r\n\r\n    const getAddress = (address) => {\r\n        const city = address && address.address && address.address.length > 0 ? address.address[0].city : null;\r\n        return city;\r\n    };\r\n\r\n    const getGender = (gender) => {\r\n        return gender.display;\r\n    };\r\n\r\n    useEffect(() => {\r\n        loadPatients();\r\n    }, [loadPatients]);\r\n    function actionItems(row){\r\n       return  [\r\n           {\r\n               name:'View',\r\n               type:'link',\r\n               icon:<FaEye  size=\"22\"/>,\r\n               to:{\r\n                   pathname: \"/register-patient\",\r\n                   state: { patientId : row.id, permissions:permissions  }\r\n               }\r\n           },\r\n           {...(permissions.includes('view_patient') || permissions.includes(\"all_permission\")&&\r\n                   {\r\n                       name:'Dashboard',\r\n                       type:'link',\r\n                       icon:<MdPerson size=\"20\" color='rgb(4, 196, 217)' />,\r\n                       to:{\r\n                           pathname: \"/patient-dashboard\",\r\n                           state: { patientObj: row, permissions:permissions  }\r\n                       }\r\n                   }\r\n           )},\r\n           {...(permissions.includes('edit_patient') || permissions.includes(\"all_permission\")&&\r\n                   {\r\n                       name:'Edit',\r\n                       type:'link',\r\n                       icon:<MdModeEdit size=\"20\" color='rgb(4, 196, 217)' />,\r\n                       to:{\r\n                           pathname: \"/register-patient\",\r\n                           state: { patientId : row.id, permissions:permissions  }\r\n                       }\r\n                   }\r\n               )},\r\n           {...(permissions.includes('delete_patient') || permissions.includes(\"all_permission\")&&\r\n                   {\r\n                       name:'Delete',\r\n                       type:'link',\r\n                       icon:<MdDeleteForever size=\"20\" color='rgb(4, 196, 217)'  />,\r\n                       to:{\r\n                           pathname: \"/#\",\r\n                           state: { patientObj: row, permissions:permissions  }\r\n                       }\r\n                   }\r\n               )}\r\n        ]\r\n    }\r\n  return (\r\n    <div className={classes.root}>\r\n        <ToastContainer autoClose={3000} hideProgressBar />\r\n        <Card>\r\n            <CardBody>\r\n            {permissions.includes('view_patient') || permissions.includes(\"all_permission\") ? (\r\n                <Link to={\"register-patient\"}>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className=\" float-right mr-1\"\r\n                        startIcon={<FaUserPlus size=\"25\"/>}\r\n                        style={{backgroundColor:'#014d88'}}\r\n                    >\r\n                        <span style={{ textTransform: \"capitalize\", fontWeight:'bolder' }}>New Patient</span>\r\n                    </Button>\r\n                </Link>\r\n            ):\"\"\r\n        }\r\n                <br/><br/>\r\n                <br/>\r\n                <MaterialTable\r\n                    icons={tableIcons}\r\n                    title=\"Find patients\"\r\n                    columns={[\r\n                        {\r\n                            title: \"Name\",\r\n                            field: \"name\", filtering: false\r\n                        },\r\n                        { title: \"Hosp. Number\", field: \"id\" , filtering: false},\r\n                        { title: \"Sex\", field: \"sex\", filtering: false },\r\n                        { title: \"Date Of Birth\", field: \"dateOfBirth\", filtering: false },\r\n                        { title: \"Age\", field: \"age\", filtering: false },\r\n                        /*{ title: \"Address\", field: \"address\", filtering: false },*/\r\n                        { title: \"Status\", field: \"status\", filtering: false },\r\n                        {title: \"Actions\", field: \"actions\", filtering: false },\r\n                    ]}\r\n                    isLoading={loading}\r\n                    data={patients.map((row) => ({\r\n                        name: row.firstName +  ' ' + row.otherName +  ' ' + row.surname,\r\n                        id: getHospitalNumber(row.identifier),\r\n                        sex: row.sex,\r\n                        dateOfBirth: row.dateOfBirth,\r\n                        age: (row.dateOfBirth === 0 ||\r\n                            row.dateOfBirth === undefined ||\r\n                            row.dateOfBirth === null ||\r\n                            row.dateOfBirth === \"\" )\r\n                            ? 0\r\n                            : calculate_age(row.dateOfBirth),\r\n                        /*address: getAddress(row.address),*/\r\n/*                        status: row.active ?\r\n                            (<Label color=\"green\" size=\"mini\">active</Label>)\r\n                            : (<Label color=\"teal\" size=\"mini\">not-active</Label>),*/\r\n                        status: row.active ?\r\n                            \"Active\"\r\n                            : \"Not-Active\",\r\n                        actions:\r\n                            <div>\r\n                                {permissions.includes('view_patient') || permissions.includes(\"all_permission\") ? (\r\n                                    <SplitActionButton actions={actionItems(row)} />\r\n                                ):\"\"\r\n                                }\r\n                            </div>\r\n                    }))}\r\n\r\n                    options={{\r\n                        headerStyle: {\r\n                            backgroundColor: \"#014d88\",\r\n                            color: \"#fff\",\r\n                            fontSize:'16px',\r\n                            padding:'10px',\r\n                            fontWeight:'bolder'\r\n                        },\r\n                        searchFieldStyle: {\r\n                            width : '200%',\r\n                            margingLeft: '250px',\r\n                        },\r\n                        filtering: false,\r\n                        exportButton: false,\r\n                        searchFieldAlignment: 'left',\r\n                        pageSizeOptions:[10,20,100],\r\n                        pageSize:10,\r\n                        debounceInterval: 400\r\n                    }}\r\n                />\r\n\r\n            </CardBody>\r\n        </Card>\r\n        <Modal isOpen={modal} toggle={onCancelDelete}>\r\n            <ModalHeader toggle={onCancelDelete}>Delete Patient</ModalHeader>\r\n            <ModalBody>\r\n                Are you sure to delete this record? { patient ? patient.surname +  ', ' + patient.firstname +  ' ' + patient.otherName : '' }\r\n            </ModalBody>\r\n            <ModalFooter>\r\n                <Button color=\"primary\" type=\"button\" onClick={(e) => onDelete(patient.id)}>Yes</Button>{' '}\r\n                <Button color=\"secondary\" type=\"button\" onClick={(e) => onCancelDelete()}>No</Button>\r\n            </ModalFooter>\r\n        </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PatientList;\r\n\r\n\r\n","C:\\Data.FI Code\\patient-module\\src\\main\\webapp\\components\\PatientDashboard.js",["74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115"],"import React, {useCallback, useEffect, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {makeStyles, withStyles} from '@material-ui/core/styles';\r\nimport { Link } from 'react-router-dom';\r\nimport ButtonMui from \"@material-ui/core/Button\";\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { Col} from \"reactstrap\";\r\nimport { Step, Label, Segment, Icon } from \"semantic-ui-react\";\r\nimport PatientCard from './PatientCard'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Tab } from 'semantic-ui-react';\r\nimport { DataGrid } from '@mui/x-data-grid';\r\nimport Box from '@mui/material/Box';\r\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport axios from \"axios\";\r\nimport {token, url as baseUrl} from \"../../../api\";\r\nimport Swal from \"sweetalert2\";\r\nimport {Controller, useForm} from \"react-hook-form\";\r\nimport {Button, Card, CardContent, FormControl, Grid, MenuItem, Paper, TextField, Typography} from \"@mui/material\";\r\nimport {format} from 'date-fns';\r\nimport { toast} from \"react-toastify\";\r\nimport MaterialTable from 'material-table';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport CheckBoxOutlineBlankIcon from '@mui/icons-material/CheckBoxOutlineBlank';\r\nimport CheckBoxIcon from '@mui/icons-material/CheckBox';\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport {TiArrowBack} from \"react-icons/ti\";\r\nimport Biometrics from \"./Biometrics\";\r\nimport moment from \"moment\";\r\nimport DualListBox from \"react-dual-listbox\";\r\nimport 'react-dual-listbox/lib/react-dual-listbox.css';\r\nimport _ from 'lodash';\r\n\r\nimport { DesktopDateTimePicker } from '@mui/x-date-pickers/DesktopDateTimePicker';\r\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\r\nimport Stack from '@mui/material/Stack';\r\n\r\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        marginBottom: 20,\r\n        flexGrow: 1,\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n    },\r\n    secondaryHeading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    icon: {\r\n        verticalAlign: 'bottom',\r\n        height: 20,\r\n        width: 20,\r\n    },\r\n    details: {\r\n        alignItems: 'center',\r\n    },\r\n    column: {\r\n        flexBasis: '20.33%',\r\n    },\r\n    helper: {\r\n        borderLeft: `2px solid ${theme.palette.divider}`,\r\n        padding: `${theme.spacing(1)}px ${theme.spacing(1) * 2}px`,\r\n    },\r\n    link: {\r\n        color: theme.palette.primary.main,\r\n        textDecoration: 'none',\r\n        '&:hover': {\r\n            textDecoration: 'underline',\r\n        },\r\n    },\r\n    checkinModal:{\r\n        \"& .modal-dialog\":{\r\n            maxWidth:\"1000px\"\r\n        },\r\n        \"& .ui.label\":{\r\n            backgroundColor:\"#fff\",\r\n            fontSize:'16px',\r\n            color:'#014d88',\r\n            fontWeight:'bold',\r\n            textAlign:'left'\r\n        },\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n    },\r\n    checkInDatePicker:{\r\n        '& .MuiFormControl-root.MuiTextField-root':{\r\n            border:'1px solid #eee'\r\n        }\r\n    }\r\n}));\r\nconst appointmentColumns = [\r\n    { field: 'id', headerName: 'ID', width: 90 },\r\n    {\r\n        field: 'firstName',\r\n        headerName: 'First name',\r\n        width: 150,\r\n        editable: true,\r\n    },\r\n    {\r\n        field: 'lastName',\r\n        headerName: 'Last name',\r\n        width: 150,\r\n        editable: true,\r\n    },\r\n    {\r\n        field: 'age',\r\n        headerName: 'Age',\r\n        type: 'number',\r\n        width: 110,\r\n        editable: true,\r\n    },\r\n\r\n];\r\n\r\nconst appointments = [\r\n    // { id: 1, lastName: 'Snow', firstName: 'Jon', age: 35 },\r\n\r\n];\r\n\r\n\r\nlet newDate = new Date()\r\nfunction PatientDashboard(props) {\r\n    const userDetail = props.location && props.location.state ? props.location.state.user : null;\r\n    const [loading, setLoading] = useState('');\r\n    let history = useHistory();\r\n    const classes = useStyles();\r\n    const [checkInDate,setCheckInDate]=useState(new Date());\r\n    const [checkOutDate,setCheckOutDate]=useState(new Date());\r\n    const [today, setToday] = useState(new Date().toISOString().substr(0, 10).replace('T', ' '));\r\n    const patientObj = history.location && history.location.state ? history.location.state.patientObj : {};\r\n    const permissions = history.location && history.location.state ? history.location.state.permissions : [];\r\n    const { handleSubmit, control } = useForm();\r\n    const [modal, setModal] = useState(false);\r\n    const [allServices, setAllServices] = useState(null);\r\n    const [checkinStatus, setCheckinStatus]= useState(false)\r\n    const [modalCheckOut, setModalCheckOut] = useState(false);\r\n    const [services, setServices]= useState([]);\r\n    const [selectedServices, setSelectedServices]= useState({\"selected\":[]});\r\n    const [patientVisits, setPatientVisits]= useState([]);\r\n    const [patientBiometricStatus, setPatientBiometricStatus]= useState(patientObj.biometricStatus);\r\n    const [biometricsModuleInstalled,setBiometricsModuleInstalled]=useState(false);\r\n\r\n    const [checkOutObj, setCheckOutObj] = useState({\r\n        personId: \"\",\r\n        visitStartDate:format(new Date(newDate), 'yyyy-MM-dd hh:mm')\r\n    })\r\n    const [checkInObj, setCheckInObj] = useState({\r\n        serviceIds:\"\",\r\n        visitDto: {\r\n            personId: patientObj.id,\r\n            checkInDate: format(new Date(newDate), 'yyyy-MM-dd hh:mm')\r\n        }\r\n    })\r\n\r\n    const updatePatientBiometricStatus = (bioStatus) =>{\r\n        setPatientBiometricStatus(bioStatus);\r\n    }\r\n    const loadServices = useCallback(async () => {\r\n        try {\r\n            const response = await axios.get(`${baseUrl}patient/post-service`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            //setServices(response.data);\r\n            setAllServices(response.data);\r\n            setServices(\r\n                Object.entries(response.data).map(([key, value]) => ({\r\n                    label: value.moduleServiceName,\r\n                    value: value.moduleServiceCode,\r\n                }))\r\n            );\r\n/*            setSelectedServices(\r\n                _.uniq(_.map(userDetail.applicationUserOrganisationUnits, 'organisationUnitName'))\r\n            )*/\r\n        } catch (e) {\r\n            await Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: 'An error occurred fetching services!',\r\n            });\r\n        }\r\n    }, []);\r\n    const loadPatientVisits = useCallback(async () => {\r\n        try {\r\n            const response = await axios.get(`${baseUrl}patient/visit/visit-detail/${patientObj.id}`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            setPatientVisits(response.data);\r\n            response.data.map((visits)=> {\r\n                if(visits.checkOutDate===null){\r\n                    setCheckinStatus(true)\r\n                }\r\n            })\r\n\r\n\r\n        } catch (e) {\r\n            await Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: 'An error occurred fetching services!',\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    const checkForBiometricsModule =()=>{\r\n        axios\r\n            .get(`${baseUrl}modules/check?moduleName=biometric`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                if(response.data===true){\r\n                    setBiometricsModuleInstalled(true);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                //console.log(error);\r\n            });\r\n\r\n    }\r\n    const loadUserDetails = () =>{\r\n        axios.get(`${baseUrl}account`).then((response)=>{\r\n\r\n        }).catch((error)=>{\r\n\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadUserDetails();\r\n        loadServices();\r\n        loadPatientVisits();\r\n        checkForBiometricsModule();\r\n    }, [loadServices, loadPatientVisits]);\r\n\r\n    let visitTypesRows = null;\r\n    if (services && services.length > 0) {\r\n        visitTypesRows = services.map((service, index) => (\r\n            <MenuItem key={service.moduleServiceCode} value={service.moduleServiceCode}>{service.moduleServiceName}</MenuItem>\r\n        ));\r\n    }\r\n\r\n    const onChangeDate = (date) => {\r\n        console.log(date.target.value)\r\n        const newDate = moment(new Date(date.target.value)).format(\"yyyy-MM-dd hh:mm\");\r\n        setCheckInDate(newDate);\r\n        console.log(newDate);\r\n    };\r\n\r\n\r\n    const columns = [\r\n        {\r\n            field: 'checkInDate',\r\n            headerName: 'Checked In Date',\r\n            width: 200,\r\n            editable: false,\r\n        },\r\n        {\r\n            field: 'checkOutDate',\r\n            headerName: 'Check Out Date',\r\n            width: 200,\r\n            editable: false,\r\n        },\r\n        {\r\n            field: 'service',\r\n            headerName: 'Service',\r\n            width: 200,\r\n            editable: false,\r\n        },\r\n        {\r\n            field: 'status',\r\n            headerName: 'Status',\r\n            width: 200,\r\n            editable: false,\r\n        }\r\n    ];\r\n\r\n    const panes = [\r\n        { menuItem: 'Patient Visit', render: () =>\r\n                <Tab.Pane>\r\n\r\n                    <MaterialTable\r\n                        title=\"\"\r\n                        columns={[\r\n                            {\r\n                                title: \"Checked In Date\",\r\n                                field: \"checkInDate\", filtering: false,\r\n                                headerStyle: {\r\n                                    backgroundColor: \"#039be5\",\r\n                                    border:'2px solid #fff',\r\n                                    paddingRight:'30px'\r\n                                }\r\n                            },\r\n                            { title: \"Check Out Date\", field: \"checkOutDate\", filtering: false  },\r\n                            { title: \"Service\", field: \"service\", filtering: false  },\r\n                            { title: \"Status\", field: \"status\", filtering: false },\r\n                        ]}\r\n                        isLoading={loading}\r\n                        data={patientVisits.map((row) => ({\r\n                            checkInDate: moment(row.checkInDate).format(\"YYYY-MM-DD h:mm a\"),\r\n                            checkOutDate: row.checkOutDate?moment(row.checkOutDate).format(\"YYYY-MM-DD h:mm a\"):\"Visit Ongoing\",\r\n                            service:row.service,\r\n                            status:(<Label color={row.status ==='COMPLETED' ? 'green' : 'red'} size=\"mini\">{row.status}</Label>),\r\n\r\n                        }))}\r\n\r\n                        options={{\r\n                            headerStyle: {\r\n                                backgroundColor: \"#014d88\",\r\n                                color: \"#fff\",\r\n                                fontSize:'16px',\r\n                                padding:'10px',\r\n                                fontWeight:'bold'\r\n                            },\r\n                            rowStyle: {\r\n                                color: 'rgba(0,0,0,.87)',\r\n                                fontFamily:`'poppins', sans-serif`\r\n                            },\r\n                            searchFieldStyle: {\r\n                                width : '200%',\r\n                                margingLeft: '250px',\r\n                            },\r\n                            filtering: false,\r\n                            exportButton: false,\r\n                            searchFieldAlignment: 'left',\r\n                            pageSizeOptions:[10,20,100],\r\n                            pageSize:10,\r\n                            debounceInterval: 400\r\n                        }}\r\n                    />\r\n                </Tab.Pane>\r\n        },\r\n\r\n        { menuItem: permissions.includes('view_patient_appointment') || permissions.includes(\"all_permission\") ? 'Appointments' : \"\", render: () =>\r\n                permissions.includes('view_patient_appointment') || permissions.includes(\"all_permission\") ?\r\n                    <Tab.Pane>\r\n                        <div style={{ height: 400, width: '100%' }}>\r\n                            <DataGrid\r\n                                rows={appointments}\r\n                                columns={appointmentColumns}\r\n                                pageSize={5}\r\n                                rowsPerPageOptions={[5]}\r\n                                checkboxSelection\r\n                                disableSelectionOnClick\r\n                            />\r\n                        </div>\r\n                    </Tab.Pane>\r\n                    :\"\"\r\n        },\r\n\r\n                { menuItem: permissions.includes('view_patient_appointment') && biometricsModuleInstalled || permissions.includes(\"all_permission\")  && biometricsModuleInstalled? 'Biometrics' : \"\", render: () =>\r\n                        permissions.includes('view_patient_appointment') || permissions.includes(\"all_permission\") ?\r\n                            <Tab.Pane>\r\n                                <div style={{ minHeight: 400, width: '100%' }}>\r\n                                    <Biometrics patientId={patientObj.id} updatePatientBiometricStatus={updatePatientBiometricStatus}/>\r\n                                </div>\r\n                            </Tab.Pane>\r\n                            :\"\"\r\n                }\r\n\r\n\r\n\r\n    ];\r\n\r\n    const handleCheckIn = () => {\r\n        setModal(true);\r\n    };\r\n    const handleCheckOut = () => {\r\n        setModalCheckOut(true);\r\n    };\r\n\r\n    const onCancelCheckIn = () => {\r\n        setModal(false);\r\n    };\r\n    const onCancelCheckOut = () => {\r\n        setModalCheckOut(false);\r\n    };\r\n    const onDelete = () => {\r\n\r\n    };\r\n/*    const handleInputChangeService = (e) => {\r\n        setSelectedServices({ ...selectedServices, [e.target.name]: e.target.value });\r\n    };*/\r\n    //console.lo(selectedServices)\r\n\r\n    const onSubmit = async (data) => {\r\n        try {\r\n            const today = new Date();\r\n            const visitDetails = await axios.get(`${baseUrl}patient/visit/visit-detail/${patientObj.id}`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            const visitDetail = visitDetails.data;\r\n            const pendingVisit = visitDetail.find(obj => obj.status == \"PENDING\");\r\n            let visit = null;\r\n            if (!pendingVisit) {\r\n                const visitResponse = await axios.post(`${baseUrl}patient/visit`, {\r\n                    \"personId\": patientObj.id,\r\n                    \"visitStartDate\": today\r\n                }, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n                visit = visitResponse.data;\r\n            } else {\r\n                visit = pendingVisit;\r\n            }\r\n            await axios.post(`${baseUrl}patient/encounter`, {\r\n                \"encounterDate\": today,\r\n                \"personId\": patientObj.id,\r\n                \"serviceCode\": data.VisitType,\r\n                \"status\": \"PENDING\",\r\n                \"visitId\": visit.id\r\n            }, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            setModal(false);\r\n            await Swal.fire({\r\n                icon: 'success',\r\n                text: 'CheckedIn successfully',\r\n                timer: 1500\r\n            });\r\n        } catch (e) {\r\n            await Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: 'An error occurred while checking in Patient!',\r\n            });\r\n        }\r\n    };\r\n    const onError = async () => {\r\n        await Swal.fire({\r\n            icon: 'error',\r\n            title: 'Oops...',\r\n            text: 'An error occurred while checking in Patient!',\r\n        });\r\n    };\r\n\r\n    let checkInServicesID = [];\r\n    /**** Submit Button For CheckIN  */\r\n    const handleSubmitCheckIn = (e) => {\r\n        e.preventDefault();\r\n        //Check if selected service object is empty before creating visit and posting.\r\n        let m = moment(checkInDate, \"yyyy-MM-DD hh:mm\").format('yyyy-MM-DD H:mm');\r\n        if(selectedServices.selected.length > 0 && moment(m).isValid()){\r\n            selectedServices.selected.length > 0 && selectedServices.selected.map((service)=> {\r\n                checkInServicesID.push(_.find(allServices,{moduleServiceCode:service}).id)\r\n            });\r\n\r\n            checkInObj.serviceIds= checkInServicesID\r\n            //Ensure date time is in 24hr format\r\n            checkInObj.visitDto.checkInDate = moment(checkInDate, \"yyyy-MM-DD hh:mm\").format('yyyy-MM-DD HH:mm');\r\n            axios.post(`${baseUrl}patient/visit/checkin`, checkInObj,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n\r\n            )\r\n                .then(response => {\r\n                    toast.success(\"Patient Check-In successful\");\r\n                    setCheckinStatus(true)\r\n                    onCancelCheckIn()\r\n                    loadPatientVisits()\r\n                })\r\n                .catch(error => {\r\n                    console.log(error)\r\n                    toast.error(\"Something went wrong\");\r\n                    onCancelCheckIn()\r\n                });\r\n        }else{\r\n            toast.error(\"Kindly check the form for a valid date and selected services\");\r\n        }\r\n\r\n    }\r\n\r\n    /**** Submit Button Processing  */\r\n    const handleSubmitCheckOut = (e) => {\r\n        e.preventDefault();\r\n        const getVisitID= patientVisits.find((visits)=> visits.status==='PENDING')\r\n\r\n        axios.put(`${baseUrl}patient/visit/checkout/${getVisitID.id}`,getVisitID.id,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n\r\n        )\r\n            .then(response => {\r\n                toast.success(\"Record save successful\");\r\n                setCheckinStatus(false)\r\n                onCancelCheckOut()\r\n                loadPatientVisits()\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n                toast.error(\"Something went wrong\");\r\n                onCancelCheckOut()\r\n            });\r\n    }\r\n    const onServiceSelect = (selectedValues) => {\r\n        setSelectedServices({\"selected\":selectedValues});\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Card>\r\n                <CardContent>\r\n\r\n                    <PatientCard patientObj={patientObj} permissions={permissions} patientBiometricStatus={patientBiometricStatus}/>\r\n                    <Card style={{marginTop:'10px',boxShadow: 'rgba(99, 99, 99, 0.2) 0px 2px 8px 0px'}}>\r\n                        <CardContent>\r\n                            <div className=\"row\">\r\n                                <div className=\"mb-3 col-md-3\">\r\n                                    &nbsp;\r\n                                </div>\r\n                                <div className=\"mb-3 col-md-3\">\r\n                                    &nbsp;\r\n                                </div>\r\n                                <div className=\"mb-3 col-md-3\">\r\n                                    &nbsp;\r\n                                </div>\r\n                                <div className=\"mb-3 col-md-3\">\r\n                                    <Link to={\"/\"} >\r\n                                        <MatButton\r\n                                            className=\" float-right mr-1\"\r\n                                            variant=\"contained\"\r\n                                            floated=\"left\"\r\n                                            startIcon={<TiArrowBack  />}\r\n                                            style={{backgroundColor:\"rgb(153, 46, 98)\", color:'#fff', height:'35px'}}\r\n                                        >\r\n                                            <span style={{ textTransform: \"capitalize\" }}>Back</span>\r\n                                        </MatButton>\r\n                                    </Link>\r\n\r\n                                    {permissions.includes('patient_check_in') || permissions.includes(\"all_permission\") ? (\r\n                                            <>\r\n                                                {checkinStatus===false ? (\r\n                                                        <Button\r\n                                                            variant=\"contained\"\r\n                                                            style={{ backgroundColor: \"rgb(4, 196, 217)\", fontSize:'14PX', fontWeight:'bold', height:'35px' }}\r\n                                                            onClick={handleCheckIn}\r\n                                                            className=\" float-right mr-1\"\r\n                                                        >\r\n                                                            <span style={{ textTransform: \"capitalize\" }}>CheckIn</span>\r\n                                                        </Button>\r\n                                                    )\r\n                                                    :\r\n                                                    \"\"\r\n                                                }\r\n                                            </>\r\n                                        )\r\n                                        :\"\"\r\n                                    }\r\n                                    {checkinStatus===true ? (\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                style={{ backgroundColor: \"green\", fontSize:'14PX', fontWeight:'bold', height:'35px' }}\r\n                                                onClick={handleCheckOut}\r\n                                                className=\" float-right mr-1\"\r\n                                            >\r\n                                                <span style={{ textTransform: \"capitalize\" }}>Check Out</span>\r\n                                            </Button>\r\n                                        )\r\n                                        :\r\n                                        \"\"\r\n                                    }\r\n\r\n                                </div>\r\n                            </div>\r\n                            <Tab panes={panes} />\r\n                        </CardContent>\r\n                    </Card>\r\n\r\n\r\n                </CardContent>\r\n            </Card>\r\n            <Modal  size=\"lg\" style={{maxWidth: '900px'}} isOpen={modal} toggle={onCancelCheckIn}  className={classes.checkinModal}>\r\n                    <ModalHeader toggle={onCancelCheckIn}><h5 style={{fontWeight:\"bold\",fontSize:'30px',color:'#992E62'}}>Select Check-In Service</h5></ModalHeader>\r\n                    <ModalBody>\r\n                        <form onSubmit={handleSubmitCheckIn}>\r\n                            <Paper\r\n                                style={{\r\n                                    display: \"grid\",\r\n                                    gridRowGap: \"20px\",\r\n                                    padding: \"20px\",\r\n                                    margin: \"10px 10px\",\r\n                                }}>\r\n                                <Grid container spacing={2}>\r\n                                    <Grid item xs={12}>\r\n                                        <FormGroup style={{width:'100%'}} className={classes.checkInDatePicker}>\r\n                                            <LocalizationProvider dateAdapter={AdapterDateFns} >\r\n                                                <Label for=\"post-services\" style={{color:'#014d88',fontWeight:'bolder',fontSize:'18px'}}>Check-In Date *</Label>\r\n                                                <DesktopDateTimePicker\r\n                                                    renderInput={(params) =>\r\n                                                        <TextField\r\n                                                            {...params}\r\n\r\n                                                            sx={{\r\n                                                                /*label:{ color:'#014d88',fontWeight:'bolder',fontSize:'18px' }*/\r\n                                                                input:{fontSize:'14px'},\r\n                                                            }}\r\n                                                            fullWidth\r\n                                                        />\r\n                                                    }\r\n                                                    value={checkInDate}\r\n                                                    onChange={(newValue) => {\r\n                                                        setCheckInDate(newValue);\r\n                                                    }}\r\n                                                    maxDate={new Date()}\r\n                                                    maxTime={new Date()}\r\n                                                    style={{width:'100%'}}\r\n                                                />\r\n                                            </LocalizationProvider>\r\n                                        </FormGroup>\r\n                                    </Grid>\r\n                                    {/*                                <Grid item xs={8}>\r\n\r\n                                    <FormControl >\r\n                                        <Label for=\"dateOfRegistration\">Select service </Label>\r\n                                        <Autocomplete\r\n                                            multiple\r\n                                            id=\"checkboxes-tags-demo\"\r\n                                            options={services}\r\n                                            //disableCloseOnSelect\r\n                                            getOptionLabel={(option) => option.moduleServiceName}\r\n                                            onChange={(e, i) => {\r\n                                                console.log(i)\r\n                                                setSelectedServices({ ...selectedServices, checkInServices: i });\r\n                                            }}\r\n                                            renderOption={(props, option, { selected }) => (\r\n                                                <li {...props}>\r\n                                                    <Checkbox\r\n                                                        icon={icon}\r\n                                                        checkedIcon={checkedIcon}\r\n                                                        style={{ marginRight: 8 }}\r\n                                                        checked={selected}\r\n                                                    />\r\n                                                    {option.moduleServiceName}\r\n                                                </li>\r\n                                            )}\r\n                                            style={{ width: 400 }}\r\n                                            renderInput={(params) => (\r\n                                                <TextField {...params} label=\"Services\" />\r\n                                            )}\r\n                                        />\r\n\r\n                                    </FormControl>\r\n                                </Grid>*/}\r\n                                    <Grid item xs={12}>\r\n                                        <FormGroup>\r\n                                            <Label for=\"post-services\" style={{color:'#014d88',fontWeight:'bolder',fontSize:'18px'}}><h5 style={{fontWeight:\"bold\",fontSize:'30px',color:'#992E62'}}>Check-In Service *</h5></Label>\r\n                                            <DualListBox\r\n                                                options={services}\r\n                                                onChange={onServiceSelect}\r\n                                                selected={selectedServices.selected}\r\n                                            />\r\n                                        </FormGroup>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid container spacing={2}>\r\n                                    <Grid item xs={12}>\r\n                                        <Button type={\"submit\"} variant=\"contained\" color={\"primary\"}>Submit</Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Paper>\r\n                        </form>\r\n                    </ModalBody>\r\n            </Modal>\r\n            {/* Modal for CheckOut Patient */}\r\n            <Modal isOpen={modalCheckOut} toggle={onCancelCheckOut} className={classes.checkinModal} style={{maxWidth: '900px',height:\"800px\"}}>\r\n                <ModalHeader toggle={onCancelCheckOut}><h5 style={{fontWeight:\"bold\",fontSize:'30px',color:'#014d88'}}>Check Out </h5></ModalHeader>\r\n                <ModalBody>\r\n                    <form >\r\n                        <Paper\r\n                            style={{\r\n                                display: \"grid\",\r\n                                gridRowGap: \"20px\",\r\n                                padding: \"20px\",\r\n                                margin: \"10px 10px\",\r\n                            }}>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item xs={12}>\r\n                                    <h5 style={{color:'#992E62',fontSize:\"20px\", fontWeight:'bold'}}>Are you sure you want to check-out patient?</h5>\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <FormGroup style={{width:'100%'}} className={classes.checkInDatePicker}>\r\n                                        <LocalizationProvider dateAdapter={AdapterDateFns} >\r\n                                            <Label for=\"post-services\" style={{color:'#014d88',fontWeight:'bolder',fontSize:'16px'}}>Check-Out Date *</Label>\r\n                                            <DesktopDateTimePicker\r\n                                                renderInput={(params) =>\r\n                                                    <TextField\r\n                                                        {...params}\r\n\r\n                                                        sx={{\r\n                                                            /*label:{ color:'#014d88',fontWeight:'bolder',fontSize:'18px' }*/\r\n                                                            input:{fontSize:'14px'},\r\n                                                        }}\r\n                                                        fullWidth\r\n                                                    />\r\n                                                }\r\n                                                value={checkOutDate}\r\n                                                onChange={(newValue) => {\r\n                                                    setCheckOutDate(newValue);\r\n                                                }}\r\n                                                maxDate={new Date()}\r\n                                                maxTime={new Date()}\r\n                                                style={{width:'100%'}}\r\n                                            />\r\n                                        </LocalizationProvider>\r\n                                    </FormGroup>\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item xs={12}>\r\n                                    <Button type={\"submit\"} onClick={handleSubmitCheckOut} variant=\"contained\" color={\"primary\"}>Yes</Button>\r\n                                    <Button  onClick={onCancelCheckOut} variant=\"contained\" style={{backgroundColor:'#992E62',color:\"#fff\",marginLeft:\"10px\"}}>Cancel</Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Paper>\r\n                    </form>\r\n                </ModalBody>\r\n            </Modal>\r\n            {/* End of Checkout Modal */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PatientDashboard;\r\n","C:\\Data.FI Code\\patient-module\\src\\main\\webapp\\components\\RegisterPatient.js",["116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137"],"import React, {useCallback, useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport {format} from 'date-fns';\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Form, FormGroup, Label, Spinner,} from \"reactstrap\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {library} from '@fortawesome/fontawesome-svg-core'\r\nimport {faCheckSquare, faCoffee, faEdit, faTrash} from '@fortawesome/free-solid-svg-icons'\r\nimport {yupResolver} from '@hookform/resolvers/yup';\r\nimport * as yup from \"yup\";\r\nimport * as moment from 'moment';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, CardContent} from \"@material-ui/core\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport {ToastContainer, toast} from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport {Link, useHistory, useLocation} from \"react-router-dom\";\r\nimport {TiArrowBack} from 'react-icons/ti'\r\nimport {useForm} from \"react-hook-form\";\r\nimport {token, url as baseUrl } from \"../../../api\";\r\nimport PhoneInput from 'react-phone-input-2'\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport _ from 'lodash';\r\n\r\nlibrary.add(faCheckSquare, faCoffee, faEdit, faTrash);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\"\r\n    },\r\n    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 300,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        marginBottom: 20,\r\n        flexGrow: 1,\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n\r\n    },\r\n    demo: {\r\n        backgroundColor: theme.palette.background.default,\r\n    },\r\n    inline: {\r\n        display: \"inline\",\r\n    },\r\n}));\r\n\r\nconst schema = yup.object().shape({\r\n    dateOfRegistration: yup.date().required(),\r\n    hospitalNumber: yup.string().required(),\r\n    firstName: yup.string().required(),\r\n    middleName: yup.string().nullable(),\r\n    lastName: yup.string().required(),\r\n    sex: yup.number().required(),\r\n    employmentStatus: yup.number().required(),\r\n    highestQualification: yup.number().required(),\r\n    maritalStatus: yup.number().required(),\r\n    dob: yup.date().required(),\r\n    dateOfBirth: yup.string().required(),\r\n    age: yup.number(),\r\n    pnumber: yup.string().required(),\r\n    altPhonenumber: yup.string().nullable(),\r\n    email: yup.string().nullable(),\r\n    address: yup.string().nullable(),\r\n    landmark: yup.string().nullable(),\r\n    countryId: yup.number().required(),\r\n    stateId: yup.number().required(),\r\n    district: yup.number().nullable(),\r\n});\r\n\r\nconst RegisterPatient = (props) => {\r\n    const { register, watch, setValue, getValues, setError, handleSubmit, formState: { errors } } = useForm({\r\n        resolver: yupResolver(schema),\r\n    });\r\n    const watchPnumber= watch(\"pnumber\", false);\r\n    const watchAltPhonenumber= watch(\"altPhonenumber\", false);\r\n    const watchContactPhoneNumber= watch(\"contactPhoneNumber\", false);\r\n    const watchShowAge = watch(\"age\", false);\r\n    const [today, setToday] = useState(new Date().toISOString().substr(0, 10).replace('T', ' '));\r\n    const [contacts, setContacts] = useState([]);\r\n    const [saving, setSaving] = useState(false);\r\n    const [ageDisabled, setAgeDisabled] = useState(true);\r\n    const [showRelative, setShowRelative] = useState(false);\r\n    const [editRelative, setEditRelative] = useState(null);\r\n    const [genders, setGenders]= useState([]);\r\n    const [sexOptions, setSexOptions]= useState([]);\r\n    const [maritalStatusOptions, setMaritalStatusOptions]= useState([]);\r\n    const [educationOptions, setEducationOptions]= useState([]);\r\n    const [occupationOptions, setOccupationOptions]= useState([]);\r\n    const [relationshipOptions, setRelationshipOptions]= useState([]);\r\n    const [topLevelUnitCountryOptions, settopLevelUnitCountryOptions]= useState([]);\r\n    const [stateUnitOptions, setStateUnitOptions]= useState([]);\r\n    const [districtUnitOptions, setDistrictUnitOptions]= useState([]);\r\n    const [checkHospitalNumberError, setCheckHospitalNumberError] = useState(false);\r\n    const userDetail = props.location && props.location.state ? props.location.state.user : null;\r\n    const[patientFacilityId,setPatientFacilityId]=useState(null);\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n\r\n    const location = useLocation();\r\n    const locationState = location.state;\r\n    let patientId = null;\r\n    patientId = locationState ? locationState.patientId : null;\r\n\r\n\r\n    const getNames = (relationship) => {\r\n        const surname = relationship.surname;\r\n        const firstName = relationship.firstName;\r\n        const otherName = relationship.otherName ? relationship.otherName : '';\r\n        return surname + ', ' + firstName + ' ' + otherName;\r\n    }\r\n    const getRelationship = (relationshipId) => {\r\n        const relationship = relationshipOptions.find(obj => obj.id == relationshipId);\r\n        return relationship ? relationship.display : '';\r\n    };\r\n    const getPhoneContactPoint = (contactPoint) => {\r\n        return contactPoint ? contactPoint.value : '';\r\n    };\r\n    const getAddress = (address) => {\r\n        return address && address.line && address.line.length > 0 ? address.line[0] : '';\r\n    };\r\n    const getPatient = useCallback(async () => {\r\n        if (patientId) {\r\n            const response = await axios.get(`${baseUrl}patient/${patientId}`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            const sexCodeset = await axios.get(`${baseUrl}application-codesets/v2/SEX`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            const patient = response.data;\r\n            const contacts = patient.contact ? patient.contact : [];\r\n            setContacts(contacts.contact);\r\n            const identifiers = patient.identifier;\r\n            const address = patient.address;\r\n            const contactPoint = patient.contactPoint;\r\n            const hospitalNumber = identifiers.identifier.find(obj => obj.type == 'HospitalNumber');\r\n            const phone = contactPoint.contactPoint.find(obj => obj.type == 'phone');\r\n            const email = contactPoint.contactPoint.find(obj => obj.type == 'email');\r\n            const altphone = contactPoint.contactPoint.find(obj => obj.type == 'altphone');\r\n            const country = address && address.address && address.address.length > 0 ? address.address[0] : null;\r\n            const gender = patient.gender;\r\n            const sex = _.find(sexCodeset.data, {'display':patient.sex}).id;\r\n            const employmentStatus = patient.employmentStatus;\r\n            const education = patient.education;\r\n            const maritalStatus = patient.maritalStatus;\r\n            setPatientFacilityId(patient.facilityId)\r\n            setValue('dateOfRegistration', patient.dateOfRegistration);\r\n            setValue('facilityId', patient.facilityId);\r\n            setValue('ninNumber', patient.ninNumber);\r\n            setValue('firstName', patient.firstName);\r\n            setValue('middleName', patient.otherName);\r\n            setValue('lastName', patient.surname);\r\n            setValue('hospitalNumber', hospitalNumber ? hospitalNumber.value : '');\r\n            setValue('maritalStatus', maritalStatus.id);\r\n            setValue('employmentStatus', employmentStatus.id);\r\n            //setValue('gender', gender.id);\r\n            setValue('sex', sex);\r\n            setValue('highestQualification', education.id);\r\n            setValue('dob', format(new Date(patient.dateOfBirth), 'yyyy-MM-dd'));\r\n            if (country) {\r\n                setValue('countryId', country.countryId);\r\n                const stateOptions = await loadOrganisationUnitsByParentId(country.countryId);\r\n                setStateUnitOptions(stateOptions);\r\n                setValue('stateId', country.stateId);\r\n                const districtOptions = await loadOrganisationUnitsByParentId(country.stateId);\r\n                setDistrictUnitOptions(districtOptions);\r\n                setValue('district', country.district);\r\n                setValue('address', country.city);\r\n                setValue('landmark', country.line[0]);\r\n            }\r\n            setValue('pnumber', phone ? phone.value : \"+234\");\r\n            setValue('email', email ? email.value : null);\r\n            setValue('altPhonenumber', altphone ? altphone.value : \"+234\");\r\n        }\r\n    }, []);\r\n    const handleAddRelative = () => {\r\n        setShowRelative(true);\r\n    };\r\n    const checkHospitalNumber = (e) =>{\r\n        axios.post(`${baseUrl}patient/exist/hospital-number`,e.target.value,{ responseType: 'text',headers: {\"Authorization\" : `Bearer ${token}`,'Content-Type': 'text/plain'} }).then(response=>{\r\n            console.log(response.data)\r\n            if(response.data){\r\n                toast.error(\"Error!!  Hospital Number Exists\");\r\n                setCheckHospitalNumberError(true)\r\n            }else{\r\n                setCheckHospitalNumberError(false)\r\n            }\r\n        }).catch((error)=>{\r\n            console.log(error)\r\n        })\r\n    }\r\n    const handleSaveRelationship = (e) => {\r\n        const relationshipType = getValues(\"relationshipType\");\r\n        const cfirstName = getValues(\"cfirstName\");\r\n        const cmiddleName = getValues(\"cmiddleName\");\r\n        const clastName = getValues(\"clastName\");\r\n        const contactPhoneNumber = getValues(\"contactPhoneNumber\");\r\n        const contactEmail = getValues(\"contactEmail\");\r\n        const contactAddress = getValues(\"contactAddress\");\r\n        if (!relationshipType) {\r\n            setError(\"relationshipType\", {  type: 'custom', message: 'Relationship is required' }, { shouldFocus: true });\r\n            return;\r\n        }\r\n        if (!cfirstName) {\r\n            setError(\"cfirstName\", {  type: 'custom', message: 'FirstName is required' }, { shouldFocus: true });\r\n            return;\r\n        }\r\n        if (!clastName) {\r\n            setError(\"clastName\", {  type: 'custom', message: 'LastName is required' }, { shouldFocus: true });\r\n            return;\r\n        }\r\n\r\n        const contact = {\r\n            \"address\": {\r\n                \"line\": [\r\n                    contactAddress\r\n                ],\r\n            },\r\n            \"contactPoint\": {\r\n                \"type\": \"phone\",\r\n                \"value\": contactPhoneNumber\r\n            },\r\n            \"firstName\": cfirstName,\r\n            \"fullName\": cfirstName + ' ' + cmiddleName + ' ' + clastName,\r\n            \"relationshipId\": relationshipType,\r\n            \"surname\": clastName,\r\n            \"otherName\": cmiddleName\r\n        };\r\n\r\n        if (editRelative != null) {\r\n            contacts.splice(editRelative, 1);\r\n            setContacts(contacts.concat(contact));\r\n        } else {\r\n            if(contacts === undefined){\r\n                setContacts([].concat(contact));\r\n            }else{\r\n                setContacts(contacts.concat(contact));\r\n            }\r\n\r\n        }\r\n        setShowRelative(false);\r\n    };\r\n    const handleCancelSaveRelationship = () => {\r\n        setShowRelative(false);\r\n    }\r\n    const onSubmit = async (data) => {\r\n        if(_.find(errors,function (error){return error;})){\r\n            toast.error(\"Failed to save form kindly check the form for errors\", {position: toast.POSITION.TOP_RIGHT});\r\n        }else{\r\n            try {\r\n                const patientForm = {\r\n                    active: true,\r\n                    address: [\r\n                        {\r\n                            \"city\": data.address,\r\n                            \"countryId\": data.countryId,\r\n                            \"district\": data.district,\r\n                            \"line\": [\r\n                                data.landmark\r\n                            ],\r\n                            \"organisationUnitId\": 0,\r\n                            \"postalCode\": \"\",\r\n                            \"stateId\": data.stateId\r\n                        }\r\n                    ],\r\n                    contact: contacts,\r\n                    contactPoint: [],\r\n                    dateOfBirth: new Date(data.dob),\r\n                    deceased: false,\r\n                    deceasedDateTime: null,\r\n                    firstName: data.firstName,\r\n                    sexId: data.sex,\r\n                    /*genderId:data.sex,*/\r\n                    identifier: [\r\n                        {\r\n                            \"assignerId\": 1,\r\n                            \"type\": \"HospitalNumber\",\r\n                            \"value\": data.hospitalNumber\r\n                        }\r\n                    ],\r\n                    ninNumber: data.ninNumber,\r\n                    otherName: data.middleName,\r\n                    maritalStatusId: data.maritalStatus,\r\n                    surname: data.lastName,\r\n                    educationId: data.highestQualification,\r\n                    employmentStatusId: data.employmentStatus,\r\n                    dateOfRegistration: data.dateOfRegistration,\r\n                    isDateOfBirthEstimated: data.dateOfBirth == \"Actual\" ? false : true\r\n                };\r\n                const phone = {\r\n                    \"type\": \"phone\",\r\n                    \"value\": data.pnumber\r\n                };\r\n                if (data.email) {\r\n                    const email = {\r\n                        \"type\": \"email\",\r\n                        \"value\": data.email\r\n                    }\r\n                    patientForm.contactPoint.push(email);\r\n                }\r\n                if (data.altPhonenumber) {\r\n                    const altPhonenumber = {\r\n                        \"type\": \"altphone\",\r\n                        \"value\": data.altPhonenumber\r\n                    }\r\n                    patientForm.contactPoint.push(altPhonenumber);\r\n                }\r\n                patientForm.contactPoint.push(phone);\r\n                if (patientId) {\r\n                    patientForm.id = null;\r\n                    patientForm.facilityId = patientFacilityId;\r\n                    const response = await axios.put(`${baseUrl}patient/${patientId}`, patientForm, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n                } else {\r\n                    const response = await axios.post(`${baseUrl}patient`, patientForm, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n                }\r\n                toast.success(\"Patient Register successful\");\r\n                history.push('/');\r\n            } catch (e) {\r\n                console.log(e);\r\n                toast.error(\"An error occured while registering a patient !\", {\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            }\r\n        }\r\n\r\n    };\r\n    const onError = (errors) => {\r\n        console.error(errors)\r\n    }\r\n    const handleEditRelative = (relative, index) => {\r\n        setValue(\"relationshipType\", relative.relationshipId);\r\n        setValue(\"cfirstName\", relative.firstName);\r\n        setValue(\"cmiddleName\", relative.otherName);\r\n        setValue(\"clastName\", relative.surname);\r\n        setValue(\"contactPhoneNumber\", relative.contactPoint ? relative.contactPoint.value : '');\r\n        setValue(\"contactAddress\", relative.address && relative.address.line && relative.address.line.length > 0 ? relative.address.line[0] : '');\r\n        setShowRelative(true);\r\n        setEditRelative(index);\r\n    };\r\n    const handleDeleteRelative = (index) => {\r\n        setTimeout(() => {\r\n            contacts.splice(index, 1);\r\n            setContacts(contacts);\r\n            setShowRelative(true);\r\n            setShowRelative(false);\r\n        }, 500);\r\n    };\r\n\r\n    const loadSexes = useCallback(async () => {\r\n        try {\r\n            const response = await axios.get(`${baseUrl}application-codesets/v2/SEX`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            await setSexOptions(response.data);\r\n        } catch (e) {\r\n            toast.error(\"An error occured while fetching sex codesets !\", {\r\n                position: toast.POSITION.TOP_RIGHT\r\n            });\r\n        }\r\n    }, []);\r\n    const loadMaritalStatus = useCallback(async () => {\r\n        try {\r\n            const response = await axios.get(`${baseUrl}application-codesets/v2/MARITAL_STATUS`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            setMaritalStatusOptions(response.data);\r\n        } catch (e) {\r\n            toast.error(\"An error occured while fetching marital codesets !\", {\r\n                position: toast.POSITION.TOP_RIGHT\r\n            });\r\n        }\r\n    }, []);\r\n    const loadEducation = useCallback(async () => {\r\n        try {\r\n            const response = await axios.get(`${baseUrl}application-codesets/v2/EDUCATION`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            setEducationOptions(response.data);\r\n        } catch (e) {\r\n            toast.error(\"An error occured while fetching education codesets !\", {\r\n                position: toast.POSITION.TOP_RIGHT\r\n            });\r\n        }\r\n    }, []);\r\n    const loadOccupation = useCallback(async () => {\r\n        try {\r\n            const response = await axios.get(`${baseUrl}application-codesets/v2/OCCUPATION`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            setOccupationOptions(response.data);\r\n        } catch (e) {\r\n            toast.error(\"An error occured while fetching occupation codesets !\", {\r\n                position: toast.POSITION.TOP_RIGHT\r\n            });\r\n        }\r\n    }, []);\r\n    const loadRelationships = useCallback(async () => {\r\n      try {\r\n          const response = await axios.get(`${baseUrl}application-codesets/v2/RELATIONSHIP`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n          setRelationshipOptions(response.data);\r\n      } catch (e) {\r\n          toast.error(\"An error occured while fetching relationship codesets !\", {\r\n              position: toast.POSITION.TOP_RIGHT\r\n          });\r\n      }\r\n    }, []);\r\n    const loadTopLevelCountry = useCallback(async () => {\r\n        const response = await axios.get(`${baseUrl}organisation-units/parent-organisation-units/0`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n        settopLevelUnitCountryOptions(response.data);\r\n    }, []);\r\n    const loadOrganisationUnitsByParentId = async (parentId) => {\r\n        const response = await axios.get(`${baseUrl}organisation-units/parent-organisation-units/${parentId}`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n        return response.data;\r\n    };\r\n    const onCountryChange = async (e) => {\r\n        if (e.target.value) {\r\n            const stateOptions = await loadOrganisationUnitsByParentId(e.target.value);\r\n            setStateUnitOptions(stateOptions);\r\n        } else {\r\n            setStateUnitOptions([]);\r\n        }\r\n    };\r\n    const onStateChange = async (e) => {\r\n        if (e.target.value) {\r\n            const districtOptions = await loadOrganisationUnitsByParentId(e.target.value);\r\n            setDistrictUnitOptions(districtOptions);\r\n        } else {\r\n            setDistrictUnitOptions([]);\r\n        }\r\n    };\r\n    \r\n    const handleDobChange = (e) => {\r\n        if (e.target.value) {\r\n            const today = new Date();\r\n            const birthDate = new Date(e.target.value);\r\n            let age_now = today.getFullYear() - birthDate.getFullYear();\r\n            const m = today.getMonth() - birthDate.getMonth();\r\n            if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n                age_now--;\r\n            }\r\n            setValue('age', age_now);\r\n        } else {\r\n            setValue('age', null);\r\n        }\r\n    }\r\n\r\n    const handleDateOfBirthChange = (e) => {\r\n        if (e.target.value == \"Actual\") {\r\n            setAgeDisabled(true);\r\n        } else if (e.target.value == \"Estimated\") {\r\n            setAgeDisabled(false);\r\n        }\r\n    }\r\n\r\n    const handleAgeChange = (e) => {\r\n        if (!ageDisabled && e.target.value) {\r\n            setValue('age', e.target.value);\r\n            const currentDate = new Date();\r\n            currentDate.setDate(15);\r\n            currentDate.setMonth(5);\r\n            const estDob = moment(currentDate.toISOString());\r\n            const dob = estDob.add((e.target.value * -1), 'years');\r\n            setValue('dob', format(new Date(dob.toDate()), 'yyyy-MM-dd'));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadSexes();\r\n        loadMaritalStatus();\r\n        loadEducation();\r\n        loadOccupation();\r\n        loadRelationships();\r\n        loadTopLevelCountry();\r\n        getPatient();\r\n    }, [loadSexes, loadMaritalStatus, loadEducation, loadOccupation, loadRelationships, loadTopLevelCountry, getPatient]);\r\n\r\n    let genderRows = null;\r\n    let sexRows = null;\r\n    let maritalStatusRows = null;\r\n    let educationRows = null;\r\n    let occupationRows = null;\r\n    let relationshipRows = null;\r\n    let topLevelUnitCountryRows = null;\r\n    let stateRows = null;\r\n    let districtRows = null;\r\n    if (sexOptions && sexOptions.length > 0) {\r\n        sexRows = sexOptions.map((sex, index) => (\r\n            <option key={sex.id} value={sex.id}>{sex.display}</option>\r\n        ));\r\n    }\r\n    if (maritalStatusOptions && maritalStatusOptions.length > 0) {\r\n        maritalStatusRows = maritalStatusOptions.map((maritalStatusOption, index) => (\r\n            <option key={maritalStatusOption.id} value={maritalStatusOption.id}>{maritalStatusOption.display}</option>\r\n        ));\r\n    }\r\n    if (educationOptions && educationOptions.length > 0) {\r\n        educationRows = educationOptions.map((educationOption, index) => (\r\n            <option key={educationOption.id} value={educationOption.id}>{educationOption.display}</option>\r\n        ));\r\n    }\r\n    if (occupationOptions && occupationOptions.length > 0) {\r\n        occupationRows = occupationOptions.map((occupationOption, index) => (\r\n            <option key={occupationOption.id} value={occupationOption.id}>{occupationOption.display}</option>\r\n        ));\r\n    }\r\n    if (relationshipOptions && relationshipOptions.length > 0) {\r\n        relationshipRows = relationshipOptions.map((relationshipOption, index) => (\r\n            <option key={relationshipOption.id} value={relationshipOption.id}>{relationshipOption.display}</option>\r\n        ));\r\n    }\r\n    if (topLevelUnitCountryOptions && topLevelUnitCountryOptions.length > 0) {\r\n        topLevelUnitCountryRows = topLevelUnitCountryOptions.map((topLevelUnitCountryOption, index) => (\r\n            <option key={topLevelUnitCountryOption.id} value={topLevelUnitCountryOption.id}>{topLevelUnitCountryOption.name}</option>\r\n        ));\r\n    }\r\n    if (stateUnitOptions && stateUnitOptions.length > 0) {\r\n        stateRows = stateUnitOptions.map((stateUnitOption, index) => (\r\n            <option key={stateUnitOption.id} value={stateUnitOption.id}>{stateUnitOption.name}</option>\r\n        ));\r\n    }\r\n    if (districtUnitOptions && districtUnitOptions.length > 0) {\r\n        districtRows = districtUnitOptions.map((districtUnitOption, index) => (\r\n            <option key={districtUnitOption.id} value={districtUnitOption.id}>{districtUnitOption.name}</option>\r\n        ));\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        history.push('/');\r\n    };\r\n\r\n    const checkPhoneNumber=(e, inputName)=>{\r\n        setValue(inputName,e);\r\n    }\r\n\r\n     const alphabetOnly=(e, inputName)=>{\r\n         const result = e.target.value.replace(/[^a-z]/gi, '');\r\n         setValue(inputName,result);\r\n     }\r\n\r\n    return (\r\n        <>\r\n            <ToastContainer autoClose={3000} hideProgressBar />\r\n            <Card className={classes.root}>\r\n                <CardContent>\r\n                    <Link\r\n                        to={{\r\n                            pathname: \"/\",\r\n                            state: 'users'\r\n                        }}>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className=\" float-right ms-1\"\r\n                            style={{backgroundColor:'#014d88',fontWeight:\"bolder\"}}\r\n                            startIcon={<TiArrowBack />}\r\n                        >\r\n                            <span style={{ textTransform: \"capitalize\" }}>Back </span>\r\n                        </Button>\r\n                    </Link>\r\n                    <br />\r\n                    <br />\r\n                    <div className=\"col-xl-12 col-lg-12\">\r\n                        <Form onSubmit={handleSubmit(onSubmit, onError)}>\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder'}}>\r\n                                    <h5 className=\"card-title\" style={{color:'#fff',fontWeight:'bolder'}}>{userDetail===null ? \"Basic Information\" : \"Edit User Information\"}</h5>\r\n                                </div>\r\n\r\n                                <div className=\"card-body\">\r\n                                    <div className=\"basic-form\">\r\n                                        <div className=\"row\">\r\n                                            <div className=\"form-group mb-3 col-md-3\">\r\n                                                <FormGroup>\r\n                                                    <Label for=\"dateOfRegistration\">Date of Registration* </Label>\r\n                                                    <input\r\n                                                        className=\"form-control\"\r\n                                                        type=\"date\"\r\n                                                        name=\"dateOfRegistration\"\r\n                                                        id=\"dateOfRegistration\"\r\n                                                        max={today}\r\n                                                        {...register(\"dateOfRegistration\")}\r\n                                                        style={{border: \"1px solid #014d88\"}}\r\n                                                    />\r\n                                                    {errors.dateOfRegistration && <p>Enter the registration date</p>}\r\n                                                </FormGroup>\r\n                                            </div>\r\n\r\n                                            <div className=\"form-group mb-3 col-md-3\">\r\n                                                <FormGroup>\r\n                                                    <Label for=\"patientId\">Hospital Number* </Label>\r\n                                                    <input\r\n                                                        className=\"form-control\"\r\n                                                        type=\"text\"\r\n                                                        name=\"hospitalNumber\"\r\n                                                        id=\"hospitalNumber\"\r\n                                                        onChange={checkHospitalNumber}\r\n                                                        {...register(\"hospitalNumber\",{\r\n                                                            onChange:(e)=>{checkHospitalNumber(e)}\r\n                                                        })}\r\n                                                        style={{border: \"1px solid #014d88\"}}\r\n                                                    />\r\n                                                    {checkHospitalNumberError && <p>Hospital number has been registered before</p> }\r\n                                                    {!checkHospitalNumberError && errors.hospitalNumber && <p>Enter the hospital number</p>}\r\n                                                </FormGroup>\r\n                                            </div>\r\n                                            <div className=\"form-group mb-3 col-md-3\">\r\n                                                <FormGroup>\r\n                                                    <Label for=\"ninNumber\">National Identification Number (NIN)</Label>\r\n                                                    <input\r\n                                                        className=\"form-control\"\r\n                                                        type=\"text\"\r\n                                                        name=\"ninNumber\"\r\n                                                        id=\"ninNumber\"\r\n                                                        style={{border: \"1px solid #014d88\"}}\r\n                                                        {...register(\"ninNumber\")}\r\n                                                    />\r\n                                                </FormGroup>\r\n                                            </div>\r\n                                            <div className=\"form-group mb-3 col-md-3\">\r\n                                                <FormGroup>\r\n                                                    <Label for=\"emrId\">EMR ID *</Label>\r\n                                                    <input\r\n                                                        className=\"form-control\"\r\n                                                        disabled={true}\r\n                                                        type=\"text\"\r\n                                                        name=\"emrId\"\r\n                                                        id=\"emrId\"\r\n                                                        style={{border: \"1px solid #014d88\"}}\r\n                                                    />\r\n                                                </FormGroup>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div className=\"row\">\r\n                                            <div className=\"form-group mb-3 col-md-4\">\r\n                                                <FormGroup>\r\n                                                    <Label for=\"firstName\">First Names *</Label>\r\n                                                    <input\r\n                                                        className=\"form-control\"\r\n                                                        type=\"text\"\r\n                                                        name=\"firstName\"\r\n                                                        id=\"firstName\"\r\n                                                        {...register(\"firstName\",{\r\n                                                            onChange:(e)=>{alphabetOnly(e,'firstName')}\r\n                                                        })}\r\n                                                        style={{border: \"1px solid #014d88\"}}\r\n                                                    />\r\n                                                    {errors.firstName && <p>First Name is required</p>}\r\n                                                </FormGroup>\r\n                                            </div>\r\n\r\n                                            <div className=\"form-group mb-3 col-md-4\">\r\n                                                <FormGroup>\r\n                                                    <Label>Middle Name</Label>\r\n                                                    <input\r\n                                                        className=\"form-control\"\r\n                                                        type=\"text\"\r\n                                                        name=\"middleName\"\r\n                                                        id=\"middleName\"\r\n                                                        {...register(\"middleName\",{\r\n                                                            onChange:(e)=>{alphabetOnly(e,'middleName')}\r\n                                                        })}\r\n                                                        style={{border: \"1px solid #014d88\"}}\r\n                                                    />\r\n                                                    {errors.middleName && <p>{errors.middleName.message}</p>}\r\n                                                </FormGroup>\r\n                                            </div>\r\n\r\n                                            <div className=\"form-group mb-3 col-md-4\">\r\n                                                <FormGroup>\r\n                                                    <Label>Last Name *</Label>\r\n                                                    <input\r\n                                                        className=\"form-control\"\r\n                                                        type=\"text\"\r\n                                                        name=\"lastName\"\r\n                                                        id=\"lastName\"\r\n                                                        {...register(\"lastName\",{\r\n                                                            onChange:(e)=>{alphabetOnly(e,'lastName')}\r\n                                                        })}\r\n                                                        style={{border: \"1px solid #014d88\"}}\r\n                                                    />\r\n                                                    {errors.lastName && <p>Last Name is required</p>}\r\n                                                </FormGroup>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div className=\"row\">\r\n                                            <div className=\"form-group  col-md-4\">\r\n                                                <FormGroup>\r\n                                                    <Label>Sex *</Label>\r\n                                                    <select\r\n                                                        className=\"form-control\"\r\n                                                        name=\"sex\"\r\n                                                        id=\"sex\"\r\n                                                        {...register(\"sex\")}\r\n                                                        style={{border: \"1px solid #014d88\"}}\r\n                                                    >\r\n                                                        <option value={\"\"}>Select Sex</option>\r\n                                                        {sexRows}\r\n                                                    </select>\r\n                                                    {errors.sex && <p>Select Sex</p>}\r\n                                                </FormGroup>\r\n                                            </div>\r\n                                            <div className=\"form-group mb-2 col-md-2\">\r\n                                                <FormGroup>\r\n                                                    <Label>Date Of Birth</Label>\r\n                                                    <div className=\"radio\">\r\n                                                        <label>\r\n                                                            <input\r\n                                                                type=\"radio\"\r\n                                                                value=\"Actual\"\r\n                                                                name=\"dateOfBirth\"\r\n                                                                defaultChecked\r\n                                                                {...register(\"dateOfBirth\")}\r\n                                                                onChange={(e) => handleDateOfBirthChange(e)}\r\n                                                                style={{border: \"1px solid #014d88\"}}\r\n                                                            /> Actual\r\n                                                        </label>\r\n                                                    </div>\r\n                                                    <div className=\"radio\">\r\n                                                        <label>\r\n                                                            <input\r\n                                                                type=\"radio\"\r\n                                                                value=\"Estimated\"\r\n                                                                name=\"dateOfBirth\"\r\n                                                                {...register(\"dateOfBirth\")}\r\n                                                                onChange={(e) => handleDateOfBirthChange(e)}\r\n                                                                style={{border: \"1px solid #014d88\"}}\r\n                                                            /> Estimated\r\n                                                        </label>\r\n                                                    </div>\r\n                                                </FormGroup>\r\n                                            </div>\r\n\r\n                                            <div className=\"form-group mb-3 col-md-3\">\r\n                                                <FormGroup>\r\n                                                    <Label>Date</Label>\r\n                                                    <input\r\n                                                        className=\"form-control\"\r\n                                                        type=\"date\"\r\n                                                        name=\"dob\"\r\n                                                        id=\"dob\"\r\n                                                        max={today}\r\n                                                        {...register(\"dob\")}\r\n                                                        onChange={(e) => handleDobChange(e)}\r\n                                                        style={{border: \"1px solid #014d88\"}}\r\n                                                    />\r\n                                                    {errors.dob && <p>Enter a valid date of birth (dd/mm/yyyy)</p>}\r\n                                                </FormGroup>\r\n                                            </div>\r\n\r\n                                            <div className=\"form-group mb-3 col-md-3\">\r\n                                                <FormGroup>\r\n                                                    <Label>Age</Label>\r\n                                                    <input\r\n                                                        className=\"form-control\"\r\n                                                        type=\"number\"\r\n                                                        name=\"age\"\r\n                                                        id=\"age\"\r\n                                                        {...register(\"age\")}\r\n                                                        disabled={ageDisabled}\r\n                                                        onChange={(e) => handleAgeChange(e)}\r\n                                                        style={{border: \"1px solid #014d88\"}}\r\n                                                    />\r\n                                                </FormGroup>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div className={\"row\"}>\r\n{/*                                            {watchShowAge >=0 &&\r\n                                            <>*/}\r\n                                                <div className=\"form-group mb-3 col-md-3\">\r\n                                                    <FormGroup>\r\n                                                        <Label>Marital Status</Label>\r\n                                                        <select\r\n                                                            className=\"form-control\"\r\n                                                            name=\"maritalStatus\"\r\n                                                            id=\"maritalStatus\"\r\n                                                            {...register(\"maritalStatus\")}\r\n                                                            style={{border: \"1px solid #014d88\"}}\r\n                                                        >\r\n                                                            <option value={\"\"}>Select Marital Status</option>\r\n                                                            {maritalStatusRows}\r\n                                                        </select>\r\n                                                        {errors.maritalStatus && <p>Select Marital Status</p>}\r\n                                                    </FormGroup>\r\n                                                </div>\r\n\r\n                                                <div className=\"form-group  col-md-4\">\r\n                                                    <FormGroup>\r\n                                                        <Label>Employment Status *</Label>\r\n                                                        <select\r\n                                                            className=\"form-control\"\r\n                                                            name=\"employmentStatus\"\r\n                                                            id=\"employmentStatus\"\r\n                                                            {...register(\"employmentStatus\")}\r\n                                                            style={{border: \"1px solid #014d88\"}}\r\n                                                        >\r\n                                                            <option value={\"\"}>Select Employment Status</option>\r\n                                                            {occupationRows}\r\n                                                        </select>\r\n                                                        {errors.employmentStatus && <p>Select Employment Status</p>}\r\n                                                    </FormGroup>\r\n                                                </div>\r\n{/*\r\n                                            </>\r\n                                            }\r\n*/}\r\n\r\n\r\n                                            <div className=\"form-group  col-md-4\">\r\n                                                <FormGroup>\r\n                                                    <Label>Education Level *</Label>\r\n                                                    <select\r\n                                                        className=\"form-control\"\r\n                                                        name=\"highestQualification\"\r\n                                                        id=\"highestQualification\"\r\n                                                        {...register(\"highestQualification\")}\r\n                                                        style={{border: \"1px solid #014d88\"}}\r\n                                                    >\r\n                                                        <option value={\"\"}>Select the Education Level</option>\r\n                                                        {educationRows}\r\n                                                    </select>\r\n                                                    {errors.highestQualification && <p>Select the Education Level</p>}\r\n                                                </FormGroup>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder'}}>\r\n                                    <h5 className=\"card-title\">Contact Details</h5>\r\n                                </div>\r\n\r\n                                <div className=\"card-body\">\r\n                                    <div className={\"row\"}>\r\n                                        <div className=\"form-group  col-md-4\">\r\n                                            <FormGroup>\r\n                                                <Label>Phone Number *</Label>\r\n                                                <PhoneInput\r\n                                                    containerStyle={{width:'100%',border: \"1px solid #014d88\"}}\r\n                                                    inputStyle={{width:'100%',borderRadius:'0px'}}\r\n                                                    country={'ng'}\r\n                                                    masks={{ng: '...-...-....', at: '(....) ...-....'}}\r\n                                                    placeholder=\"(234)7099999999\"\r\n                                                    value={getValues('pnumber')}\r\n                                                    onChange={(e)=>{checkPhoneNumber(e,'pnumber')}}\r\n                                                    isValid={(value, country) => {\r\n                                                        if(value === country.countryCode){\r\n                                                            return true;\r\n                                                        }else{\r\n                                                            if(value.length < 13){\r\n                                                                errors.pnumber = true;\r\n                                                                return false;\r\n                                                            }else{\r\n                                                                errors.pnumber = false;\r\n                                                                return true;\r\n                                                            }\r\n                                                        }\r\n                                                    }}\r\n                                                />\r\n\r\n{/*                                                <input\r\n                                                    className=\"form-control\"\r\n                                                    type=\"tel\"\r\n                                                    name=\"pnumber\"\r\n                                                    id=\"pnumber\"\r\n                                                    {...register(\"pnumber\",{\r\n                                                        onChange:(e)=>{checkPhoneNumber(e,'pnumber')}\r\n                                                    })}\r\n                                                    placeholder=\"(234)7099999999\"\r\n                                                    style={{border: \"1px solid #014d88\"}}\r\n                                                />*/}\r\n                                                {errors.pnumber && <p>Phone number is required</p>}\r\n                                            </FormGroup>\r\n                                        </div>\r\n\r\n                                        <div className=\"form-group col-md-4\">\r\n                                            <FormGroup>\r\n                                                <Label>Alt. Phone Number</Label>\r\n                                                <PhoneInput\r\n                                                    containerStyle={{width:'100%',border: \"1px solid #014d88\"}}\r\n                                                    inputStyle={{width:'100%',borderRadius:'0px'}}\r\n                                                    country={'ng'}\r\n                                                    masks={{ng: '...-...-....', at: '(....) ...-....'}}\r\n                                                    placeholder=\"(234)7099999999\"\r\n                                                    value={getValues('altPhonenumber')}\r\n                                                    onChange={(e)=>{checkPhoneNumber(e,'altPhonenumber')}}\r\n                                                    isValid={(value, country) => {\r\n                                                        if(value === country.countryCode){\r\n                                                            return true;\r\n                                                        }else{\r\n                                                            if(value.length < 13){\r\n                                                                errors.altPhonenumber = true;\r\n                                                                return \"Enter a valid phone number\";\r\n                                                            }else{\r\n                                                                errors.altPhonenumber = false;\r\n                                                                return true;\r\n                                                            }\r\n                                                        }\r\n                                                    }}\r\n                                                />\r\n{/*                                                <input\r\n                                                    className=\"form-control\"\r\n                                                    type=\"tel\"\r\n                                                    name=\"altPhoneNumber\"\r\n                                                    id=\"altPhoneNumber\"\r\n                                                    {...register(\"altPhonenumber\",{\r\n                                                        onChange:(e)=>{checkPhoneNumber(e,'altPhonenumber')}\r\n                                                    })}\r\n                                                    placeholder=\"(234)7099999999\"\r\n                                                    style={{border: \"1px solid #014d88\"}}\r\n                                                />*/}\r\n                                                {errors.altPhonenumber && <p>{errors.altPhonenumber.message}</p>}\r\n                                            </FormGroup>\r\n                                        </div>\r\n\r\n                                        <div className=\"form-group col-md-4\">\r\n                                            <FormGroup>\r\n                                                <Label>Email</Label>\r\n                                                <input\r\n                                                    className=\"form-control\"\r\n                                                    type=\"email\"\r\n                                                    name=\"email\"\r\n                                                    id=\"email\"\r\n                                                    {...register(\"email\")}\r\n                                                    style={{border: \"1px solid #014d88\"}}\r\n                                                />\r\n                                                {errors.email && <p>{errors.email.message}</p>}\r\n                                            </FormGroup>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div className=\"row\">\r\n                                        <div className=\"form-group  col-md-4\">\r\n                                            <FormGroup>\r\n                                                <Label>Country *</Label>\r\n                                                <select\r\n                                                    className=\"form-control\"\r\n                                                    type=\"text\"\r\n                                                    name=\"country\"\r\n                                                    id=\"country\"\r\n                                                    style={{border: \"1px solid #014d88\"}}\r\n                                                    {...register(\"countryId\")}\r\n                                                    onChange={(e) => onCountryChange(e)}>\r\n                                                    <option value={\"\"}>Select Country</option>\r\n                                                    {topLevelUnitCountryRows}\r\n                                                </select>\r\n                                                {errors.countryId && <p>Select Country</p>}\r\n                                            </FormGroup>\r\n                                        </div>\r\n\r\n                                        <div className=\"form-group  col-md-4\">\r\n                                            <FormGroup>\r\n                                                <Label>State *</Label>\r\n                                                <select\r\n                                                    className=\"form-control\"\r\n                                                    type=\"text\"\r\n                                                    name=\"stateId\"\r\n                                                    id=\"stateId\"\r\n                                                    style={{border: \"1px solid #014d88\"}}\r\n                                                    {...register(\"stateId\")}\r\n                                                    onChange={(e) => onStateChange(e)}>\r\n                                                    <option value={\"\"}>Select State</option>\r\n                                                    {stateRows}\r\n                                                </select>\r\n                                                {errors.stateId && <p>Select State</p>}\r\n                                            </FormGroup>\r\n                                        </div>\r\n\r\n                                        <div className=\"form-group  col-md-4\">\r\n                                            <FormGroup>\r\n                                                <Label>Province/District/LGA *</Label>\r\n                                                <select\r\n                                                    className=\"form-control\"\r\n                                                    type=\"text\"\r\n                                                    name=\"district\"\r\n                                                    id=\"district\"\r\n                                                    style={{border: \"1px solid #014d88\"}}\r\n                                                    {...register(\"district\")}>\r\n                                                    <option value={\"\"}>Select Province/District/LGA</option>\r\n                                                    {districtRows}\r\n                                                </select>\r\n                                                {errors.district && <p>Select Province/District/LGA</p>}\r\n                                            </FormGroup>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div className={\"row\"}>\r\n                                        <div className=\"form-group  col-md-4\">\r\n                                            <FormGroup>\r\n                                                <Label>Street Address</Label>\r\n                                                <input\r\n                                                    className=\"form-control\"\r\n                                                    type=\"text\"\r\n                                                    name=\"address\"\r\n                                                    id=\"address\"\r\n                                                    style={{border: \"1px solid #014d88\"}}\r\n                                                    {...register(\"address\")}\r\n                                                />\r\n                                                {errors.address && <p>{errors.address.message}</p>}\r\n                                            </FormGroup>\r\n                                        </div>\r\n\r\n                                        <div className=\"form-group  col-md-4\">\r\n                                            <FormGroup>\r\n                                                <Label>Landmark</Label>\r\n                                                <input\r\n                                                    className=\"form-control\"\r\n                                                    type=\"text\"\r\n                                                    name=\"landmark\"\r\n                                                    id=\"landmark\"\r\n                                                    style={{border: \"1px solid #014d88\"}}\r\n                                                    {...register(\"landmark\")}\r\n                                                />\r\n                                                {errors.landmark && <p>{errors.landmark.message}</p>}\r\n                                            </FormGroup>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder'}}>\r\n                                    <h5 className=\"card-title\">Relationship / Next Of Kin</h5>\r\n                                </div>\r\n                                <div className=\"card-body\">\r\n                                    <div className=\"row\">\r\n                                        {\r\n                                            contacts && contacts.length > 0 && (\r\n                                                <div className=\"col-xl-12 col-lg-12\">\r\n                                                    <table style={{ width: '100%' }}>\r\n                                                        <thead>\r\n                                                        <tr>\r\n                                                            <th>Relationship Type</th>\r\n                                                            <th>Name</th>\r\n                                                            <th>Phone</th>\r\n                                                            <th>Address</th>\r\n                                                            <th>Actions</th>\r\n                                                        </tr>\r\n                                                        </thead>\r\n                                                        <tbody>\r\n                                                        {contacts.map((item, index) => {\r\n                                                            return (\r\n                                                                <tr key={item.index}>\r\n                                                                    <td>{ getRelationship(item.relationshipId) }</td>\r\n                                                                    <td>{ getNames(item) }</td>\r\n                                                                    <td>{ getPhoneContactPoint(item.contactPoint) }</td>\r\n                                                                    <td>{ getAddress(item.address) }</td>\r\n                                                                    <td>\r\n                                                                        <button type=\"button\"\r\n                                                                                className=\"btn btn-default btn-light btn-sm editRow\"\r\n                                                                                onClick={(e) => handleEditRelative(item, index)}>\r\n                                                                            <FontAwesomeIcon icon=\"edit\" />\r\n                                                                        </button>\r\n                                                                        &nbsp;&nbsp;\r\n                                                                        <button\r\n                                                                            type=\"button\"\r\n                                                                            className=\"btn btn-danger btn-sm removeRow\"\r\n                                                                            onClick={(e) => handleDeleteRelative(index)}>\r\n                                                                            <FontAwesomeIcon icon=\"trash\" />\r\n                                                                        </button>\r\n                                                                    </td>\r\n                                                                </tr>\r\n                                                            );\r\n                                                        })}\r\n                                                        </tbody>\r\n                                                    </table>\r\n                                                </div>\r\n                                            )\r\n                                        }\r\n                                        <div className=\"col-xl-12 col-lg-12\">\r\n                                            {\r\n                                                showRelative && (\r\n                                                    <div className=\"card\">\r\n                                                        <div className=\"card-body\">\r\n                                                            <div className=\"row\">\r\n                                                                <div className=\"form-group mb-3 col-md-3\">\r\n                                                                    <FormGroup>\r\n                                                                        <Label for=\"relationshipType\">Relationship Type *</Label>\r\n                                                                        <select\r\n                                                                            className=\"form-control\"\r\n                                                                            name=\"relationshipType\"\r\n                                                                            id=\"relationshipType\"\r\n                                                                            style={{border: \"1px solid #014d88\"}}\r\n                                                                            {...register(\"relationshipType\")}>\r\n                                                                            <option value={\"\"}></option>\r\n                                                                            {relationshipRows}\r\n                                                                        </select>\r\n                                                                        {errors.relationshipType && <p>{errors.relationshipType.message}</p>}\r\n                                                                    </FormGroup>\r\n                                                                </div>\r\n\r\n                                                                <div className=\"form-group mb-3 col-md-3\">\r\n                                                                    <FormGroup>\r\n                                                                        <Label for=\"cfirstName\">First Name *</Label>\r\n                                                                        <input\r\n                                                                            className=\"form-control\"\r\n                                                                            type=\"text\"\r\n                                                                            name=\"cfirstName\"\r\n                                                                            id=\"cfirstName\"\r\n                                                                            style={{border: \"1px solid #014d88\"}}\r\n                                                                            {...register(\"cfirstName\",{\r\n                                                                                onChange:(e)=>{alphabetOnly(e,'cfirstName')}\r\n                                                                            })}\r\n                                                                        />\r\n                                                                        {errors.cfirstName && <p>{errors.cfirstName.message}</p>}\r\n                                                                    </FormGroup>\r\n                                                                </div>\r\n\r\n                                                                <div className=\"form-group mb-3 col-md-3\">\r\n                                                                    <FormGroup>\r\n                                                                        <Label>Middle Name</Label>\r\n                                                                        <input\r\n                                                                            className=\"form-control\"\r\n                                                                            type=\"text\"\r\n                                                                            name=\"cmiddleName\"\r\n                                                                            id=\"cmiddleName\"\r\n                                                                            style={{border: \"1px solid #014d88\"}}\r\n                                                                            {...register(\"cmiddleName\",{\r\n                                                                                onChange:(e)=>{alphabetOnly(e,'cmiddleName')}\r\n                                                                            })}\r\n                                                                        />\r\n                                                                        {errors.cmiddleName && <p>{errors.cmiddleName.message}</p>}\r\n                                                                    </FormGroup>\r\n                                                                </div>\r\n\r\n                                                                <div className=\"form-group mb-3 col-md-3\">\r\n                                                                    <FormGroup>\r\n                                                                        <Label>Last Name *</Label>\r\n                                                                        <input\r\n                                                                            className=\"form-control\"\r\n                                                                            type=\"text\"\r\n                                                                            name=\"clastName\"\r\n                                                                            id=\"clastName\"\r\n                                                                            style={{border: \"1px solid #014d88\"}}\r\n                                                                            {...register(\"clastName\",{\r\n                                                                                onChange:(e)=>{alphabetOnly(e,'clastName')}\r\n                                                                            })}\r\n                                                                        />\r\n                                                                        {errors.clastName && <p>{errors.clastName.message}</p>}\r\n                                                                    </FormGroup>\r\n                                                                </div>\r\n                                                            </div>\r\n\r\n                                                            <div className=\"row\">\r\n                                                                <div className=\"form-group mb-3 col-md-3\">\r\n                                                                    <FormGroup>\r\n                                                                        <Label for=\"contactPhoneNumber\">Phone Number</Label>\r\n                                                                        <PhoneInput\r\n                                                                            containerStyle={{width:'100%',border: \"1px solid #014d88\"}}\r\n                                                                            inputStyle={{width:'100%',borderRadius:'0px'}}\r\n                                                                            country={'ng'}\r\n                                                                            onlyCountries={['ng']}\r\n                                                                            masks={{ng: '...-...-....', at: '(....) ...-....'}}\r\n                                                                            placeholder=\"(234)7099999999\"\r\n                                                                            value={getValues('contactPhoneNumber')}\r\n                                                                            onChange={(e)=>{checkPhoneNumber(e,'contactPhoneNumber')}}\r\n                                                                            isValid={(value, country) => {\r\n                                                                                if(value === country.countryCode){\r\n                                                                                    return true;\r\n                                                                                }else{\r\n                                                                                    if(value.length < 13){\r\n                                                                                        errors.contactPhoneNumber = true;\r\n                                                                                        return \"Enter a valid phone number\";\r\n                                                                                    }else{\r\n                                                                                        errors.contactPhoneNumber = false;\r\n                                                                                        return true;\r\n                                                                                    }\r\n                                                                                }\r\n                                                                            }}\r\n                                                                        />\r\n{/*                                                                        <input\r\n                                                                            className=\"form-control\"\r\n                                                                            type=\"text\"\r\n                                                                            name=\"contactPhoneNumber\"\r\n                                                                            id=\"contactPhoneNumber\"\r\n                                                                            style={{border: \"1px solid #014d88\"}}\r\n                                                                            {...register(\"contactPhoneNumber\",{\r\n                                                                                onChange:(e)=>{checkPhoneNumber(e,'contactPhoneNumber')}\r\n                                                                            })}\r\n                                                                        />*/}\r\n                                                                        {errors.contactPhoneNumber && <p>{errors.contactPhoneNumber.message}</p>}\r\n                                                                    </FormGroup>\r\n                                                                </div>\r\n\r\n                                                                <div className=\"form-group mb-3 col-md-3\">\r\n                                                                    <FormGroup>\r\n                                                                        <Label for=\"contactEmail\">Email</Label>\r\n                                                                        <input\r\n                                                                            className=\"form-control\"\r\n                                                                            type=\"text\"\r\n                                                                            name=\"contactEmail\"\r\n                                                                            id=\"contactEmail\"\r\n                                                                            style={{border: \"1px solid #014d88\"}}\r\n                                                                            {...register(\"contactEmail\",{\r\n                                                                                onChange:(e)=>{checkPhoneNumber(e,'contactEmail')}\r\n                                                                            })}\r\n                                                                        />\r\n                                                                        {errors.contactEmail && <p>{errors.contactEmail.message}</p>}\r\n                                                                    </FormGroup>\r\n                                                                </div>\r\n\r\n                                                                <div className=\"form-group mb-3 col-md-3\">\r\n                                                                    <FormGroup>\r\n                                                                        <Label for=\"contactAddress\">Address</Label>\r\n                                                                        <input\r\n                                                                            className=\"form-control\"\r\n                                                                            type=\"text\"\r\n                                                                            name=\"contactAddress\"\r\n                                                                            id=\"contactAddress\"\r\n                                                                            style={{border: \"1px solid #014d88\"}}\r\n                                                                            {...register(\"contactAddress\")}\r\n                                                                        />\r\n                                                                        {errors.contactAddress && <p>{errors.contactAddress.message}</p>}\r\n                                                                    </FormGroup>\r\n                                                                </div>\r\n                                                            </div>\r\n\r\n                                                            <div className=\"row\">\r\n                                                                <div className=\"\">\r\n                                                                    <MatButton\r\n                                                                        type=\"button\"\r\n                                                                        variant=\"contained\"\r\n                                                                        color=\"primary\"\r\n                                                                        className={classes.button}\r\n                                                                        onClick={handleSaveRelationship}\r\n                                                                        style={{backgroundColor:'#014d88',color:'#fff'}}\r\n                                                                    >\r\n                                                                        Add\r\n                                                                    </MatButton>\r\n                                                                    <MatButton\r\n                                                                        type=\"button\"\r\n                                                                        variant=\"contained\"\r\n                                                                        color=\"secondary\"\r\n                                                                        className={classes.button}\r\n                                                                        onClick={handleCancelSaveRelationship}\r\n                                                                        style={{backgroundColor:'#992E62',color:'#fff'}}\r\n                                                                    >\r\n                                                                        Cancel\r\n                                                                    </MatButton>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                )\r\n                                            }\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div className=\"row\">\r\n                                        <MatButton\r\n                                            type=\"button\"\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            className={classes.button}\r\n                                            startIcon={<AddIcon />}\r\n                                            onClick={handleAddRelative}\r\n                                            style={{backgroundColor:'#014d88',fontWeight:\"bolder\"}}\r\n                                        >\r\n                                            Add a Relative/Next Of Kin\r\n                                        </MatButton>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            {saving ? <Spinner /> : \"\"}\r\n\r\n                            <br />\r\n\r\n                            {userDetail ===null ? (\r\n                                    <MatButton\r\n                                        type=\"submit\"\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        className={classes.button}\r\n                                        startIcon={<SaveIcon />}\r\n                                        style={{backgroundColor:'#014d88',color:'#fff'}}\r\n                                    >\r\n                                        {!saving ? (\r\n                                            <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                                        ) : (\r\n                                            <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n                                        )}\r\n                                    </MatButton>\r\n                                )\r\n                                :\r\n                                (\r\n                                    <MatButton\r\n                                        type=\"submit\"\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        className={classes.button}\r\n                                        startIcon={<SaveIcon />}\r\n                                        style={{backgroundColor:'#014d88',color:'#fff'}}\r\n                                    >\r\n                                        {!saving ? (\r\n                                            <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                                        ) : (\r\n                                            <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n                                        )}\r\n                                    </MatButton>\r\n                                )\r\n                            }\r\n                            <MatButton\r\n                                variant=\"contained\"\r\n                                className={classes.button}\r\n                                startIcon={<CancelIcon />}\r\n                                onClick={handleCancel}\r\n                                style={{backgroundColor:'#992E62',color:'#fff'}}\r\n                            >\r\n                                <span style={{ textTransform: \"capitalize\" }}>Cancel</span>\r\n                            </MatButton>\r\n                        </Form>\r\n                    </div>\r\n                </CardContent>\r\n            </Card>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default RegisterPatient;\r\n","C:\\Data.FI Code\\patient-module\\src\\api.js",[],"C:\\Data.FI Code\\patient-module\\src\\main\\webapp\\components\\SplitActionButton.js",["138","139","140","141","142","143","144","145"],"import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport ButtonGroup from '@mui/material/ButtonGroup';\r\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\r\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\r\nimport Grow from '@mui/material/Grow';\r\nimport Paper from '@mui/material/Paper';\r\nimport Popper from '@mui/material/Popper';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport MenuList from '@mui/material/MenuList';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport ListItemIcon from '@mui/material/ListItemIcon';\r\nimport ContentCut from '@mui/icons-material/ContentCut';\r\nimport Typography from '@mui/material/Typography';\r\nimport {FaEye, FaCaretDown } from \"react-icons/fa\";\r\nimport Divider from '@mui/material/Divider';\r\nimport {useRef} from \"react\";\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\n\r\nconst options = ['Delete', 'Edit'];\r\n\r\n\r\n\r\nexport default function SplitActionButton(props) {\r\n    const [open, setOpen] = React.useState(false);\r\n    const anchorRef = useRef(null);\r\n    const [selectedIndex, setSelectedIndex] = React.useState(1);\r\n\r\n    const handleClick = () => {\r\n        console.info(`You clicked ${options[selectedIndex]}`);\r\n    };\r\n\r\n    const handleMenuItemClick = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleToggle = () => {\r\n        setOpen((prevOpen) => !prevOpen);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ButtonGroup variant=\"contained\" ref={anchorRef} style={{backgroundColor:'rgb(153, 46, 98)', height:'30px',width:'150px'}} >\r\n                <Link to={props.actions[0].to} style={{borderRight:'20px solid #fff !important'}}>\r\n                    <Button size=\"small\" onClick={handleClick} variant=\"contained\" startIcon={props.actions[0].icon} style={{backgroundColor:'rgb(153, 46, 98)'}}>\r\n                        <Typography variant=\"h7\" style={{fontWeight:'bolder'}}>{props.actions[0].name}</Typography>\r\n                    </Button>\r\n                </Link>\r\n\r\n                <Divider orientation=\"vertical\" flexItem style={{borderRight:'20px solid #fff !important', backgroundColor:'#fff',width:'1px', height:'26px',marginTop:'2px'}}>\r\n                    1\r\n                </Divider>\r\n                <Button\r\n                    size=\"medium\"\r\n                    aria-controls={open ? 'split-button-menu' : undefined}\r\n                    aria-expanded={open ? 'true' : undefined}\r\n                    aria-label=\"select merge strategy\"\r\n                    aria-haspopup=\"menu\"\r\n                    onClick={handleToggle}\r\n                    style={{backgroundColor:'rgb(153, 46, 98)'}}\r\n                >\r\n                    <FaCaretDown size='24' />\r\n                </Button>\r\n            </ButtonGroup>\r\n            <Popper\r\n                open={open}\r\n                anchorEl={anchorRef.current}\r\n                role={undefined}\r\n                transition\r\n                disablePortal\r\n                style={{ zIndex:'10000' }}\r\n            >\r\n                {({ TransitionProps, placement }) => (\r\n                    <Grow\r\n                        {...TransitionProps}\r\n                        style={{\r\n                            transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom',\r\n                            zIndex:'1000'\r\n                        }}\r\n                    >\r\n                        {/*width: 130,*/}\r\n                        <Paper sx={{ minWidth:'130px', maxWidth: '150px', marginTop:'2px', zIndex:'1000' }}>\r\n                            <ClickAwayListener onClickAway={handleClose}>\r\n                                <MenuList id=\"split-button-menu\" autoFocusItem>\r\n                                    {props.actions.slice(1).map((option, index) => (\r\n                                        <MenuItem\r\n                                            key={Math.random()}\r\n                                        >\r\n                                            <Link\r\n                                                to={option.to}\r\n                                            >\r\n                                                {option.icon}<span style={{color: 'rgb(153, 46, 98)', fontWeight:'bolder', fontSize:'12px'}}>{option.name}</span>\r\n                                            </Link>\r\n\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </MenuList>\r\n                            </ClickAwayListener>\r\n                        </Paper>\r\n                    </Grow>\r\n                )}\r\n            </Popper>\r\n        </React.Fragment>\r\n    );\r\n}\r\n","C:\\Data.FI Code\\patient-module\\src\\main\\webapp\\components\\PatientCard.js",["146","147","148","149","150","151","152","153","154","155","156","157"],"import React,{useState, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport {Accordion, AccordionActions, AccordionDetails, AccordionSummary} from '@material-ui/core';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport {Button, Label} from 'semantic-ui-react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport {Col, Row, Modal} from \"reactstrap\";\r\nimport CaptureBiometric from './CaptureBiometric';\r\nimport axios from \"axios\";\r\nimport {token, url as baseUrl} from \"../../../api\";\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n    },\r\n    secondaryHeading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    icon: {\r\n        verticalAlign: 'bottom',\r\n        height: 20,\r\n        width: 20,\r\n    },\r\n    details: {\r\n        alignItems: 'center',\r\n    },\r\n    column: {\r\n        flexBasis: '20.33%',\r\n    },\r\n    helper: {\r\n        borderLeft: `2px solid ${theme.palette.divider}`,\r\n        padding: `${theme.spacing(1)}px ${theme.spacing(1) * 2}px`,\r\n    },\r\n    link: {\r\n        color: theme.palette.primary.main,\r\n        textDecoration: 'none',\r\n        '&:hover': {\r\n            textDecoration: 'underline',\r\n        },\r\n    },\r\n});\r\n\r\nfunction PatientCard(props) {\r\n    const { classes } = props;\r\n    const patientObj = props.patientObj ? props.patientObj : {};\r\n    const permissions= props.permissions ? props.permissions : [];\r\n    const [modal, setModal] = useState(false) //Modal to collect sample\r\n    const [patientBiometricStatus, setPatientBiometricStatus]= useState(props.patientBiometricStatus);\r\n    const toggleModal = () => setModal(!modal)\r\n\r\n    const [biometricStatus, setBiometricStatus] = useState(false);\r\n    const [devices, setDevices] = useState([]);\r\n    useEffect(() => {\r\n        setPatientBiometricStatus(props.patientBiometricStatus)\r\n        TemplateType();\r\n    }, [props.patientBiometricStatus]);\r\n    //Get list of KP\r\n    const TemplateType =()=>{\r\n        axios\r\n            .get(`${baseUrl}modules/check?moduleName=biometric`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setBiometricStatus(response.data);\r\n                if(response.data===true){\r\n                    axios\r\n                        .get(`${baseUrl}biometrics/devices`,\r\n                            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n                        )\r\n                        .then((response) => {\r\n                            setDevices(response.data);\r\n\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log(error)\r\n                        });\r\n\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                //console.log(error);\r\n            });\r\n\r\n    }\r\n    const getHospitalNumber = (identifier) => {\r\n        const hospitalNumber = identifier.identifier.find(obj => obj.type == 'HospitalNumber');\r\n        return hospitalNumber ? hospitalNumber.value : '';\r\n    };\r\n\r\n    const calculate_age = dob => {\r\n        const today = new Date();\r\n        const dateParts = dob.split(\"-\");\r\n        const birthDate = new Date(dob); // create a date object directlyfrom`dob1`argument\r\n        let age_now = today.getFullYear() - birthDate.getFullYear();\r\n        const m = today.getMonth() - birthDate.getMonth();\r\n        if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n            age_now--;\r\n        }\r\n        if (age_now === 0) {\r\n            return m + \" month(s)\";\r\n        }\r\n        return age_now + \" year(s)\";\r\n    };\r\n\r\n    const getPhone = (contactPoint) => {\r\n        const phoneContact = contactPoint.contactPoint.find(obj => obj.type == 'phone');\r\n        return phoneContact ? phoneContact.value : '';\r\n    };\r\n\r\n    const getAddress = (address) => {\r\n        const city = address && address.address && address.address.length > 0 ? address.address[0].city : null;\r\n        return city;\r\n    };\r\n\r\n\r\n    const handleBiometricCapture = (id) => {\r\n        let patientObjID= id\r\n        setModal(!modal)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n\r\n\r\n\r\n\r\n\r\n            <Accordion defaultExpanded>\r\n                <AccordionSummary>\r\n\r\n                    <Row>\r\n\r\n                        <Col md={11}>\r\n                            <Row className={\"mt-1\"}>\r\n                                <Col md={12} className={classes.root2} >\r\n                                    <b style={{fontSize: \"25px\", color:'rgb(153, 46, 98)'}}>\r\n                                        {patientObj.surname + \", \" + patientObj.firstName + \" \" + patientObj.otherName}\r\n                                        < span style={{color:'green'}}>\r\n                                             {\": \"+\"Active\"}\r\n                                        </span>\r\n                                    </b>\r\n\r\n                                </Col>\r\n                                <Col md={4} className={classes.root2} style={{marginTop:\"10px\"}}>\r\n                                    <span style={{color:'#000'}}>\r\n                                        {\" \"}\r\n                                        Hospital Number : <b style={{color:'#0B72AA'}}>{getHospitalNumber(patientObj.identifier) }</b>\r\n                                    </span>\r\n                                </Col>\r\n\r\n                                <Col md={4} className={classes.root2} style={{marginTop:\"10px\"}}>\r\n                                    <span style={{color:'#000'}}>\r\n                                        Date Of Birth : <b style={{color:'#0B72AA'}}>{patientObj.dateOfBirth }</b>\r\n                                    </span>\r\n                                </Col>\r\n                                <Col md={4} className={classes.root2} style={{marginTop:\"10px\"}}>\r\n                                <span style={{color:'#000'}}>\r\n                                    {\" \"}\r\n                                    Age : <b style={{color:'#0B72AA'}}>{calculate_age(patientObj.dateOfBirth) }</b>\r\n                                </span>\r\n                                </Col>\r\n                                <Col md={4} style={{marginTop:\"10px\"}}>\r\n                                    <span  style={{color:'#000'}}>\r\n                                        {\" \"}\r\n                                        Sex :{\" \"}\r\n                                        <b style={{color:'#0B72AA',fontFamily:`'poppins', sans-serif`,fontWeight:'bolder'}}>{patientObj.sex }</b>\r\n                                    </span>\r\n\r\n                                </Col>\r\n                                <Col md={4} className={classes.root2} style={{marginTop:\"10px\"}}>\r\n                                <span style={{color:'#000'}}>\r\n                                    {\" \"}\r\n                                    Phone Number : <b style={{color:'#0B72AA'}}>{getPhone(patientObj.contactPoint)}</b>\r\n                                </span>\r\n                                </Col>\r\n                                <Col md={4} className={classes.root2} style={{marginTop:\"10px\"}}>\r\n                                <span style={{color:'#000'}}>\r\n                                    {\" \"}\r\n                                    Address : <b style={{color:'#0B72AA'}}>{getAddress(patientObj.address)} </b>\r\n                                </span>\r\n\r\n                                </Col>\r\n\r\n\r\n                            </Row>\r\n                        </Col>\r\n\r\n\r\n\r\n                    </Row>\r\n\r\n                </AccordionSummary>\r\n                <AccordionDetails className={classes.details}>\r\n                    {biometricStatus===true ? (\r\n                            <>\r\n                                <div >\r\n                                    <Typography variant=\"caption\">\r\n                                        <Label  style={{height:'30px', fontSize:'14px'}} color={patientBiometricStatus===true? \"green\" : \"red\"} size={\"large\"}>\r\n                                            Biometric Status\r\n                                            <Label.Detail>{patientBiometricStatus===true? \"Captured\" : \"Not Capture\"}</Label.Detail>\r\n                                        </Label>\r\n                                        {patientBiometricStatus!==true ? (\r\n\r\n                                                <>\r\n                                                    {permissions.includes('patient_check_in') || permissions.includes(\"all_permission\") ? (\r\n                                                            <>\r\n                                                                <Label style={{height:'30px', fontSize:'14px'}} as='a' color='teal' onClick={() => handleBiometricCapture(patientObj.id)} tag>\r\n                                                                    Capture Now\r\n                                                                </Label>\r\n                                                            </>\r\n                                                        )\r\n                                                        :\"\"\r\n                                                    }\r\n                                                </>\r\n                                            )\r\n                                            :\"\"\r\n                                        }\r\n\r\n                                    </Typography>\r\n                                </div>\r\n                            </>\r\n                        )\r\n                        :\r\n                        <>\r\n                            <div >\r\n                                <Typography variant=\"caption\">\r\n                                    <Label color={\"red\"} style={{height:'30px', fontSize:'14px'}}>\r\n                                        Biometrics Module Not Install\r\n\r\n                                    </Label>\r\n\r\n                                </Typography>\r\n                            </div>\r\n                        </>\r\n                    }\r\n                </AccordionDetails>\r\n            </Accordion>\r\n{/*\r\n            <CaptureBiometric  modalstatus={modal} togglestatus={toggleModal} patientId={patientObj.id} biometricDevices={devices} setPatientBiometricStatus={setPatientBiometricStatus} />\r\n*/}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nPatientCard.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(PatientCard);","C:\\Data.FI Code\\patient-module\\src\\main\\webapp\\components\\Biometrics.js",["158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport {Modal,ModalHeader, ModalBody,Form,\r\n    Row,Label,Card,CardBody,Col, FormGroup,CardHeader, Input\r\n} from \"reactstrap\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Select from \"react-select\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport FingerprintIcon from '@material-ui/icons/Fingerprint';\r\nimport { Button2, Icon, List } from 'semantic-ui-react'\r\nimport {ToastContainer, toast} from \"react-toastify\";\r\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\r\nimport axios from \"axios\";\r\nimport {token, url as baseUrl} from \"../../../api\";\r\n\r\nimport { green, red } from '@mui/material/colors';\r\nimport { Dimmer, Loader, Image, Segment } from 'semantic-ui-react'\r\n\r\nimport Box from '@mui/material/Box';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Button from '@mui/material/Button';\r\nimport Fab from '@mui/material/Fab';\r\nimport CheckIcon from '@mui/icons-material/Check';\r\n//import SaveIcon from '@mui/icons-material/Save';\r\n// import LinearProgress from '@mui/material/LinearProgress';\r\nimport Typography from '@mui/material/Typography';\r\n// import CancelIcon from '@mui/icons-material/Cancel';\r\n// import ModalImage from \"react-modal-image\";\r\nimport {Link, useHistory} from 'react-router-dom';\r\nimport moment from \"moment\";\r\nimport {Dropdown,Badge} from 'react-bootstrap';\r\nimport { Alert, AlertTitle } from '@material-ui/lab';\r\nimport fingerprintimage  from '../images/fingerprintimage.png';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport UpgradeIcon from '@mui/icons-material/Upgrade';\r\nimport _ from 'lodash';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        \"& .dropdown-toggle::after, .dropleft .dropdown-toggle::before, .dropright .dropdown-toggle::before, .dropup .dropdown-toggle::after\":{\r\n            fontFamily:'FontAwesome',\r\n            border:'0',\r\n            verticalAlign:'middle',\r\n            marginLeft:'.25em',\r\n            lineHeight:'1'\r\n        },\r\n        \"& .dropdown-menu .dropdown-item\":{\r\n            fontSize: '14px',\r\n            color: '#014d88',\r\n            padding: '0.3rem 1.5rem',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .mt-4\":{\r\n            marginTop:'28px !important'\r\n        },\r\n        \"& .form-control\":{\r\n            color:'#992E62'\r\n        },\r\n        \"& .form-control:focus\":{\r\n            color:'#014d88'\r\n        },\r\n        \"& .sharp \":{\r\n            \"min-width\": \"35px\",\r\n            padding:\"5px\",\r\n            height: '35px',\r\n            \"min-height\": \"35px\"\r\n}\r\n    },\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n    },\r\n/*    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20,\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        \"& > *\": {\r\n            margin: theme.spacing(1),\r\n        },\r\n    },\r\n    input: {\r\n        display: \"none\",\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"12.8px\",\r\n    },*/\r\n}));\r\n\r\nlet checkUrl=\"\"\r\n\r\nfunction Biometrics(props) {\r\n    const classes = useStyles();\r\n    let history = useHistory();\r\n    const permissions = history.location && history.location.state ? history.location.state.permissions : [];\r\n    const [biometricDevices,setbiometricDevices] = useState([]);\r\n    const [objValues, setObjValues]= useState({biometricType: \"FINGERPRINT\", patientId:props.patientId, templateType:\"\", device:\"\"})\r\n    const [fingerType, setFingerType] = useState([]);\r\n    const [devices, setDevices] = useState([]);\r\n    const [loading, setLoading] = React.useState(false);\r\n    const [pageLoading, setPageLoading] = useState(false);\r\n    const [showCapture, setshowCapture] = React.useState(false);\r\n    const [tryAgain, setTryAgain] = React.useState(false);\r\n    const [success, setSuccess] = React.useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    const [storedBiometrics, setStoredBiometrics] = useState([]);\r\n    // const [responseImage, setResponseImage] = useState(\"\")\r\n    const [capturedFingered, setCapturedFingered]= useState([]);\r\n    const [selectedFingers, setSelectedFingers] = useState([]);\r\n\r\n    const buttonSx = {\r\n        ...(success && {\r\n            bgcolor: green[500],\r\n            '&:hover': {\r\n                bgcolor: green[700],\r\n            },\r\n        }),\r\n    };\r\n\r\n    const getPersonBiometrics = async() =>{\r\n        const fingersCodeset = await axios.get(`${baseUrl}application-codesets/v2/BIOMETRIC_CAPTURE_FINGERS`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n\r\n        axios.get(`${baseUrl}biometrics/person/${props.patientId}`,{ headers: {\"Authorization\" : `Bearer ${token}`}}).then(async (response)=>{\r\n            if(response.data.length > 0){\r\n                setStoredBiometrics(response.data);\r\n                setPageLoading(true);\r\n                let personCapturedFingers = _.uniq(_.map(response.data,'templateType'))\r\n                setSelectedFingers(personCapturedFingers);\r\n                let biometricItems =  _.map(fingersCodeset.data, (item)=>{\r\n                    return _.extend({}, item, {captured: personCapturedFingers.includes(item.display)});\r\n\r\n                });\r\n                setFingerType(biometricItems);\r\n            }else{\r\n                let biometricItems =  _.map(fingersCodeset.data, (item)=>{\r\n                    return _.extend({}, item, {captured: false});\r\n                    //return item.captured = personCapturedFingers.includes(item.display)\r\n                });\r\n                setFingerType(biometricItems);\r\n\r\n            }\r\n\r\n        }).catch(async (error)=>{\r\n            console.log(\"getPersonBiometrics error\")\r\n            console.log(error)\r\n\r\n            let biometricItems =  _.map(fingersCodeset.data, (item)=>{\r\n                return _.extend({}, item, {captured: false});\r\n            });\r\n            setFingerType(biometricItems);\r\n            setPageLoading(true);\r\n        })\r\n    }\r\n\r\n    const clear_storelist = () =>{\r\n        axios.post(`${baseUrl}biometrics/store-list/${props.patientId}`,props.patientId,{ headers: {\"Authorization\" : `Bearer ${token}`}}).then((response)=>{\r\n            console.log('cleared store')\r\n        }).catch((error)=>{\r\n            console.log(\"cleared store error\")\r\n            console.log(error)\r\n\r\n        })\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        clear_storelist();\r\n        getPersonBiometrics();\r\n        TemplateType();\r\n        //biometricFingers();\r\n    }, []);\r\n    //Get list of KP\r\n    const TemplateType =()=>{\r\n        axios\r\n            .get(`${baseUrl}modules/check?moduleName=biometric`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                if(response.data===true){\r\n                    axios\r\n                        .get(`${baseUrl}biometrics/devices`,\r\n                            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n                        )\r\n                        .then((response) => {\r\n                            setDevices(response.data);\r\n                            setbiometricDevices(response.data);\r\n\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log(error)\r\n                        });\r\n\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                //console.log(error);\r\n            });\r\n\r\n    }\r\n\r\n    //Get list of Finger index\r\n    const biometricFingers =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/BIOMETRIC_CAPTURE_FINGERS`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setFingerType(response.data);\r\n            })\r\n            .catch((error) => {\r\n            });\r\n\r\n    }\r\n    //check if device is plugged or not\r\n    const checkDevice = e =>{\r\n        const deviceName =e.target.value;\r\n        const selectedDevice=biometricDevices.find((x)=> x.name ===deviceName )\r\n        checkUrl= selectedDevice.url===null? baseUrl : selectedDevice.url\r\n        setObjValues({...objValues, device:deviceName})\r\n        axios\r\n            .get(`${checkUrl}biometrics/secugen/boot?reader=${deviceName}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                if(response.data.errorType ===\"ERROR\"){\r\n                    toast.error(response.data.errorName + \" is not plug\");\r\n                    //setshowCapture(true)\r\n                }else{\r\n                    setshowCapture(true)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n            });\r\n    }\r\n    // handle the input changes\r\n\r\n    const handleInputChange = e => {\r\n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n    }\r\n    //form validation\r\n    const validate = () => {\r\n        let temp = { ...errors }\r\n        temp.templateType = objValues.templateType ? \"\" : \"This field is required\"\r\n        temp.device = objValues.device ? \"\" : \"This field is required\"\r\n        setErrors({\r\n            ...temp\r\n        })\r\n        return Object.values(temp).every(x => x === \"\")\r\n    }\r\n    //to capture  selected index finger\r\n    const captureFinger = (e) => {\r\n        e.preventDefault();\r\n        if(validate()){\r\n            axios.post(`${checkUrl}biometrics/secugen/enrollment?reader=SG_DEV_AUTO`,objValues,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n            )\r\n                .then(response => {\r\n                    setLoading(true);\r\n                    if(response.data.type ===\"ERROR\"){\r\n                        setLoading(false);\r\n                        setTryAgain(true);\r\n                        window.setTimeout(() => {\r\n                            setTryAgain(false);\r\n                        }, 5000);\r\n                        toast.error(response.data.message.ERROR);\r\n                    }else{\r\n                        const templateType= response.data.templateType\r\n                        setTryAgain(false);\r\n                        setSuccess(true)\r\n                        window.setTimeout(() => {\r\n                            setSuccess(false)\r\n                            setLoading(false);\r\n                        }, 5000);\r\n                        let biometricsEnrollments = response.data\r\n                        biometricsEnrollments.capturedBiometricsList = _.uniqBy(biometricsEnrollments.capturedBiometricsList,\"templateType\");\r\n\r\n                        setCapturedFingered([...capturedFingered, biometricsEnrollments])\r\n                        //fingerType.splice(templateType, 1);\r\n                        _.find(fingerType,{'display':templateType}).captured = true;\r\n                        setFingerType([...fingerType]);\r\n                        //setObjValues({biometricType: \"FINGERPRINT\", patientId:props.patientId, templateType:\"\", device:\"\"});\r\n                        setObjValues({...objValues, templateType:\"\"});\r\n                    }\r\n                    //toast.success(\"Record save successful\");\r\n                })\r\n                .catch(error => {\r\n                });\r\n        }\r\n    }\r\n\r\n    const deleteBiometric =(id,finger)=>{\r\n        axios.delete(`${baseUrl}biometrics/${id}`,{ headers: {\"Authorization\" : `Bearer ${token}`}}).then((response)=>{\r\n            toast.success(`${finger} deleted successfully`);\r\n            _.find(fingerType,{'display':finger}).captured = false;\r\n            setFingerType([...fingerType]);\r\n            let newStoredBiometrics = _.reject(storedBiometrics, {\"templateType\":finger});\r\n            setStoredBiometrics(newStoredBiometrics);\r\n            clear_storelist();\r\n            if(newStoredBiometrics.length === 0){\r\n                props.updatePatientBiometricStatus(false);\r\n            }\r\n        }).catch((error)=>{\r\n            toast.error(\"Something went wrong\");\r\n            console.log(error)\r\n\r\n        })\r\n    }\r\n\r\n    //Save Biometric capture\r\n    const saveBiometrics = (e) => {\r\n        e.preventDefault();\r\n        if(capturedFingered.length >= 1){\r\n            const capturedObj= capturedFingered[capturedFingered.length - 1];\r\n            capturedObj.capturedBiometricsList =_.uniqBy(capturedObj.capturedBiometricsList,\"templateType\")\r\n            axios.post(`${baseUrl}biometrics/templates`,capturedObj,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n            )\r\n                .then(response => {\r\n                    toast.success(\"Biometric save successful\");\r\n                    setCapturedFingered([])\r\n                    getPersonBiometrics();\r\n                    props.updatePatientBiometricStatus(true);\r\n                })\r\n                .catch(error => {\r\n                    toast.error(\"Something went wrong saving biometrics\");\r\n                    console.log(error);\r\n                });\r\n        }else{\r\n\r\n            toast.error(\"You can't save less than 2 finger\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n\r\n\r\n            <div style={{display:\"flex\",width:'100%'}}>\r\n                <div className=\"\" style={{padding:'5px', flex:\"7\",boxShadow: 'rgba(99, 99, 99, 0.2) 0px 2px 8px 0px',minHeight:'400px'}}>\r\n                    {pageLoading && storedBiometrics.length > 0 ? (\r\n                            <div style={{display:\"flex\",width:'100%',flexWrap:'wrap'}}>\r\n                                {storedBiometrics.map((biometric, index)=>(\r\n                                    <div   key={index} style={{minHeight:'120px',padding:'5px', width:'20%'}}>\r\n                                        <div  className=\"card \" style={{borderRadius:\"6px\"}}>\r\n\r\n                                            <div className=\"card-header align-items-start\" style={{backgroundColor:'#fff'}}>\r\n                                                <div>\r\n                                                    <h6 className=\"fs-18 font-w500 mb-3 user-name\"><Link to={\"#\"} style={{color:'#014d88',fontSize:'14px',fontFamily:`\"poppins\",sans-serif`}}>{biometric.templateType}</Link></h6>\r\n                                                    <div className=\"fs-9 text-nowrap\" style={{fontSize:'10px',color:'#992E62', fontWeight:'bold',fontFamily:`\"poppins\",sans-serif`}}><i className=\"fa fa-calendar-o me-3\" aria-hidden=\"true\"></i>{moment(biometric.lastModifiedDate).format(\"YYYY-MM-DD HH:mm\")}</div>\r\n                                                </div>\r\n\r\n                                                {/*Action button -- Dropdown menu*/}\r\n                                                <Dropdown className=\"dropdown ms-auto\"  >\r\n                                                    <Dropdown.Toggle\r\n                                                        as=\"button\"\r\n                                                        variant=\"\"\r\n                                                        drop=\"up\"\r\n                                                        className=\"btn sharp btn-primary \"\r\n                                                        id=\"tp-btn\"\r\n                                                        style={{ backgroundColor: '#014d88', borderColor:'#014d88', borderRadius:'5px',marginRight:'-18px',marginTop:'-10px'}}\r\n                                                    >\r\n                                                        <svg\r\n                                                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                                                            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\r\n                                                            width=\"18px\"\r\n                                                            height=\"18px\"\r\n                                                            viewBox=\"0 0 24 24\"\r\n                                                            version=\"1.1\"\r\n                                                        >\r\n                                                            <g\r\n                                                                stroke=\"none\"\r\n                                                                strokeWidth=\"1\"\r\n                                                                fill=\"none\"\r\n                                                                fillRule=\"evenodd\"\r\n                                                            >\r\n                                                                <rect x=\"0\" y=\"0\" width=\"24\" height=\"24\" />\r\n                                                                <circle fill=\"#ffffff\" cx=\"12\" cy=\"5\" r=\"2\" />\r\n                                                                <circle fill=\"#ffffff\" cx=\"12\" cy=\"12\" r=\"2\" />\r\n                                                                <circle fill=\"#ffffff\" cx=\"12\" cy=\"19\" r=\"2\" />\r\n                                                            </g>\r\n                                                        </svg>\r\n                                                    </Dropdown.Toggle>\r\n                                                    <Dropdown.Menu alignRight={true} className=\"dropdown-menu-right\">\r\n                                                        <Dropdown.Item style={{color:'red'}} onClick={()=>deleteBiometric(biometric.id,biometric.templateType)}>\r\n                                                            <DeleteIcon /> Delete\r\n                                                        </Dropdown.Item>\r\n\r\n                                                    </Dropdown.Menu>\r\n                                                </Dropdown>\r\n\r\n                                            </div>\r\n                                            <div className=\"card-body p-0 pb-2\">\r\n                                                <ul className=\"list-group list-group-flush\">\r\n                                                    <li className=\"list-group-item\" style={{height:'100px', display:'flex',justifyContent:'center'}}>\r\n                                                        <img src={fingerprintimage}  alt=\"\" style={{height:'80px'}} />\r\n                                                    </li>\r\n\r\n                                                    <li className=\"list-group-item\">\r\n\r\n                                                        <Badge variant=\"info badge-xs light\" className=\"card-link float-end\">Version {/*{contact.version}*/}</Badge>\r\n                                                        <span className=\"mb-0 title\">Status {biometric.iso}</span> :\r\n                                                        <span className=\"text-black desc-text ms-2\">\r\n                                                        <Badge variant={biometric.iso===true? \"primary badge-xs\": \"danger badge-xs\"}><i className=\"fa fa-check-square me-2 scale4\" aria-hidden=\"true\"></i> </Badge>\r\n                                                    </span>\r\n                                                    </li>\r\n\r\n                                                </ul>\r\n                                            </div>\r\n\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                ))}\r\n                            </div>\r\n                        )\r\n                        :\r\n                        <>\r\n                            <div className=\"flex-grow-8\">\r\n                                <div  className=\"flex-grow-8\"  >\r\n                                    <Alert severity=\"info\">\r\n                                        <AlertTitle style={{height:'400px'}}>\r\n                                            <strong>No biometrics captured</strong>\r\n                                        </AlertTitle>\r\n                                    </Alert>\r\n                                </div>\r\n                            </div>\r\n                        </>\r\n                    }\r\n                </div>\r\n                {/*{permissions.includes('capture_patient_biometrics')|| permissions.includes(\"all_permission\")?*/}\r\n                {permissions.includes('capture_patient_biometrics')|| permissions.includes(\"all_permission\") ?\r\n                    <div style={{flex:\"3\",padding:'5px',marginLeft:'5px',border:'1px solid rgba(99, 99, 99, 0.2)',boxShadow: 'rgba(99, 99, 99, 0.2) 0px 2px 8px 0px'}}>\r\n                        <div className=\"col-12\">\r\n                            <ToastContainer />\r\n                            <Col md={12}>\r\n                                <FormGroup>\r\n                                    <Label for='device' style={{color:'#014d88',fontWeight:'bold',fontSize:'14px' }}>Select Device </Label>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        name=\"device\"\r\n                                        id=\"device\"\r\n                                        onChange={checkDevice}\r\n                                        value={objValues.device}\r\n                                        required\r\n                                    >\r\n                                        <option value=\"\">Select Device </option>\r\n                                        {biometricDevices.map(({ id, name }) => (\r\n                                            <option key={id} value={name}>\r\n                                                {name}\r\n                                            </option>\r\n                                        ))}\r\n\r\n                                    </Input>\r\n                                    {errors.device !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.device}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </Col>\r\n                            {showCapture ? (\r\n                                    <div className=\"row col-12\">\r\n                                        <Col md={6}>\r\n                                            <FormGroup>\r\n                                                <Label for='device' style={{color:'#014d88',fontWeight:'bold',fontSize:'14px' }}>Select Finger</Label>\r\n                                                <Input\r\n                                                    type=\"select\"\r\n                                                    name=\"templateType\"\r\n                                                    id=\"templateType\"\r\n                                                    onChange={handleInputChange}\r\n                                                    value={objValues.templateType}\r\n                                                    required\r\n                                                >\r\n                                                    <option value=\"\">Select Finger </option>\r\n\r\n                                                    {_.filter(fingerType, ['captured', false]).map((value) => (\r\n                                                        <option key={value.id} value={value.display}>\r\n                                                            {value.display}\r\n                                                        </option>\r\n                                                    ))}\r\n                                                </Input>\r\n                                                {errors.templateType !==\"\" ? (\r\n                                                    <span className={classes.error}>{errors.templateType}</span>\r\n                                                ) : \"\" }\r\n                                            </FormGroup>\r\n                                        </Col>\r\n\r\n\r\n                                        <Col md={6}>\r\n\r\n                                            <MatButton\r\n                                                type='button'\r\n                                                variant='contained'\r\n                                                color='primary'\r\n                                                onClick={captureFinger}\r\n                                                className={'mt-4'}\r\n                                                style={{backgroundColor:'#992E62'}}\r\n                                                startIcon={<FingerprintIcon />}\r\n                                            >\r\n                                                Capture Finger\r\n                                            </MatButton>\r\n\r\n                                        </Col>\r\n                                        <br/>\r\n\r\n                                    </div>\r\n                                )\r\n                                :\r\n                                \"\"\r\n                            }\r\n\r\n                            <Row>\r\n                                {capturedFingered.length >=1 ? (\r\n                                        <>\r\n                                            <Col md={12} style={{marginTop:\"10px\", paddingBottom:'20px'}}>\r\n                                                <List celled horizontal>\r\n                                                    {capturedFingered.map((x) => (\r\n                                                        <List.Item style={{width:'200px',height:'200px',border:'1px dotted #014d88',margin:'5px'}}>\r\n                                                            <List.Header style={{ paddingLeft:\"0px\", height:'0.5rem',display:'flex', justifyContent:'right',alignItems: 'right'}}><Icon name='cancel'  color='red' /> </List.Header>\r\n                                                            <List.Content style={{width:'200px',height:'160px',display:'flex', justifyContent:'center',alignItems: 'center'}}> <FingerprintIcon style={{color:\"#992E62\", fontSize: 150}}/></List.Content>\r\n                                                            <List.Content style={{width:'200px',height:'30px',display:'flex', justifyContent:'center',alignItems: 'center', fontSize: '18px',color:'#014d88',fontWeight:'bold', fontFamily:'\"poppins\", sans-serif'}}>{x.templateType}</List.Content>\r\n                                                        </List.Item>\r\n                                                    ))}\r\n\r\n                                                </List>\r\n\r\n                                            </Col>\r\n                                            <br/><br/><br/><br/><br/><br/>\r\n                                            <Col md={12} >\r\n                                                <MatButton\r\n                                                    type='button'\r\n                                                    variant='contained'\r\n                                                    color='primary'\r\n                                                    onClick={saveBiometrics}\r\n                                                    // className={classes.button}\r\n                                                    startIcon={<SaveIcon/>}\r\n                                                >\r\n                                                    Save Capture\r\n                                                </MatButton>\r\n                                            </Col>\r\n                                        </>\r\n                                    )\r\n                                    :\r\n                                    \"\"\r\n                                }\r\n                            </Row>\r\n                        </div>\r\n                    </div>\r\n\r\n                    :\"\"\r\n\r\n                }\r\n\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n{/*\r\n            <Form >\r\n\r\n                    <Card>\r\n                         <CardHeader>\r\n                                    Capture Biometrics\r\n                                </CardHeader>\r\n                        <CardBody>\r\n                            <Row form>\r\n                                <ToastContainer />\r\n                                <Col md={4}>\r\n                                    <FormGroup>\r\n                                        <Label for='device'>Select Device </Label>\r\n                                        <Input\r\n                                            type=\"select\"\r\n                                            name=\"device\"\r\n                                            id=\"device\"\r\n                                            onChange={checkDevice}\r\n                                            value={objValues.device}\r\n                                            required\r\n                                        >\r\n                                            <option value=\"\">Select Device </option>\r\n                                            {biometricDevices.map(({ id, name }) => (\r\n                                                <option key={id} value={name}>\r\n                                                    {name}\r\n                                                </option>\r\n                                            ))}\r\n\r\n                                        </Input>\r\n                                        {errors.device !==\"\" ? (\r\n                                            <span className={classes.error}>{errors.device}</span>\r\n                                        ) : \"\" }\r\n                                    </FormGroup>\r\n                                </Col>\r\n                                {showCapture ? (\r\n                                        <>\r\n                                            <Col md={4}>\r\n                                                <FormGroup>\r\n                                                    <Label for='device'>Select Finger</Label>\r\n                                                    <Input\r\n                                                        type=\"select\"\r\n                                                        name=\"templateType\"\r\n                                                        id=\"templateType\"\r\n                                                        onChange={handleInputChange}\r\n                                                        value={objValues.templateType}\r\n                                                        required\r\n                                                    >\r\n                                                        <option value=\"\">Select Finger </option>\r\n\r\n                                                        {fingerType.map((value) => (\r\n                                                            <option key={value.id} value={value.display}>\r\n                                                                {value.display}\r\n                                                            </option>\r\n                                                        ))}\r\n                                                    </Input>\r\n                                                    {errors.templateType !==\"\" ? (\r\n                                                        <span className={classes.error}>{errors.templateType}</span>\r\n                                                    ) : \"\" }\r\n                                                </FormGroup>\r\n                                            </Col>\r\n\r\n\r\n                                            <Col md={4}>\r\n\r\n                                                <MatButton\r\n                                                    type='button'\r\n                                                    variant='contained'\r\n                                                    color='primary'\r\n                                                    onClick={captureFinger}\r\n                                                    className={'mt-4'}\r\n                                                    startIcon={<FingerprintIcon />}\r\n                                                >\r\n                                                    Capture Finger\r\n                                                </MatButton>\r\n\r\n                                            </Col>\r\n                                            <br/>\r\n\r\n                                        </>\r\n                                    )\r\n                                    :\r\n                                    \"\"\r\n                                }\r\n                                 <img width='500' height='200' src={responseImage}/>\r\n                                <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\r\n\r\n                                    {loading && (\r\n                                        <>\r\n                                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                                                <Box sx={{ m: 1, position: 'relative' }}>\r\n                                                    <Fab\r\n                                                        aria-label=\"save\"\r\n                                                        color=\"secondary\"\r\n                                                        sx={buttonSx}\r\n\r\n                                                    >\r\n                                                        {success ? <CheckIcon /> : <FingerprintIcon />}\r\n                                                    </Fab>\r\n                                                    {loading && (\r\n                                                        <CircularProgress\r\n                                                            size={68}\r\n                                                            sx={{\r\n                                                                color: green[500],\r\n                                                                position: 'absolute',\r\n                                                                top: -6,\r\n                                                                left: -6,\r\n                                                                zIndex: 1,\r\n                                                            }}\r\n                                                        />\r\n                                                    )}\r\n                                                </Box>\r\n                                                <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                                                    {success ?` your  ${objValues.templateType} Finger captured.` : `Please place your  ${objValues.templateType} Finger on scanner.`}\r\n                                                </Typography>\r\n                                            </Box>\r\n                                        </>\r\n                                    )\r\n                                    }\r\n                                    {tryAgain && (\r\n                                        <>\r\n\r\n\r\n                                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                                                <Box sx={{ m: 1, position: 'relative' }}>\r\n                                                    <Fab\r\n                                                        aria-label=\"save\"\r\n                                                        color=\"secondary\"\r\n                                                        sx={buttonSx}\r\n\r\n                                                    >\r\n                                                        <FingerprintIcon />\r\n                                                    </Fab>\r\n                                                    {tryAgain && (\r\n                                                        <CircularProgress\r\n                                                            size={68}\r\n                                                            sx={{\r\n                                                                color: red[500],\r\n                                                                position: 'absolute',\r\n                                                                top: -6,\r\n                                                                left: -6,\r\n                                                                zIndex: 1,\r\n                                                            }}\r\n                                                        />\r\n                                                    )}\r\n                                                </Box>\r\n                                                <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                                                    Click to Recapture Again\r\n                                                </Typography>\r\n                                            </Box>\r\n                                        </>\r\n                                    )\r\n                                    }\r\n\r\n                                </Col>\r\n\r\n\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                {capturedFingered.length >=1 ? (\r\n                                        <>\r\n                                            <Col md={12} >\r\n                                                <h3>Captured Fingerprints</h3>\r\n                                            </Col>\r\n                                            <Col md={12} style={{marginTop:\"20px\"}}>\r\n                                                <List celled horizontal>\r\n                                                    {capturedFingered.map((x) => (\r\n                                                        <List.Item style={{width:'200px',height:'200px',display:'flex', justifyContent:'center',alignItems: 'center'}}>\r\n                                                             <List.Header><Icon name='cancel'  color='red' /> </List.Header>\r\n                                                            <List.Content> <FingerprintIcon style={{color:\"#2E7D32\", fontSize: 40}}/>{x.templateType}</List.Content>\r\n                                                        </List.Item>\r\n                                                    ))}\r\n\r\n                                                </List>\r\n\r\n                                            </Col>\r\n                                             <Col md={6} style={{marginTop:\"20px\"}}>\r\n                                        <List celled horizontal>\r\n                                            {[1,2,3].map((x) => (\r\n                                                <List.Item>\r\n                                                    <List.Header><Icon name='checkmark' color='green'/> </List.Header>\r\n                                                    <List.Content > <FingerprintIcon style={{color:\"#2E7D32\", fontSize: 40}} /> Finger Type</List.Content>\r\n                                                </List.Item>\r\n                                            ))}\r\n\r\n                                        </List>\r\n\r\n                                    </Col>\r\n                                            <br/><br/><br/><br/><br/><br/>\r\n                                            <Col md={12} >\r\n                                                <MatButton\r\n                                                    type='button'\r\n                                                    variant='contained'\r\n                                                    color='primary'\r\n                                                    onClick={saveBiometrics}\r\n                                                    // className={classes.button}\r\n                                                    startIcon={<SaveIcon/>}\r\n                                                >\r\n                                                    Save Capture\r\n                                                </MatButton>\r\n                                            </Col>\r\n                                        </>\r\n                                    )\r\n                                    :\r\n                                    \"\"\r\n                                }\r\n                            </Row>\r\n                        </CardBody>\r\n                    </Card>\r\n            </Form>\r\n*/}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Biometrics;","C:\\Data.FI Code\\patient-module\\src\\main\\webapp\\components\\CaptureBiometric.js",["188","189","190","191","192","193","194","195","196","197","198","199","200","201","202"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport {Modal,ModalHeader, ModalBody,Form,\r\n        Row,Label,Card,CardBody,Col, FormGroup,CardHeader, Input\r\n        } from \"reactstrap\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Select from \"react-select\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport FingerprintIcon from '@material-ui/icons/Fingerprint';\r\nimport { Button2, Icon, List } from 'semantic-ui-react'\r\nimport {ToastContainer, toast} from \"react-toastify\";\r\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\r\nimport axios from \"axios\";\r\nimport {token, url as baseUrl} from \"../../../api\";\r\n\r\nimport { green, red } from '@mui/material/colors';\r\nimport { Dimmer, Loader, Image, Segment } from 'semantic-ui-react'\r\n\r\nimport Box from '@mui/material/Box';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Button from '@mui/material/Button';\r\nimport Fab from '@mui/material/Fab';\r\nimport CheckIcon from '@mui/icons-material/Check';\r\n//import SaveIcon from '@mui/icons-material/Save';\r\n// import LinearProgress from '@mui/material/LinearProgress';\r\nimport Typography from '@mui/material/Typography';\r\n// import CancelIcon from '@mui/icons-material/Cancel';\r\n// import ModalImage from \"react-modal-image\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n    },\r\n    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20,\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        \"& > *\": {\r\n            margin: theme.spacing(1),\r\n        },\r\n    },\r\n    input: {\r\n        display: \"none\",\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"12.8px\",\r\n    },\r\n}));\r\n\r\nlet checkUrl=\"\"\r\n\r\nconst CaptureBiometric = (props) => {\r\n    const classes = useStyles()\r\n    const biometricDevices = props.biometricDevices\r\n    const [objValues, setObjValues]= useState({biometricType: \"FINGERPRINT\", patientId:props.patientId, templateType:\"\", device:\"\"})\r\n    const [fingerType, setFingerType] = useState([]);\r\n    const [devices, setDevices] = useState(props.biometricDevices);\r\n    const [loading, setLoading] = React.useState(false);\r\n    const [showCapture, setshowCapture] = React.useState(false);\r\n    const [tryAgain, setTryAgain] = React.useState(false);\r\n    const [success, setSuccess] = React.useState(false);\r\n    const [errors, setErrors] = useState({});\r\n   // const [responseImage, setResponseImage] = useState(\"\")\r\n    const [capturedFingered, setCapturedFingered]= useState([])\r\n     console.log(biometricDevices)\r\n    const buttonSx = {\r\n      ...(success && {\r\n        bgcolor: green[500],\r\n        '&:hover': {\r\n          bgcolor: green[700],\r\n        },\r\n      }),\r\n    };\r\n\r\n\r\n    useEffect(() => {      \r\n        TemplateType();\r\n        if(objValues.device===\"\"){\r\n            setshowCapture(false)\r\n        }\r\n        \r\n      }, []);\r\n     //Get list of Finger index\r\n     const TemplateType =()=>{\r\n        axios\r\n           .get(`${baseUrl}application-codesets/v2/BIOMETRIC_CAPTURE_FINGERS`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {\r\n               setFingerType(response.data);\r\n           })\r\n           .catch((error) => {\r\n           });\r\n       \r\n     }\r\n\r\n     //check if device is plugged or not \r\n     const checkDevice = e =>{\r\n        const deviceName =e.target.value;\r\n        const selectedDevice=biometricDevices.find((x)=> x.name ===deviceName )\r\n        checkUrl= selectedDevice.url===null? baseUrl : selectedDevice.url\r\n        console.log(checkUrl)\r\n        setObjValues({...objValues, device:deviceName})\r\n        axios\r\n           .get(`${checkUrl}biometrics/secugen/boot?reader=${deviceName}`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {\r\n            if(response.data.errorType ===\"ERROR\"){\r\n                toast.error(response.data.errorName + \" is not plug\");\r\n                //setshowCapture(true)\r\n            }else{\r\n                setshowCapture(true)\r\n            }\r\n           })\r\n           .catch((error) => {\r\n           });\r\n     }\r\n     // handle the input changes \r\n\r\n     const handleInputChange = e => {        \r\n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n    }\r\n    //form validation \r\n    const validate = () => {\r\n        let temp = { ...errors }\r\n        temp.templateType = objValues.templateType ? \"\" : \"This field is required\"\r\n        temp.device = objValues.device ? \"\" : \"This field is required\"\r\n        setErrors({\r\n            ...temp\r\n            })    \r\n        return Object.values(temp).every(x => x == \"\")\r\n    }\r\n    //to capture  selected index finger \r\n    const captureFinger = (e) => {        \r\n        e.preventDefault();\r\n        if(validate()){\r\n            axios.post(`${checkUrl}biometrics/secugen/enrollment?reader=SG_DEV_AUTO`,objValues,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`}},           \r\n            )\r\n              .then(response => {\r\n                  setLoading(true);\r\n                  if(response.data.type ===\"ERROR\"){                   \r\n                    setLoading(false);\r\n                    setTryAgain(true);\r\n                    window.setTimeout(() => {\r\n                        setTryAgain(false);\r\n                      }, 5000);\r\n                    toast.error(response.data.message.ERROR);\r\n                  }else{\r\n                    const templateType= response.data.templateType\r\n                    setTryAgain(false);\r\n                    setSuccess(true)\r\n                    window.setTimeout(() => {\r\n                        setSuccess(false)\r\n                        setLoading(false);                        \r\n                      }, 5000);\r\n                                        \r\n                    setCapturedFingered([...capturedFingered, response.data])\r\n                    fingerType.splice(templateType, 1);\r\n                    setFingerType([...fingerType]);\r\n                  }\r\n                  //toast.success(\"Record save successful\");\r\n              })\r\n              .catch(error => {                 \r\n              });\r\n        }\r\n    }\r\n\r\n    //Save Biometric capture\r\n    const saveBiometrics = (e) => {        \r\n        e.preventDefault();\r\n        if(capturedFingered.length > 1){\r\n            const capturedObj= capturedFingered[capturedFingered.length - 1]\r\n            axios.post(`${baseUrl}biometrics/templates`,capturedObj,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`}},           \r\n            )\r\n              .then(response => {\r\n                toast.success(\"Biometric save successful\");\r\n                setCapturedFingered([])\r\n                props.setPatientBiometricStatus(true)\r\n                props.togglestatus()\r\n            })\r\n            .catch(error => {\r\n                toast.error(\"Something went wrong\");\r\n            });\r\n        }else{\r\n            \r\n            toast.error(\"You can't save less than 2 finger\");\r\n        }\r\n  }  \r\n    \r\n // console.log(capturedFingered)\r\n\r\n    return (\r\n        <div >\r\n            <Card >\r\n                <CardBody>\r\n                    <Modal isOpen={props.modalstatus} toggle={props.togglestatus} className={props.className} size=\"lg\">\r\n                        <Form >\r\n                            <ModalHeader toggle={props.togglestatus}>capture Biometric</ModalHeader>\r\n                            <ModalBody>\r\n                                <Card>\r\n                                {/* <CardHeader>\r\n                                    Capture Biometrics\r\n                                </CardHeader> */}\r\n                                    <CardBody>\r\n                                    <Row form>\r\n                                    <ToastContainer />\r\n                                        <Col md={4}>\r\n                                            <FormGroup>\r\n                                                <Label for='device'>Select Device </Label>\r\n                                                <Input\r\n                                                    type=\"select\"\r\n                                                    name=\"device\"\r\n                                                    id=\"device\"\r\n                                                    onChange={checkDevice}\r\n                                                    value={objValues.device}\r\n                                                    required\r\n                                                >\r\n                                                <option value=\"\">Select Device </option>\r\n                                                {biometricDevices.map(({ id, name }) => (\r\n                                                    <option key={id} value={name}>\r\n                                                        {name}\r\n                                                    </option>\r\n                                                ))}\r\n                                              \r\n                                            </Input>\r\n                                            {errors.device !==\"\" ? (\r\n                                                <span className={classes.error}>{errors.device}</span>\r\n                                            ) : \"\" }\r\n                                            </FormGroup>\r\n                                        </Col>\r\n                                        {showCapture ? (\r\n                                        <>\r\n                                            <Col md={4}>\r\n                                            <FormGroup>\r\n                                                <Label for='device'>Select Finger</Label>\r\n                                                <Input\r\n                                                    type=\"select\"\r\n                                                    name=\"templateType\"\r\n                                                    id=\"templateType\"\r\n                                                    onChange={handleInputChange}\r\n                                                    value={objValues.templateType}\r\n                                                    required\r\n                                                >\r\n                                                <option value=\"\">Select Finger </option>\r\n\r\n                                                {fingerType.map((value) => (\r\n                                                    <option key={value.id} value={value.display}>\r\n                                                        {value.display}\r\n                                                    </option>\r\n                                                ))}\r\n                                            </Input>\r\n                                            {errors.templateType !==\"\" ? (\r\n                                                <span className={classes.error}>{errors.templateType}</span>\r\n                                            ) : \"\" }\r\n                                            </FormGroup>\r\n                                        </Col>\r\n                                        \r\n\r\n                                        <Col md={4}>\r\n                                        \r\n                                        <MatButton\r\n                                            type='button'\r\n                                            variant='contained'\r\n                                            color='primary'\r\n                                            onClick={captureFinger}\r\n                                            className={'mt-4'}\r\n                                            startIcon={<FingerprintIcon />}\r\n                                        >\r\n                                            Capture Finger\r\n                                        </MatButton>\r\n\r\n                                        </Col>\r\n                                        <br/>\r\n                                        \r\n                                        </>\r\n                                        )\r\n                                        :\r\n                                        \"\"\r\n                                        }\r\n                                        {/* <img width='500' height='200' src={responseImage}/> */}\r\n                                        <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\r\n                                       \r\n                                     {loading && (\r\n                                        <>\r\n                                         <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                                            <Box sx={{ m: 1, position: 'relative' }}>\r\n                                                <Fab\r\n                                                aria-label=\"save\"\r\n                                                color=\"secondary\"\r\n                                                sx={buttonSx}\r\n                                                \r\n                                                >\r\n                                                {success ? <CheckIcon /> : <FingerprintIcon />}\r\n                                                </Fab>\r\n                                                {loading && (\r\n                                                <CircularProgress\r\n                                                    size={68}\r\n                                                    sx={{\r\n                                                    color: green[500],\r\n                                                    position: 'absolute',\r\n                                                    top: -6,\r\n                                                    left: -6,\r\n                                                    zIndex: 1,\r\n                                                    }}\r\n                                                />\r\n                                                )}\r\n                                            </Box>\r\n                                            <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                                            {success ?` your  ${objValues.templateType} Finger captured.` : `Please place your  ${objValues.templateType} Finger on scanner.`}\r\n                                            </Typography>\r\n                                        </Box>\r\n                                        </>\r\n                                        )\r\n                                        } \r\n                                        {tryAgain && (\r\n                                        <>\r\n                                        \r\n\r\n                                         <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                                            <Box sx={{ m: 1, position: 'relative' }}>\r\n                                                <Fab\r\n                                                aria-label=\"save\"\r\n                                                color=\"secondary\"\r\n                                                sx={buttonSx}\r\n                                                \r\n                                                >\r\n                                                 <FingerprintIcon />\r\n                                                </Fab>\r\n                                                {tryAgain && (\r\n                                                <CircularProgress\r\n                                                    size={68}\r\n                                                    sx={{\r\n                                                    color: red[500],\r\n                                                    position: 'absolute',\r\n                                                    top: -6,\r\n                                                    left: -6,\r\n                                                    zIndex: 1,\r\n                                                    }}\r\n                                                />\r\n                                                )}\r\n                                            </Box>\r\n                                            <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                                            Click to Recapture Again\r\n                                            </Typography>\r\n                                        </Box>\r\n                                        </>\r\n                                        )\r\n                                        } \r\n                                        {/*  */}\r\n                                        </Col>\r\n                                       \r\n                                            \r\n                                        </Row>\r\n\r\n                                    <Row>\r\n                                 {capturedFingered.length >=1 ? (  \r\n                                     <>                               \r\n                                    <Col md={12} >\r\n                                        <h3>Captured Fingerprints</h3>\r\n                                    </Col>\r\n                                    <Col md={12} style={{marginTop:\"20px\"}}>\r\n                                        <List celled horizontal>\r\n                                            {capturedFingered.map((x) => (\r\n                                                <List.Item>\r\n                                                    {/* <List.Header><Icon name='cancel'  color='red' /> </List.Header> */}\r\n                                                    <List.Content> <FingerprintIcon style={{color:\"#2E7D32\", fontSize: 40}}/>{x.templateType}</List.Content>\r\n                                                </List.Item>\r\n                                            ))}\r\n\r\n                                        </List>\r\n\r\n                                    </Col>\r\n                                    {/* <Col md={6} style={{marginTop:\"20px\"}}>\r\n                                        <List celled horizontal>\r\n                                            {[1,2,3].map((x) => (\r\n                                                <List.Item>\r\n                                                    <List.Header><Icon name='checkmark' color='green'/> </List.Header>\r\n                                                    <List.Content > <FingerprintIcon style={{color:\"#2E7D32\", fontSize: 40}} /> Finger Type</List.Content>\r\n                                                </List.Item>\r\n                                            ))}\r\n\r\n                                        </List>\r\n\r\n                                    </Col> */}\r\n                                    <br/><br/><br/><br/><br/><br/>\r\n                                        <Col md={12} >\r\n                                            <MatButton\r\n                                                type='button'\r\n                                                variant='contained'\r\n                                                color='primary'\r\n                                                onClick={saveBiometrics}\r\n                                                // className={classes.button}\r\n                                                startIcon={<SaveIcon/>}\r\n                                            >\r\n                                                Save Capture\r\n                                            </MatButton>\r\n                                        </Col>\r\n                                    </> \r\n                                    )\r\n                                        :\r\n                                        \"\"\r\n                                    }\r\n                                    </Row>\r\n                                    </CardBody>\r\n                                </Card>\r\n                            </ModalBody>\r\n                        </Form>\r\n\r\n                    </Modal>\r\n                </CardBody>\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CaptureBiometric;\r\n",{"ruleId":"203","severity":1,"message":"204","line":1,"column":16,"nodeType":"205","messageId":"206","endLine":1,"endColumn":27},{"ruleId":"203","severity":1,"message":"207","line":1,"column":29,"nodeType":"205","messageId":"206","endLine":1,"endColumn":38},{"ruleId":"203","severity":1,"message":"208","line":1,"column":40,"nodeType":"205","messageId":"206","endLine":1,"endColumn":48},{"ruleId":"203","severity":1,"message":"209","line":15,"column":8,"nodeType":"205","messageId":"206","endLine":15,"endColumn":19},{"ruleId":"203","severity":1,"message":"210","line":12,"column":10,"nodeType":"205","messageId":"206","endLine":12,"endColumn":21},{"ruleId":"203","severity":1,"message":"211","line":13,"column":9,"nodeType":"205","messageId":"206","endLine":13,"endColumn":13},{"ruleId":"203","severity":1,"message":"212","line":13,"column":14,"nodeType":"205","messageId":"206","endLine":13,"endColumn":22},{"ruleId":"203","severity":1,"message":"213","line":13,"column":23,"nodeType":"205","messageId":"206","endLine":13,"endColumn":33},{"ruleId":"203","severity":1,"message":"214","line":13,"column":34,"nodeType":"205","messageId":"206","endLine":13,"endColumn":42},{"ruleId":"203","severity":1,"message":"215","line":16,"column":10,"nodeType":"205","messageId":"206","endLine":16,"endColumn":15},{"ruleId":"203","severity":1,"message":"216","line":112,"column":21,"nodeType":"205","messageId":"206","endLine":112,"endColumn":31},{"ruleId":"203","severity":1,"message":"217","line":115,"column":11,"nodeType":"205","messageId":"206","endLine":115,"endColumn":17},{"ruleId":"218","severity":1,"message":"219","line":116,"column":53,"nodeType":"220","messageId":"221","endLine":116,"endColumn":55},{"ruleId":"203","severity":1,"message":"222","line":149,"column":23,"nodeType":"205","messageId":"206","endLine":149,"endColumn":31},{"ruleId":"203","severity":1,"message":"223","line":163,"column":15,"nodeType":"205","messageId":"206","endLine":163,"endColumn":24},{"ruleId":"218","severity":1,"message":"219","line":177,"column":75,"nodeType":"220","messageId":"221","endLine":177,"endColumn":77},{"ruleId":"203","severity":1,"message":"224","line":181,"column":11,"nodeType":"205","messageId":"206","endLine":181,"endColumn":21},{"ruleId":"203","severity":1,"message":"225","line":186,"column":11,"nodeType":"205","messageId":"206","endLine":186,"endColumn":20},{"ruleId":"226","severity":1,"message":"227","line":204,"column":54,"nodeType":"228","messageId":"229","endLine":204,"endColumn":56},{"ruleId":"226","severity":1,"message":"227","line":204,"column":95,"nodeType":"228","messageId":"229","endLine":204,"endColumn":97},{"ruleId":"226","severity":1,"message":"227","line":215,"column":54,"nodeType":"228","messageId":"229","endLine":215,"endColumn":56},{"ruleId":"226","severity":1,"message":"227","line":215,"column":95,"nodeType":"228","messageId":"229","endLine":215,"endColumn":97},{"ruleId":"226","severity":1,"message":"227","line":226,"column":56,"nodeType":"228","messageId":"229","endLine":226,"endColumn":58},{"ruleId":"226","severity":1,"message":"227","line":226,"column":97,"nodeType":"228","messageId":"229","endLine":226,"endColumn":99},{"ruleId":"203","severity":1,"message":"230","line":2,"column":8,"nodeType":"205","messageId":"206","endLine":2,"endColumn":17},{"ruleId":"203","severity":1,"message":"231","line":3,"column":21,"nodeType":"205","messageId":"206","endLine":3,"endColumn":31},{"ruleId":"203","severity":1,"message":"232","line":5,"column":8,"nodeType":"205","messageId":"206","endLine":5,"endColumn":17},{"ruleId":"203","severity":1,"message":"233","line":7,"column":10,"nodeType":"205","messageId":"206","endLine":7,"endColumn":13},{"ruleId":"203","severity":1,"message":"234","line":8,"column":10,"nodeType":"205","messageId":"206","endLine":8,"endColumn":14},{"ruleId":"203","severity":1,"message":"235","line":8,"column":23,"nodeType":"205","messageId":"206","endLine":8,"endColumn":30},{"ruleId":"203","severity":1,"message":"236","line":8,"column":32,"nodeType":"205","messageId":"206","endLine":8,"endColumn":36},{"ruleId":"203","severity":1,"message":"237","line":13,"column":8,"nodeType":"205","messageId":"206","endLine":13,"endColumn":11},{"ruleId":"203","severity":1,"message":"238","line":14,"column":41,"nodeType":"205","messageId":"206","endLine":14,"endColumn":52},{"ruleId":"203","severity":1,"message":"239","line":16,"column":8,"nodeType":"205","messageId":"206","endLine":16,"endColumn":24},{"ruleId":"203","severity":1,"message":"240","line":17,"column":8,"nodeType":"205","messageId":"206","endLine":17,"endColumn":16},{"ruleId":"203","severity":1,"message":"241","line":21,"column":9,"nodeType":"205","messageId":"206","endLine":21,"endColumn":19},{"ruleId":"203","severity":1,"message":"242","line":22,"column":36,"nodeType":"205","messageId":"206","endLine":22,"endColumn":47},{"ruleId":"203","severity":1,"message":"243","line":22,"column":83,"nodeType":"205","messageId":"206","endLine":22,"endColumn":93},{"ruleId":"203","severity":1,"message":"244","line":26,"column":8,"nodeType":"205","messageId":"206","endLine":26,"endColumn":20},{"ruleId":"203","severity":1,"message":"245","line":40,"column":10,"nodeType":"205","messageId":"206","endLine":40,"endColumn":24},{"ruleId":"203","severity":1,"message":"246","line":41,"column":8,"nodeType":"205","messageId":"206","endLine":41,"endColumn":13},{"ruleId":"203","severity":1,"message":"247","line":43,"column":7,"nodeType":"205","messageId":"206","endLine":43,"endColumn":11},{"ruleId":"203","severity":1,"message":"248","line":44,"column":7,"nodeType":"205","messageId":"206","endLine":44,"endColumn":18},{"ruleId":"203","severity":1,"message":"249","line":156,"column":11,"nodeType":"205","messageId":"206","endLine":156,"endColumn":21},{"ruleId":"203","severity":1,"message":"216","line":157,"column":21,"nodeType":"205","messageId":"206","endLine":157,"endColumn":31},{"ruleId":"203","severity":1,"message":"250","line":162,"column":12,"nodeType":"205","messageId":"206","endLine":162,"endColumn":17},{"ruleId":"203","severity":1,"message":"251","line":162,"column":19,"nodeType":"205","messageId":"206","endLine":162,"endColumn":27},{"ruleId":"203","severity":1,"message":"252","line":165,"column":13,"nodeType":"205","messageId":"206","endLine":165,"endColumn":25},{"ruleId":"203","severity":1,"message":"253","line":165,"column":27,"nodeType":"205","messageId":"206","endLine":165,"endColumn":34},{"ruleId":"203","severity":1,"message":"254","line":176,"column":12,"nodeType":"205","messageId":"206","endLine":176,"endColumn":23},{"ruleId":"203","severity":1,"message":"255","line":176,"column":25,"nodeType":"205","messageId":"206","endLine":176,"endColumn":39},{"ruleId":"203","severity":1,"message":"256","line":180,"column":24,"nodeType":"205","messageId":"206","endLine":180,"endColumn":37},{"ruleId":"257","severity":1,"message":"258","line":217,"column":39,"nodeType":"259","messageId":"260","endLine":217,"endColumn":41},{"ruleId":"261","severity":1,"message":"262","line":231,"column":8,"nodeType":"263","endLine":231,"endColumn":10,"suggestions":"264"},{"ruleId":"203","severity":1,"message":"265","line":265,"column":9,"nodeType":"205","messageId":"206","endLine":265,"endColumn":23},{"ruleId":"203","severity":1,"message":"266","line":270,"column":11,"nodeType":"205","messageId":"206","endLine":270,"endColumn":23},{"ruleId":"203","severity":1,"message":"267","line":278,"column":11,"nodeType":"205","messageId":"206","endLine":278,"endColumn":18},{"ruleId":"226","severity":1,"message":"268","line":378,"column":78,"nodeType":"228","messageId":"229","endLine":378,"endColumn":80},{"ruleId":"226","severity":1,"message":"268","line":378,"column":107,"nodeType":"228","messageId":"229","endLine":378,"endColumn":109},{"ruleId":"226","severity":1,"message":"227","line":378,"column":107,"nodeType":"228","messageId":"229","endLine":378,"endColumn":109},{"ruleId":"226","severity":1,"message":"227","line":378,"column":150,"nodeType":"228","messageId":"229","endLine":378,"endColumn":152},{"ruleId":"203","severity":1,"message":"269","line":405,"column":11,"nodeType":"205","messageId":"206","endLine":405,"endColumn":19},{"ruleId":"203","severity":1,"message":"270","line":413,"column":11,"nodeType":"205","messageId":"206","endLine":413,"endColumn":19},{"ruleId":"218","severity":1,"message":"219","line":418,"column":69,"nodeType":"220","messageId":"221","endLine":418,"endColumn":71},{"ruleId":"203","severity":1,"message":"271","line":450,"column":11,"nodeType":"205","messageId":"206","endLine":450,"endColumn":18},{"ruleId":"257","severity":1,"message":"258","line":465,"column":92,"nodeType":"259","messageId":"260","endLine":465,"endColumn":94},{"ruleId":"203","severity":1,"message":"272","line":120,"column":11,"nodeType":"205","messageId":"206","endLine":120,"endColumn":23},{"ruleId":"203","severity":1,"message":"273","line":121,"column":11,"nodeType":"205","messageId":"206","endLine":121,"endColumn":30},{"ruleId":"203","severity":1,"message":"274","line":122,"column":11,"nodeType":"205","messageId":"206","endLine":122,"endColumn":34},{"ruleId":"203","severity":1,"message":"275","line":123,"column":11,"nodeType":"205","messageId":"206","endLine":123,"endColumn":23},{"ruleId":"203","severity":1,"message":"251","line":124,"column":19,"nodeType":"205","messageId":"206","endLine":124,"endColumn":27},{"ruleId":"203","severity":1,"message":"276","line":126,"column":20,"nodeType":"205","messageId":"206","endLine":126,"endColumn":29},{"ruleId":"203","severity":1,"message":"277","line":130,"column":12,"nodeType":"205","messageId":"206","endLine":130,"endColumn":19},{"ruleId":"203","severity":1,"message":"278","line":130,"column":21,"nodeType":"205","messageId":"206","endLine":130,"endColumn":31},{"ruleId":"218","severity":1,"message":"219","line":158,"column":69,"nodeType":"220","messageId":"221","endLine":158,"endColumn":71},{"ruleId":"218","severity":1,"message":"219","line":177,"column":80,"nodeType":"220","messageId":"221","endLine":177,"endColumn":82},{"ruleId":"218","severity":1,"message":"219","line":178,"column":74,"nodeType":"220","messageId":"221","endLine":178,"endColumn":76},{"ruleId":"218","severity":1,"message":"219","line":179,"column":74,"nodeType":"220","messageId":"221","endLine":179,"endColumn":76},{"ruleId":"218","severity":1,"message":"219","line":180,"column":77,"nodeType":"220","messageId":"221","endLine":180,"endColumn":79},{"ruleId":"203","severity":1,"message":"279","line":182,"column":19,"nodeType":"205","messageId":"206","endLine":182,"endColumn":25},{"ruleId":"261","severity":1,"message":"280","line":216,"column":8,"nodeType":"263","endLine":216,"endColumn":10,"suggestions":"281"},{"ruleId":"203","severity":1,"message":"282","line":239,"column":15,"nodeType":"205","messageId":"206","endLine":239,"endColumn":27},{"ruleId":"218","severity":1,"message":"219","line":329,"column":62,"nodeType":"220","messageId":"221","endLine":329,"endColumn":64},{"ruleId":"203","severity":1,"message":"222","line":353,"column":27,"nodeType":"205","messageId":"206","endLine":353,"endColumn":35},{"ruleId":"203","severity":1,"message":"222","line":355,"column":27,"nodeType":"205","messageId":"206","endLine":355,"endColumn":35},{"ruleId":"218","severity":1,"message":"219","line":481,"column":28,"nodeType":"220","messageId":"221","endLine":481,"endColumn":30},{"ruleId":"218","severity":1,"message":"219","line":483,"column":35,"nodeType":"220","messageId":"221","endLine":483,"endColumn":37},{"ruleId":"203","severity":1,"message":"283","line":510,"column":9,"nodeType":"205","messageId":"206","endLine":510,"endColumn":19},{"ruleId":"203","severity":1,"message":"284","line":4,"column":8,"nodeType":"205","messageId":"206","endLine":4,"endColumn":25},{"ruleId":"203","severity":1,"message":"285","line":11,"column":8,"nodeType":"205","messageId":"206","endLine":11,"endColumn":22},{"ruleId":"203","severity":1,"message":"286","line":12,"column":8,"nodeType":"205","messageId":"206","endLine":12,"endColumn":20},{"ruleId":"203","severity":1,"message":"287","line":13,"column":8,"nodeType":"205","messageId":"206","endLine":13,"endColumn":20},{"ruleId":"203","severity":1,"message":"288","line":14,"column":8,"nodeType":"205","messageId":"206","endLine":14,"endColumn":18},{"ruleId":"203","severity":1,"message":"289","line":16,"column":9,"nodeType":"205","messageId":"206","endLine":16,"endColumn":14},{"ruleId":"203","severity":1,"message":"290","line":30,"column":27,"nodeType":"205","messageId":"206","endLine":30,"endColumn":43},{"ruleId":"203","severity":1,"message":"291","line":36,"column":11,"nodeType":"205","messageId":"206","endLine":36,"endColumn":30},{"ruleId":"203","severity":1,"message":"292","line":4,"column":20,"nodeType":"205","messageId":"206","endLine":4,"endColumn":36},{"ruleId":"203","severity":1,"message":"293","line":6,"column":8,"nodeType":"205","messageId":"206","endLine":6,"endColumn":15},{"ruleId":"203","severity":1,"message":"294","line":7,"column":9,"nodeType":"205","messageId":"206","endLine":7,"endColumn":15},{"ruleId":"203","severity":1,"message":"295","line":9,"column":19,"nodeType":"205","messageId":"206","endLine":9,"endColumn":24},{"ruleId":"203","severity":1,"message":"296","line":10,"column":8,"nodeType":"205","messageId":"206","endLine":10,"endColumn":24},{"ruleId":"203","severity":1,"message":"297","line":55,"column":11,"nodeType":"205","messageId":"206","endLine":55,"endColumn":22},{"ruleId":"203","severity":1,"message":"298","line":58,"column":12,"nodeType":"205","messageId":"206","endLine":58,"endColumn":19},{"ruleId":"218","severity":1,"message":"219","line":92,"column":75,"nodeType":"220","messageId":"221","endLine":92,"endColumn":77},{"ruleId":"203","severity":1,"message":"223","line":98,"column":15,"nodeType":"205","messageId":"206","endLine":98,"endColumn":24},{"ruleId":"218","severity":1,"message":"219","line":112,"column":77,"nodeType":"220","messageId":"221","endLine":112,"endColumn":79},{"ruleId":"203","severity":1,"message":"299","line":123,"column":13,"nodeType":"205","messageId":"206","endLine":123,"endColumn":25},{"ruleId":"300","severity":1,"message":"301","line":145,"column":51,"nodeType":"220","messageId":"302","endLine":145,"endColumn":52},{"ruleId":"203","severity":1,"message":"303","line":1,"column":38,"nodeType":"205","messageId":"206","endLine":1,"endColumn":44},{"ruleId":"203","severity":1,"message":"295","line":2,"column":9,"nodeType":"205","messageId":"206","endLine":2,"endColumn":14},{"ruleId":"203","severity":1,"message":"304","line":2,"column":15,"nodeType":"205","messageId":"206","endLine":2,"endColumn":26},{"ruleId":"203","severity":1,"message":"305","line":2,"column":28,"nodeType":"205","messageId":"206","endLine":2,"endColumn":37},{"ruleId":"203","severity":1,"message":"306","line":2,"column":38,"nodeType":"205","messageId":"206","endLine":2,"endColumn":42},{"ruleId":"203","severity":1,"message":"307","line":3,"column":15,"nodeType":"205","messageId":"206","endLine":3,"endColumn":19},{"ruleId":"203","severity":1,"message":"308","line":3,"column":20,"nodeType":"205","messageId":"206","endLine":3,"endColumn":28},{"ruleId":"203","severity":1,"message":"309","line":3,"column":44,"nodeType":"205","messageId":"206","endLine":3,"endColumn":54},{"ruleId":"203","severity":1,"message":"310","line":7,"column":8,"nodeType":"205","messageId":"206","endLine":7,"endColumn":14},{"ruleId":"203","severity":1,"message":"311","line":13,"column":10,"nodeType":"205","messageId":"206","endLine":13,"endColumn":17},{"ruleId":"203","severity":1,"message":"312","line":15,"column":8,"nodeType":"205","messageId":"206","endLine":15,"endColumn":19},{"ruleId":"203","severity":1,"message":"313","line":19,"column":17,"nodeType":"205","messageId":"206","endLine":19,"endColumn":20},{"ruleId":"203","severity":1,"message":"314","line":20,"column":10,"nodeType":"205","messageId":"206","endLine":20,"endColumn":16},{"ruleId":"203","severity":1,"message":"315","line":20,"column":18,"nodeType":"205","messageId":"206","endLine":20,"endColumn":24},{"ruleId":"203","severity":1,"message":"316","line":20,"column":26,"nodeType":"205","messageId":"206","endLine":20,"endColumn":31},{"ruleId":"203","severity":1,"message":"235","line":20,"column":33,"nodeType":"205","messageId":"206","endLine":20,"endColumn":40},{"ruleId":"203","severity":1,"message":"237","line":22,"column":8,"nodeType":"205","messageId":"206","endLine":22,"endColumn":11},{"ruleId":"203","severity":1,"message":"317","line":23,"column":8,"nodeType":"205","messageId":"206","endLine":23,"endColumn":24},{"ruleId":"203","severity":1,"message":"294","line":24,"column":8,"nodeType":"205","messageId":"206","endLine":24,"endColumn":14},{"ruleId":"203","severity":1,"message":"318","line":25,"column":8,"nodeType":"205","messageId":"206","endLine":25,"endColumn":11},{"ruleId":"203","severity":1,"message":"319","line":26,"column":8,"nodeType":"205","messageId":"206","endLine":26,"endColumn":17},{"ruleId":"203","severity":1,"message":"243","line":29,"column":8,"nodeType":"205","messageId":"206","endLine":29,"endColumn":18},{"ruleId":"203","severity":1,"message":"320","line":38,"column":8,"nodeType":"205","messageId":"206","endLine":38,"endColumn":19},{"ruleId":"203","severity":1,"message":"298","line":119,"column":12,"nodeType":"205","messageId":"206","endLine":119,"endColumn":19},{"ruleId":"203","severity":1,"message":"321","line":120,"column":12,"nodeType":"205","messageId":"206","endLine":120,"endColumn":19},{"ruleId":"203","severity":1,"message":"322","line":123,"column":12,"nodeType":"205","messageId":"206","endLine":123,"endColumn":20},{"ruleId":"203","severity":1,"message":"323","line":129,"column":12,"nodeType":"205","messageId":"206","endLine":129,"endColumn":27},{"ruleId":"203","severity":1,"message":"324","line":131,"column":11,"nodeType":"205","messageId":"206","endLine":131,"endColumn":19},{"ruleId":"261","severity":1,"message":"325","line":191,"column":8,"nodeType":"263","endLine":191,"endColumn":10,"suggestions":"326"},{"ruleId":"203","severity":1,"message":"327","line":222,"column":11,"nodeType":"205","messageId":"206","endLine":222,"endColumn":27},{"ruleId":"203","severity":1,"message":"303","line":1,"column":38,"nodeType":"205","messageId":"206","endLine":1,"endColumn":44},{"ruleId":"203","severity":1,"message":"309","line":3,"column":48,"nodeType":"205","messageId":"206","endLine":3,"endColumn":58},{"ruleId":"203","severity":1,"message":"310","line":7,"column":8,"nodeType":"205","messageId":"206","endLine":7,"endColumn":14},{"ruleId":"203","severity":1,"message":"311","line":13,"column":10,"nodeType":"205","messageId":"206","endLine":13,"endColumn":17},{"ruleId":"203","severity":1,"message":"236","line":13,"column":19,"nodeType":"205","messageId":"206","endLine":13,"endColumn":23},{"ruleId":"203","severity":1,"message":"312","line":15,"column":8,"nodeType":"205","messageId":"206","endLine":15,"endColumn":19},{"ruleId":"203","severity":1,"message":"314","line":20,"column":10,"nodeType":"205","messageId":"206","endLine":20,"endColumn":16},{"ruleId":"203","severity":1,"message":"315","line":20,"column":18,"nodeType":"205","messageId":"206","endLine":20,"endColumn":24},{"ruleId":"203","severity":1,"message":"316","line":20,"column":26,"nodeType":"205","messageId":"206","endLine":20,"endColumn":31},{"ruleId":"203","severity":1,"message":"235","line":20,"column":33,"nodeType":"205","messageId":"206","endLine":20,"endColumn":40},{"ruleId":"203","severity":1,"message":"294","line":24,"column":8,"nodeType":"205","messageId":"206","endLine":24,"endColumn":14},{"ruleId":"203","severity":1,"message":"298","line":78,"column":12,"nodeType":"205","messageId":"206","endLine":78,"endColumn":19},{"ruleId":"203","severity":1,"message":"328","line":78,"column":21,"nodeType":"205","messageId":"206","endLine":78,"endColumn":31},{"ruleId":"261","severity":1,"message":"329","line":103,"column":10,"nodeType":"263","endLine":103,"endColumn":12,"suggestions":"330"},{"ruleId":"218","severity":1,"message":"219","line":153,"column":49,"nodeType":"220","messageId":"221","endLine":153,"endColumn":51},"no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useState' is defined but never used.","'DualListBox' is defined but never used.","'MdDashboard' is defined but never used.","'Menu' is defined but never used.","'MenuList' is defined but never used.","'MenuButton' is defined but never used.","'MenuItem' is defined but never used.","'Label' is defined but never used.","'setLoading' is assigned a value but never used.","'toggle' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'response' is assigned a value but never used.","'dateParts' is assigned a value but never used.","'getAddress' is assigned a value but never used.","'getGender' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","'PropTypes' is defined but never used.","'withStyles' is defined but never used.","'ButtonMui' is defined but never used.","'Col' is defined but never used.","'Step' is defined but never used.","'Segment' is defined but never used.","'Icon' is defined but never used.","'Box' is defined but never used.","'ModalFooter' is defined but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'Controller' is defined but never used.","'FormControl' is defined but never used.","'Typography' is defined but never used.","'Autocomplete' is defined but never used.","'DateTimePicker' is defined but never used.","'Stack' is defined but never used.","'icon' is assigned a value but never used.","'checkedIcon' is assigned a value but never used.","'userDetail' is assigned a value but never used.","'today' is assigned a value but never used.","'setToday' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","'control' is assigned a value but never used.","'checkOutObj' is assigned a value but never used.","'setCheckOutObj' is assigned a value but never used.","'setCheckInObj' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'patientObj.id'. Either include it or remove the dependency array.","ArrayExpression",["331"],"'visitTypesRows' is assigned a value but never used.","'onChangeDate' is assigned a value but never used.","'columns' is assigned a value but never used.","Unexpected mix of '&&' and '||'. Use parentheses to clarify the intended order of operations.","'onDelete' is assigned a value but never used.","'onSubmit' is assigned a value but never used.","'onError' is assigned a value but never used.","'watchPnumber' is assigned a value but never used.","'watchAltPhonenumber' is assigned a value but never used.","'watchContactPhoneNumber' is assigned a value but never used.","'watchShowAge' is assigned a value but never used.","'setSaving' is assigned a value but never used.","'genders' is assigned a value but never used.","'setGenders' is assigned a value but never used.","'gender' is assigned a value but never used.","React Hook useCallback has missing dependencies: 'patientId' and 'setValue'. Either include them or remove the dependency array.",["332"],"'contactEmail' is assigned a value but never used.","'genderRows' is assigned a value but never used.","'ArrowDropDownIcon' is defined but never used.","'VisibilityIcon' is defined but never used.","'ListItemText' is defined but never used.","'ListItemIcon' is defined but never used.","'ContentCut' is defined but never used.","'FaEye' is defined but never used.","'setSelectedIndex' is assigned a value but never used.","'handleMenuItemClick' is assigned a value but never used.","'AccordionActions' is defined but never used.","'Divider' is defined but never used.","'Button' is defined but never used.","'Modal' is defined but never used.","'CaptureBiometric' is defined but never used.","'toggleModal' is assigned a value but never used.","'devices' is assigned a value but never used.","'patientObjID' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'useRef' is defined but never used.","'ModalHeader' is defined but never used.","'ModalBody' is defined but never used.","'Form' is defined but never used.","'Card' is defined but never used.","'CardBody' is defined but never used.","'CardHeader' is defined but never used.","'Select' is defined but never used.","'Button2' is defined but never used.","'ThumbUpIcon' is defined but never used.","'red' is defined but never used.","'Dimmer' is defined but never used.","'Loader' is defined but never used.","'Image' is defined but never used.","'CircularProgress' is defined but never used.","'Fab' is defined but never used.","'CheckIcon' is defined but never used.","'UpgradeIcon' is defined but never used.","'loading' is assigned a value but never used.","'tryAgain' is assigned a value but never used.","'selectedFingers' is assigned a value but never used.","'buttonSx' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'clear_storelist' and 'getPersonBiometrics'. Either include them or remove the dependency array.",["333"],"'biometricFingers' is assigned a value but never used.","'setDevices' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'objValues.device'. Either include it or remove the dependency array.",["334"],{"desc":"335","fix":"336"},{"desc":"337","fix":"338"},{"desc":"339","fix":"340"},{"desc":"341","fix":"342"},"Update the dependencies array to be: [patientObj.id]",{"range":"343","text":"344"},"Update the dependencies array to be: [patientId, setValue]",{"range":"345","text":"346"},"Update the dependencies array to be: [clear_storelist, getPersonBiometrics]",{"range":"347","text":"348"},"Update the dependencies array to be: [objValues.device]",{"range":"349","text":"350"},[8238,8240],"[patientObj.id]",[9477,9479],"[patientId, setValue]",[6960,6962],"[clear_storelist, getPersonBiometrics]",[3379,3381],"[objValues.device]"]
>>>>>>>>> Temporary merge branch 2
